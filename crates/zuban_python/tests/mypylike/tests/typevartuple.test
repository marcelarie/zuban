[case invalid_unpack_type_var_tuple]
from typing import TypeVarTuple, Unpack

Ts = TypeVarTuple("Ts")
def foo(*args: Unpack[Ts]) -> None:
    x: Unpack[Ts]  # E: Unpack is only valid in a variadic position
    reveal_type(x)  # N: Revealed type is "Any"

[case unknown_unpack]
from typing import Unpack
def foo(*args: Unpack[Unknown]) -> None: ...  # E: Name "Unknown" is not defined

[case type_var_tuple_type_application_should_not_crash]
from typing import TypeVarTuple, TypeVar, Generic, Unpack
Ts = TypeVarTuple('Ts')
T1 = TypeVar('T1')
T2 = TypeVar('T2')

class E(Generic[*Ts, T1, T2]): pass
E[int, str]
E[int, str, float]
E[int, str, float, bool]

class F(Generic[Unpack[Ts], T1, T2]): pass
F[int, str]
F[int, str, float]
F[int, str, float, bool]
