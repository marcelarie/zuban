[case union_simplification_with_none_strict_optional]
from typing import TypeVar, Generic, Union

T = TypeVar('T')

def get(default: T) -> Union[int, T]: ...

reveal_type(get(None)) # N: Revealed type is "int | None"
reveal_type(get("")) # N: Revealed type is "int | str"

[case merge_nested_unions]
# This is copied from testFlattenTypeAliasWhenAliasedAsUnion, because we he had
# issues with union definitions.
from typing import Union

T1 = int
T2 = T1 | float
T3 = T2 | complex
T4 = T3 | int

def bar(a: T4, b: T4) -> T4:
    return a + b

[case in_operator_with_union_non_match]
zz: str | bytes
1.0 in zz  # E: Unsupported operand types for in ("float" and "Union[str, bytes]")

[case in_operator_with_never]
from typing import Never
zz: Never
1.0 in zz
