[case enum_ignore_deleted]
# Similar to testEnumIgnoreIsDeleted, but additional cases
from enum import Enum

class C(Enum):
    _ignore_ = 'X'

    X = 1
    Y = 2

C._ignore_ # E: "Type[C]" has no attribute "_ignore_"
C.Y._ignore_ # E: "C" has no attribute "_ignore_"

c: C
cy: Literal[C.Y]
c._ignore_ # E: "C" has no attribute "_ignore_"
cy._ignore_ # E: "Literal[C.Y]" has no attribute "_ignore_"

[case enum_multi_literal]
from enum import Enum

E = Enum("E", "Fo" "o Bar")

reveal_type(E.Foo)  # N: Revealed type is "Literal[__main__.E.Foo]?"
reveal_type(E.Bar)  # N: Revealed type is "Literal[__main__.E.Bar]?"

[case enum_str_passed]
from enum import Enum
x = "Foo"
E = Enum(x, 'a b') # E: Enum() expects a string literal as the first argument

[case functional_enum_dict_literal_errors]
from enum import Enum
x = "asdf"
E = Enum("E", {x: 1}) # E: Enum() with dict literal requires string literals

[case functional_enum_starred_dict_literal_errors]
from enum import Enum
c = {"x": 1}
E = Enum("E", {**c}) # E: Enum() with dict literal requires string literals

[case functional_enum_with_list_input]
from enum import Enum
def foo() -> list[str]: return []
c: list[str]
E = Enum("E", c) # E: Second argument of Enum() must be string, tuple, list or dict literal for mypy to determine Enum members
E = Enum("E", foo()) # E: Second argument of Enum() must be string, tuple, list or dict literal for mypy to determine Enum members

[case functional_enum_attempt_to_reuse_keys]
# functional cases for testEnumReusedKeys
from enum import Enum
from typing import Literal

E1 = Enum("E1", "A B A")  # E: Attempted to reuse member name "A" in Enum definition "E1"
E2 = Enum("E2", ["A",
                 "A",  # E: Attempted to reuse member name "A" in Enum definition "E2"
                 "B",
                 ])
E3 = Enum("E3", [("A", 1),
                 ("A",  # E: Attempted to reuse member name "A" in Enum definition "E3"
                  2),
                 ("B", 3),
                 ])
E4 = Enum("E4", {"A": 1,
                 "A":  # E: Attempted to reuse member name "A" in Enum definition "E4"
                  2,
                 "B": 3,
                 })
reveal_type(E4.A.value)  # N: Revealed type is "Literal[1]?"
reveal_type(E4.B.value)  # N: Revealed type is "Literal[3]?"

x: Literal["A B A"]
E5 = Enum("E5", x)  # E: Attempted to reuse member name "A" in Enum definition "E5"
