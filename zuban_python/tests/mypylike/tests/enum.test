[case enum_ignore_deleted]
# Similar to testEnumIgnoreIsDeleted, but additional cases
from enum import Enum

class C(Enum):
    _ignore_ = 'X'

    X = 1
    Y = 2

C._ignore_ # E: "Type[C]" has no attribute "_ignore_"
C.Y._ignore_ # E: "Literal[C.Y]" has no attribute "_ignore_"

c: C
cy: Literal[C.Y]
c._ignore_ # E: "C" has no attribute "_ignore_"
cy._ignore_ # E: "Literal[C.Y]" has no attribute "_ignore_"

[case enum_multi_literal]
from enum import Enum

E = Enum("E", "Fo" "o Bar")

reveal_type(E.Foo)  # N: Revealed type is "Literal[__main__.E.Foo]"
reveal_type(E.Bar)  # N: Revealed type is "Literal[__main__.E.Bar]"

[case enum_str_passed]
from enum import Enum
x = "Foo"
E = Enum(x, 'a b') # E: Enum() expects a string literal as the first argument

[case functional_enum_dict_literal_errors]
from enum import Enum
x = "asdf"
E = Enum("E", {x: 1}) # E: Enum() with dict literal requires string literals

[case functional_enum_starred_dict_literal_errors]
from enum import Enum
c = {"x": 1}
E = Enum("E", {**c}) # E: ?

