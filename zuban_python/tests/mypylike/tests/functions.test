[case function_subtyping_of_keyword_params]
# flags: --mypy-compatible
def f(*, x: int, y: str) -> None: pass
def g(x: int, y: str) -> None: pass
def h(x: int, y: str = "") -> None: pass
def i(x: int, y: int = 3) -> None: pass
def j(y: str, x: int = 3) -> None: pass
f = g
f = h
f = i # E: Incompatible types in assignment (expression has type "Callable[[int, int], None]", variable has type "Callable[[NamedArg(int, 'x'), NamedArg(str, 'y')], None]")
f = j

[case infer_unannotated_star_args]
def foo(*args, **kwargs) -> None:
    reveal_type(args)  # N: Revealed type is "tuple[Any, ...]"
    reveal_type(kwargs)  # N: Revealed type is "dict[str, Any]"

[case staticmethod_unannotated_types]
class Foo:
    @staticmethod
    def foo(x, y) -> None:
        reveal_type(x)  # N: Revealed type is "Any"
        reveal_type(y)  # N: Revealed type is "Any"
