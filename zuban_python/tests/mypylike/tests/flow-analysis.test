[case unreachable_var_definition]
import mod
mod.foo  # E: Module has no attribute "foo"
mod.bar  # E: Module has no attribute "bar"
[file mod.py]
import sys
if sys.platform == 'lol':
    foo = 3
    def bar() -> None: ...

foo  # E: Name "foo" is not defined
bar  # E: Name "bar" is not defined

[case unreachable_var_definition_with_assert]
# flags: --mypy-compatible
import mod
mod.foo  # E: Module has no attribute "foo"
mod.bar  # E: Module has no attribute "bar"
mod.undefined  # E: Module has no attribute "undefined"
[file mod.py]
import sys
assert sys.platform == 'lol'
foo = 3
def bar() -> None: ...

foo
bar
undefined

[case unreachable_var_definition_with_return]
def func() -> None:
    if bool():
        return
        foo = 3
        def bar() -> None: ...

    foo  # E: Name "foo" is not defined
    bar  # E: Name "bar" is not defined
    undefined  # E: Name "undefined" is not defined

[case unreachable_var_definition_with_raise]
def func() -> None:
    if bool():
        raise; foo = 3
        def bar() -> None: ...

    foo  # E: Name "foo" is not defined
    bar  # E: Name "bar" is not defined
    undefined  # E: Name "undefined" is not defined

[case unreachable_var_after_assert_false]
# flags: --warn-unreachable
from typing import Literal, TYPE_CHECKING
x: Literal[False]
def func1() -> None:
    assert False; undefined1  # E: Statement is unreachable
    undefined2
def func2() -> None:
    assert x; undefined1  # E: Statement is unreachable
    undefined2
def func3() -> None:
    assert not TYPE_CHECKING; undefined1  # E: Statement is unreachable
    undefined2

[case conjunction_partial_inference_combination_issue]
# This was an issue, because flow analysis for conjunction can lead to
# multiple times trying to infer partials (which are not even used here).
import os
def foo() -> None:
    x = 1 and os.path.islink("").conjugate(1)  # E: Too many arguments for "conjugate" of "int"

[case avoid_type_computation_recursion]

[file foo.py]
from typing import Generic
from bar import X
class Foo(Generic[X]): ...
[file bar.py]
from typing import TypeVar
import foo

if bool():  # Causes flow analysis to happen
    X = TypeVar("X")

def here() -> None:
    reveal_type(foo.Foo())
