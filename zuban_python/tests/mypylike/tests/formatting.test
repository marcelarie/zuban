[case format_method_with_type_var]
from typing import TypeVar

T = TypeVar("T")

class Foo(Generic[T]):
    def foo(self, x: int, y: T) -> T: ...
    def bar(self, x: int, y: list[T]) -> list[T]: ...


reveal_type(Foo().foo)  # N: Revealed type is "def (x: int, y: Never) -> Never"
reveal_type(Foo[str]().foo)  # N: Revealed type is "def (x: int, y: str) -> str"

reveal_type(Foo().bar)  # N: Revealed type is "def (x: int, y: list[Never]) -> list[Never]"
reveal_type(Foo[str]().bar)  # N: Revealed type is "def (x: int, y: list[str]) -> list[str]"
