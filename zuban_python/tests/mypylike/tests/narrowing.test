[case reachability_mypy_compatible]
# flags: --mypy-compatible
def foo(x: None) -> None:
    if x is None:
        return
    else:
        1()
        if x:
            reveal_type(x)

[case reachability_no_mypy_compatible]
# flags: --no-mypy-compatible
def foo(x: None, y: int | None) -> None:
    if x is None:
        return
    else:
        1()  # E: "int" not callable
        if y:
            reveal_type(y)  # N: Revealed type is "int"
            reveal_type(x)  # N: Revealed type is "None"

[case narrow_len_yoda_like]
from typing import Any, Union, Tuple

x: Union[Tuple[int, int], Tuple[int, int, int]]
if 2 == len(x):
    reveal_type(x) # N: Revealed type is "Tuple[int, int]"
else:
    reveal_type(x) # N: Revealed type is "Tuple[int, int, int]"

[case narrow_unreachable_len1]
# flags: --warn-unreachable --mypy-compatible
from typing import Tuple

x: Tuple[int, ...]
if str():
    if len(x) >= 0:
        reveal_type(x)  # N: Revealed type is "tuple[int, ...]"
    else:
        reveal_type(x)  # E: Statement is unreachable

if str():
    if len(x) <= 0:
        reveal_type(x)  # N: Revealed type is "tuple[()]"
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, Unpack[Tuple[int, ...]]]"

if str():
    if 0 >= len(x):
        reveal_type(x)  # N: Revealed type is "tuple[()]"
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, Unpack[Tuple[int, ...]]]"

if str():
    if len(x) <= 1:
        reveal_type(x)  # N: Revealed type is "tuple[()] | tuple[int]"
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, int, Unpack[tuple[int, ...]]]"

if str():
    if 1 >= len(x):
        reveal_type(x)  # N: Revealed type is "tuple[()] | tuple[int]"
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, int, Unpack[tuple[int, ...]]]"


[case narrow_unreachable_len2]
# flags: --warn-unreachable --mypy-compatible
from typing import Tuple

x: Tuple[int, ...]

if str():
    if 0 > len(x):
        reveal_type(x)  # E: Statement is unreachable
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, ...]"

if str():
    if 1 > len(x):
        reveal_type(x)  # N: Revealed type is "tuple[()]"
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, Unpack[Tuple[int, ...]]]"

if str():
    if 2 > len(x):
        reveal_type(x)  # N: Revealed type is "tuple[()] | tuple[int]"
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, int, Unpack[tuple[int, ...]]]"

if str():
    if 0 < len(x):
        reveal_type(x)  # N: Revealed type is "tuple[int, Unpack[Tuple[int, ...]]]"
    else:
        reveal_type(x)  # N: Revealed type is "tuple[()]"

if str():
    if len(x) < 0:
        reveal_type(x)  # E: Statement is unreachable
    else:
        reveal_type(x)  # N: Revealed type is "tuple[int, ...]"

[case narrowing_named_tuple_calls1]
# Like testNarrowingLenUnionOfNamedTuples, but with direct calls instead of classes
from typing import NamedTuple, Union

Point2D = NamedTuple("Point2D", [('x', int), ('y', int)])
Point3D = NamedTuple("Point3D", [('x', int), ('y', int), ('z', int)])

x: Union[Point2D, Point3D]
if len(x) == 2:
    reveal_type(x)  # N: Revealed type is "Tuple[builtins.int, builtins.int, fallback=__main__.Point2D]"
else:
    reveal_type(x)  # N: Revealed type is "Tuple[builtins.int, builtins.int, builtins.int, fallback=__main__.Point3D]"

[case narrowing_named_tuple_calls2]
# Like testNarrowingLenUnionOfNamedTuples, but with direct calls instead of classes
from typing import NamedTuple, Union
from collections import namedtuple

Point2D = namedtuple("Point2D", ['x', 'y'])
Point3D = namedtuple("Point3D", ['x', 'y', 'z'])

x: Union[Point2D, Point3D]
if len(x) == 2:
    reveal_type(x)  # N: Revealed type is "Tuple[Any, Any, fallback=__main__.Point2D]"
else:
    reveal_type(x)  # N: Revealed type is "Tuple[Any, Any, Any, fallback=__main__.Point3D]"

[case narrowing_type_of_other_side]
from typing import Any

x: Any
if int == type(x):
    reveal_type(x)  # N: Revealed type is "int"
else:
    reveal_type(x)  # N: Revealed type is "Any"

[case avoid_narrowing_of_len_with_big_unpack]
from typing import Tuple
from typing_extensions import Unpack

VarTuple = Tuple[int, Unpack[Tuple[str, ...]]]

x: VarTuple
if len(x) < 30:
    reveal_type(x) # N: Revealed type is "builtins.tuple[builtins.int, Unpack[Tuple[str, ...]]]"
else:
    reveal_type(x) # N: Revealed type is "builtins.tuple[builtins.int, Unpack[Tuple[str, ...]]]"

[case narrow_attribute_split]
class Foo:
    x: int | None

foo: Foo

foo.x + 1 # E: Unsupported operand types for + ("None" and "int") \
          # N: Left operand is of type "int | None"

if foo.x:
    foo.x + 1

[case narrow_getitem_split]
foo: list[int | None]

foo[0] + 1 # E: Unsupported operand types for + ("None" and "int") \
           # N: Left operand is of type "int | None"

if foo[0]:
    foo[0] + 1
    foo[1] + 1 # E: Unsupported operand types for + ("None" and "int") \
               # N: Left operand is of type "int | None"

[case new_type_intersection]
from typing import NewType
class A: ...
class B: ...
N = NewType('N', A)

def parse_ast(n: N) -> None:
    if isinstance(n, B):
        reveal_type(n)  # N: Revealed type is "<subclass of "N" and "B">"

[case tuple_intersection_with_getitem]
from typing import Tuple
class A:
    def foo(self) -> int: ...
class B: ...

x: Tuple[int, str]

if isinstance(x, A):
    reveal_type(x)  # N: Revealed type is "<subclass of "tuple" and "A">"
    reveal_type(x[0])  # N: Revealed type is "int"
    reveal_type(x[1])  # N: Revealed type is "str"
    x.foo()

a: A
if isinstance(a, B):
    a[0]  # E: Value of type "A" is not indexable

[case intersection_with_getitem_of_classes]
from typing import Tuple
class A:
    def __getitem__(self, other: int) -> str: ...
class B: ...

a: A
b: B
if isinstance(a, B):
    reveal_type(a[0])  # N: Revealed type is "str"

if isinstance(b, A):
    reveal_type(b[0]) # N: Revealed type is "str"

[case issubclass_and_isinstance_with_generics]
from typing import Generic, TypeVar, Type
T = TypeVar('T')

class A(Generic[T]): ...

a1: Type[A[int]]
a2: A[int]

if issubclass(a1, A):
    reveal_type(a1)  # N: Revealed type is "Type[__main__.A[int]]"

if isinstance(a2, A):
    reveal_type(a2) # N: Revealed type is "__main__.A[int]"

[case narrow_frozenset_contains]
d: frozenset[str]
key: str | None
if key in d:
    reveal_type(key)  # N: Revealed type is "str"
else:
    reveal_type(key)  # N: Revealed type is "str | None"

[case narrow_type_type_parent_unions]
from typing import ClassVar, Type, Literal
class Foo:
    baz: ClassVar[Literal[1]] = 1
class Bar:
    baz: ClassVar[Literal[2]] = 2

def foo(x: Type[Foo | Bar]) -> None:
    if x.baz == 1:
        reveal_type(x)  # N: Revealed type is "Type[__main__.Foo]"
    else:
        reveal_type(x)  # N: Revealed type is "Type[__main__.Bar]"

def bar(x: Type[Foo] | Type[Bar]) -> None:
    if x.baz == 2:
        reveal_type(x)  # N: Revealed type is "Type[__main__.Bar]"
    else:
        reveal_type(x)  # N: Revealed type is "Type[__main__.Foo]"

[case try_stmt_else_narrowing1]
class A: ...
class B(A): ...
a: A = A()
try:
    a = B()
except Exception:
    reveal_type(a)  # N: Revealed type is "__main__.A"
else:
    reveal_type(a)  # N: Revealed type is "__main__.B"
finally:
    reveal_type(a)  # N: Revealed type is "__main__.A"

[case try_stmt_else_narrowing2]
class A: ...
class B: ...
class C: ...
a: A | B | C
a = A()
try:
    a = B()
except Exception:
    reveal_type(a)  # N: Revealed type is "__main__.A | __main__.B"
else:
    reveal_type(a)  # N: Revealed type is "__main__.B"
finally:
    reveal_type(a)  # N: Revealed type is "__main__.A | __main__.B"

[case try_stmt_else_unreachable]
# flags: --warn-unreachable
try:
    raise NotImplementedError
except Exception:
    1
else:
    1  # E: Statement is unreachable
finally:
    1

[case try_multiple_excepts_narrowing]
# flags: --warn-unreachable
class A: ...
class B(A): ...

x: A = A()
y: A = A()
x = B()
y = B()

try:
    x = A()
    y = A()
except ValueError:
    pass
except TypeError:
    pass
reveal_type(x)  # N: Revealed type is "__main__.A"
reveal_type(y)  # N: Revealed type is "__main__.A"

[case try_walrus_widening]
class A: ...
class B: ...
class C: ...
a: A | B | C
b: A | B | C
c: A | B | C
d: A | B | C
a = A()
b = A()
c = A()
d = A()

try:
    if (a := B()) and bool():
        pass
    if bool() and (b := B()):
        pass
    if (c := B()):
        pass
    (d := B())
except ValueError:
    pass
else:
    a = A()
    b = A()
    c = A()
    d = A()
reveal_type(a)  # N: Revealed type is "__main__.A | __main__.B"
reveal_type(b)  # N: Revealed type is "__main__.A | __main__.B"
reveal_type(c)  # N: Revealed type is "__main__.A | __main__.B"
reveal_type(d)  # N: Revealed type is "__main__.A | __main__.B"

[case if_widening_statement1]
# flags: --warn-unreachable
class A: ...
class B(A): ...
class C(B): ...

x: A = A()
x = C()

if bool():
    x = B()

reveal_type(x)  # N: Revealed type is "__main__.B"

[case if_widening_statement2]
# flags: --warn-unreachable
class A: ...
class B: ...
class C: ...

x: A | B | C = A()
x = A()

if bool():
    if bool():
        x = B()

    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"
    if bool():
        x = C()
reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B | __main__.C"

[case unreachable_for_simple_stmt_but_some_simple_stmts_are_ok]
# flags: --warn-unreachable

a: str | None
a = ""
if a is None:
    raise NotImplementedError; \
        bool()  # E: Statement is unreachable

[case walrus_in_conjunction]
class A: ...
class B: ...
class C: ...

y: int

def foo() -> None:
    x: A | B | C
    x = A()
    if (x := B()) and y == 1:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.B"

def bar() -> None:
    x: A | B | C
    x = A()
    if y == 1 and (x := B()):
        reveal_type(x)  # N: Revealed type is "__main__.B"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"

[case walrus_in_disjunction]
class A: ...
class B: ...
class C: ...

y: int

def foo() -> None:
    x: A | B | C
    x = A()
    if (x := B()) or y == 1:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.B"

def bar() -> None:
    x: A | B | C
    x = A()
    if y == 1 or (x := B()):
        reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.B | __main__.A"

[case walrus_isinstance_conjunction_joining]
class A: ...
class B: ...
class BB(B): ...
class C: ...

y: int

def foo() -> None:
    x: A | B | C
    x = A()
    if (x := B()) and isinstance(x, BB):
        reveal_type(x)  # N: Revealed type is "__main__.BB"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.B"

def bar() -> None:
    x: A | B | C
    x = A()
    if isinstance(x, BB) and (x := B()):
        reveal_type(x)  # N: Revealed type is "__main__.B"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"

[case walrus_isinstance_disjunction_joining]
class A: ...
class B: ...
class BB(B): ...
class C: ...

y: int

def foo() -> None:
    x: A | B | C
    x = A()
    if (x := B()) or isinstance(x, BB):
        reveal_type(x)  # N: Revealed type is "__main__.B"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.B"

def bar() -> None:
    x: A | B | C
    x = A()
    if isinstance(x, BB) or (x := B()):
        reveal_type(x)  # N: Revealed type is "__main__.B"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.B"
    reveal_type(x)  # N: Revealed type is "__main__.B"

[case multi_while_break_widening]
class A: ...
class B: ...
class C: ...

def foo(x: A | B | C) -> None:
    x = A()
    while bool():
        if bool():
            x = B()
            break
        if bool():
            x = C()
            break
    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B | __main__.C"

def bar(x: A | B | C) -> None:
    x = A()
    while True:
        if bool():
            x = B()
            break
        if bool():
            x = C()
            break
    reveal_type(x)  # N: Revealed type is "__main__.B | __main__.C"

[case while_break_widening2]
class A: ...
class B: ...
class C: ...

def foo(x: A | B | C) -> None:
    x = A()
    while bool():
        if bool():
            break
        x = B()
    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"

[case try_except_multi_widening]
class A: ...
class B: ...
class C: ...

def foo(x: A | B | C) -> None:
    x = A()
    try:
        pass
    except ValueError:
        x = B()
    except TypeError:
        pass
    else:
        return
    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"

def bar(x: A | B | C) -> None:
    x = A()
    try:
        pass
    except ValueError:
        pass
    except TypeError:
        x = B()
    else:
        return
    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B"

[case with_widening]
class A: ...
class B: ...
class C: ...
class D: ...

class Suppresses1:
    def __enter__(self) -> int: ...
    def __exit__(self, exctype: object, excvalue: object, traceback: object) -> bool: ...

class DoesNotSuppress:
    def __enter__(self) -> int: ...
    def __exit__(self, exctype: object, excvalue: object, traceback: object) -> None: ...


def foo(x: A | B | C | D) -> None:
    x = A()
    with Suppresses1():
        x = B()
        x = C()

    reveal_type(x)  # N: Revealed type is "__main__.A | __main__.B | __main__.C"

def bar(x: A | B | C | D) -> None:
    x = A()
    with DoesNotSuppress():
        x = B()
        x = C()

    reveal_type(x)  # N: Revealed type is "__main__.C"

[case narrowing_primary_target]
from typing import Union

class Animal:
    pass

class Dog(Animal):
    paws: int | str = 4

class House:
    pet: Animal | None = None

h = House()
h.pet = Dog()

if isinstance(h.pet, Dog):
    if isinstance(h.pet.paws, str):
        h.pet.paws = 1
        h.pet.paws + 1
        h.pet.paws = 1.0  # E: Incompatible types in assignment (expression has type "float", variable has type "int | str")

[case try_invalidation]
class Animal:
    pass

class Dog(Animal):
    paws: int | str = 4

def foo(x: Animal):
    x = Dog()
    x.paws = ""
    try:
        x.paws = 3
    except:
        x = Animal()
    x.paws  # E: "Animal" has no attribute "paws"

def bar(x: Animal):
    x = Dog()
    x.paws = ""
    try:
        pass
    except:
        x.paws = 3
    else:
        x = Animal()
    x.paws  # E: "Animal" has no attribute "paws"

def baz(x: Animal):
    x = Dog()
    x.paws = ""
    try:
        pass
    except TypeError:
        x.paws = 3
    except:
        x = Animal()
    x.paws  # E: "Animal" has no attribute "paws"

[case if_invalidation]
class Animal:
    pass

class Dog(Animal):
    paws: int | str = 4

def foo(x: Animal):
    x = Dog()
    x.paws = ""
    if bool():
        x.paws = 3
    else:
        x = Animal()
    x.paws  # E: "Animal" has no attribute "paws"

def bar(x: Animal):
    x = Dog()
    x.paws = ""
    if bool():
        x = Animal()
    else:
        x.paws = 3
    x.paws  # E: "Animal" has no attribute "paws"

[case del_invalidation]
class Animal:
    pass

class Dog(Animal):
    paws: int | str = 4

def foo(x: Animal):
    x = Dog()
    x.paws = ""
    if bool():
        del x
    else:
        x.paws = 3
    x.paws  # E: Trying to read deleted variable "x"

def bar(x: Animal):
    x = Dog()
    x.paws = ""
    if bool():
        del x
    else:
        x.paws = 3
    x.paws  # E: Trying to read deleted variable "x"

[case try_invalidation2]
class Animal:
    pass

class Dog(Animal):
    paws: int | str | bytes = 4

def foo(x: Animal):
    x = Dog()
    x.paws = ""
    try:
        x.paws = 3
        # Error can occur between these statements
        x = Dog()
    except:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def bar(x: Animal):
    x = Dog()
    x.paws = ""
    try:
        x.paws = 3
        # Error can occur between these statements
        x = Dog()
        return
    except:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def baz(x: Animal):
    x = Dog()
    x.paws = ""
    try:
        x = Dog()
        # Error can occur between these statements
        x.paws = 3
    except:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def bla(x: Animal):
    x = Dog()
    x.paws = ""
    try:
        x.paws = 3
    except:
        reveal_type(x.paws)  # N: Revealed type is "str | int"

[case with_invalidation]
class Animal:
    pass

class Dog(Animal):
    paws: int | str | bytes = 4

class Suppresses:
    def __enter__(self) -> int: ...
    def __exit__(self, exctype: object, excvalue: object, traceback: object) -> bool: ...

class DoesNotSuppress:
    def __enter__(self) -> int: ...
    def __exit__(self, exctype: object, excvalue: object, traceback: object) -> None: ...

def foo(x: Animal):
    x = Dog()
    x.paws = ""
    with DoesNotSuppress():
        x = Dog()
        x.paws = 3
    reveal_type(x.paws)  # N: Revealed type is "int"

def bar(x: Animal):
    x = Dog()
    x.paws = ""
    with Suppresses():
        x = Dog()
        # Error can occur between these statements
        x.paws = 3
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def baz(x: Animal):
    x = Dog()
    x.paws = ""
    with Suppresses():
        x.paws = 3
        x = Dog()
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def bla(x: Animal):
    x = Dog()
    x.paws = ""
    with Suppresses():
        x.paws = 3
    reveal_type(x.paws)  # N: Revealed type is "str | int"


[case if_invalidation2]
class Dog:
    paws: int | str | bytes = 4

x = Dog()
x.paws = ""
if bool():
    x = Dog()
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
else:
    reveal_type(x.paws)  # N: Revealed type is "str"
reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

[case if_invalidation3]
class Dog:
    paws: int | str | bytes = 4

x = Dog()
x.paws = ""
if bool():
    x = Dog()
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
else:
    x.paws = 3
    reveal_type(x.paws)  # N: Revealed type is "int"
reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

[case if_invalidation_nested]
class Dog:
    paws: int | str | bytes = 4

class House:
    pet: Dog

def foo(x: House):
    x.pet.paws = ""
    if bool():
        x = House()
        reveal_type(x.pet.paws)  # N: Revealed type is "int | str | bytes"
    else:
        reveal_type(x.pet.paws)  # N: Revealed type is "str"
    reveal_type(x.pet.paws)  # N: Revealed type is "int | str | bytes"

def bar(x: House):
    x.pet.paws = ""
    if bool():
        x.pet = Dog()
        reveal_type(x.pet.paws)  # N: Revealed type is "int | str | bytes"
    else:
        reveal_type(x.pet.paws)  # N: Revealed type is "str"
    reveal_type(x.pet.paws)  # N: Revealed type is "int | str | bytes"

[case loop_invalidation1]
class Dog:
    paws: int | str | bytes = 4

def foo(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x.paws = 3
            continue
        else:
            x = Dog()
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def bar(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x = Dog()
            continue
        else:
            x.paws = 3
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

[case loop_invalidation2]
class Dog:
    paws: int | str | bytes = 4

def foo(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x.paws = 3
            continue
        else:
            x = Dog()
            x.paws = 3
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def bar(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x = Dog()
            x.paws = 3
            continue
        else:
            x.paws = 3
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

[case loop_invalidation3]
class Dog:
    paws: int | str | bytes = 4

# foo could theoretically narrow to int | str instead of not narrowing, because
# there are so many edge cases and Mypy also doesn't narrow it.
def foo(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x = Dog()
            x.paws = 3
            continue
        else:
            x = Dog()
            x.paws = 3
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def bar(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x = Dog()
            x.paws = 3
            continue
        else:
            x.paws = 3
            x = Dog()
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def baz(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x.paws = 3
            x = Dog()
            continue
        else:
            x = Dog()
            x.paws = 3
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

[case loop_invalidation4]
class Dog:
    paws: int | str | bytes = 4

def foo(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x.paws = 3
            x = Dog()
            continue
        else:
            x.paws = 3
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

def bar(x: Dog):
    x.paws = ""
    for _ in [1]:
        if bool():
            x.paws = 3
            continue
        else:
            x.paws = 3
            x = Dog()
            continue
    else:
        reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.paws)  # N: Revealed type is "int | str | bytes"

[case loop_invalidation_nested]
class Dog:
    paws: int | str | bytes = 4

class House:
    dog: Dog

def foo(x: House):
    x.dog.paws = ""
    for _ in [1]:
        if bool():
            x.dog.paws = 3
            continue
        else:
            x = House()
            continue
    else:
        reveal_type(x.dog.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.dog.paws)  # N: Revealed type is "int | str | bytes"

def bar(x: House):
    x.dog.paws = ""
    for _ in [1]:
        if bool():
            x.dog.paws = 3
            continue
        else:
            x.dog = Dog()
            continue
    else:
        reveal_type(x.dog.paws)  # N: Revealed type is "int | str | bytes"
    reveal_type(x.dog.paws)  # N: Revealed type is "int | str | bytes"

[case union_isinstance_with_any]
from typing import Any

def foo(x: int | str, y: Any):
    if isinstance(x, int | y):
        reveal_type(x)  # N: Revealed type is "int | Any"
    else:
        reveal_type(x)  # N: Revealed type is "str"

    if isinstance(x, y | int):
        reveal_type(x)  # N: Revealed type is "Any | int"
    else:
        reveal_type(x)  # N: Revealed type is "str"

[case type_is_restriction_with_reachability]
# flags: --warn-unreachable
# Like testTypeIsNestedRestrictionUnionIsInstance, but in a better way
from typing_extensions import TypeIs
from typing import Any, List

class A: ...
class B: ...
def f(x: List[Any] | B) -> TypeIs[List[str]]: ...

def test(x: List[Any]) -> None:
    if not(f(x) or isinstance(x, A)):  # E: Right operand of "or" is never evaluated
        return  # E: Statement is unreachable
    reveal_type(x)  # N: Revealed type is "list[Any]"

def test2(x: List[Any] | B) -> None:
    if f(x) or isinstance(x, A):
        reveal_type(x)  # N: Revealed type is "list[str] | <subclass of "B" and "A">"
    else:
        reveal_type(x)  # N: Revealed type is "__main__.B"

[case infer_partial_list_with_changes_to_non_self]
# Like testInferAttributeInitializedToEmptyNonSelf, but with an explicit annotation
from typing import Self

class C:
    def __init__(self) -> None:
        self.a = []  # E: Need type annotation for "a" (hint: "a: List[<type>] = ...")
        if bool():
            a: Self = self
            a.a = [1]
            a.a.append(1)
reveal_type(C().a)  # N: Revealed type is "builtins.list[Any]"

[case partial_list_any_aug_assignment]

x = []
x += [undefined]  # E: Name "undefined" is not defined
reveal_type(x)  # N: Revealed type is "list[Any]"

y = []
y += undefined  # E: Name "undefined" is not defined
reveal_type(y)  # N: Revealed type is "list[Any]"

[case partial_list_any_aug_assignment_in_self]

class Foo:
    def __init__(self) -> None:
        self.x = []
        self.x += [undefined]  # E: Name "undefined" is not defined
        reveal_type(self.x)  # N: Revealed type is "list[Any]"

        self.y = []
        self.y += undefined  # E: Name "undefined" is not defined
        reveal_type(self.y)  # N: Revealed type is "list[Any]"

[case partial_list_aug_assignment_in_self]

class Foo:
    def __init__(self) -> None:
        self.x = []
        self.x += [1]
        reveal_type(self.x)  # N: Revealed type is "list[int]"

[case partial_list_never_aug_assignment]

x = []
x += []
x += [1]
reveal_type(x)  # N: Revealed type is "list[int]"

y = []  # E: Need type annotation for "y" (hint: "y: List[<type>] = ...")
y += []
reveal_type(y)  # N: Revealed type is "list[Any]"

[case self_assignment_does_not_narrow]
class A:
    x: int | str
class B(A):
    def __init__(self) -> None:
        self.x = 1
reveal_type(B().x)  # N: Revealed type is "int | str"

[case finished_dict_overwrite]
# flags: --local-partial-types

x = {}  # E: Need type annotation for "x" (hint: "x: Dict[<type>, <type>] = ...")

def foo() -> None:
    global x
    if bool():
        x = {1: 2}
    reveal_type(x) # N: Revealed type is "dict[Any, Any]"

[case dict_overwrite_twice_with_walrus]
x = {}
x = (x := {1: 2})
reveal_type(x) # N: Revealed type is "dict[int, int]"

[case set_overwrite]
x = set()
if bool():
    x = {1, 2}
reveal_type(x) # N: Revealed type is "set[int]"

[case module_mutual_flow_analysis1]
import a

[file a.py]
# Note: imports cycle
from b import b
if bool():
    a = 1
else:
    b + 1

[file b.py]
from a import a  # E: Cannot determine type of "a"
if bool():
    b = 1
else:
    a + 1

[case module_mutual_flow_analysis2]
import a

[file a.py]
from b import b as x
if bool():
    a = 1
else:
    x + 1

[file b.py]
from a import a as y  # E: Cannot determine type of "a"
if bool():
    b = 1
else:
    y + 1
[case foo]

[case module_mutual_flow_analysis3]
# flags: --warn-unreachable
import a
[file a.py]
from b import b as x
class A: ...
if isinstance(x, A):
    reveal_type(x)  # N: Revealed type is "<subclass of "B" and "A">"
    a = 1
else:
    x + 1  # E: Unsupported operand types for + ("B" and "int")

[file b.py]
from a import a as y, A  # E: Cannot determine type of "a"
class B: ...
if isinstance(y, B):
    reveal_type(y)  # N: Revealed type is "b.B"
    b = y
else:
    y + 1

[case module_mutual_flow_analysis4]
# Mypy errors are similar but not exactly the same
import a
[file a.py]
if bool():
    a = b  # E: Name "b" is used before definition
else:
    a = 1
from b import b
reveal_type(b)  # N: Revealed type is "Any"

[file b.py]
if bool():
    b = a  # E: Name "a" is used before definition
else:
    b = a  # E: Name "a" is used before definition
from a import a  # E: Cannot determine type of "a"
reveal_type(b)  # N: Revealed type is "Any"

[case module_mutual_flow_analysis5]
# flags: --warn-unreachable
import a
[file a.py]
from b import b
if b is None:
    a = None
else:
    a = 1
reveal_type(b)  # N: Revealed type is "Any | None"

[file b.py]
if a is None:  # E: Name "a" is used before definition
    b = None
else:
    b = a  # E: Name "a" is used before definition
from a import a  # E: Cannot determine type of "a"
reveal_type(b)  # N: Revealed type is "Any | None"

[case module_mutual_flow_analysis6]
# flags: --warn-unreachable
import a
[file a.py]
from b import b
if b is None:
    a = None
else:
    a = 1
reveal_type(b)  # N: Revealed type is "Any | None"

[file b.py]
from a import a  # E: Cannot determine type of "a"
if a is None:
    b = None
else:
    b = a
reveal_type(b)  # N: Revealed type is "Any | None"

[case module_mutual_flow_analysis7]
# flags: --warn-unreachable
import a
reveal_type(a.foo)  # N: Revealed type is "int | None"
[file a.py]
if bool():
    bar = None
else:
    bar = 1
foo = bar
reveal_type(foo)  # N: Revealed type is "int | None"

[case module_mutual_flow_analysis_partial_list]
# flags: --warn-unreachable
import a
reveal_type(a.foo)  # N: Revealed type is "list[int]"
[file a.py]
bar = []
bar.append(1)
foo = bar
reveal_type(foo)  # N: Revealed type is "list[int]"

[case func_call_should_not_narrow_eagerly]
# flags: --warn-unreachable
x: str | int
x = 1
def foo() -> str:
    reveal_type(x)  # N: Revealed type is "str | int"
    return ""

if bool():
    x = foo()
foo()

[case self_access_should_not_narrow_eagerly]
# flags: --warn-unreachable
x: str | int
x = 1
class A:
    def __init__(self) -> None:
        reveal_type(x)  # N: Revealed type is "str | int"
        self.z = 3

if bool():
    A().z
x = ""
A().z

[case access_self_variable_before_definition_no_mypy_compatible]
# flags: --no-mypy-compatible
# This is supported by Mypy (many tests cover it), but we should probably
# suppress this kind of pattern of accessing members before definition.
x: A
x.z  # E: Cannot determine type of "z"
class A:
    def __init__(self) -> None:
        self.z = 3


[case final_with_getitem_in_loop]
# Like testFinalNotInLoops but instead of Final we use Final[int]
from typing import Final

for i in [1, 2, 3]:
    x: Final[int] = i  # E: Cannot use Final inside a loop

while True:
    y: Final[bool] = True  # E: Cannot use Final inside a loop

[case final_reassignment_in_init]
# Like testFinalDelayedDefinition, but not delayed
from typing import Final

class C:
    x: Final[int] = 2  # OK, defined in __init__

    def __init__(self, x: int) -> None:
        self.x = 2  # E: Cannot assign to final attribute "x"

[case self_access_before_assignment1]
class A:
    def __init__(self) -> None:
        self.x = 2

class B(A):
    def __init__(self) -> None:
        super().__init__()
        reveal_type(self.x)  # N: Revealed type is "int"
        self.x = 2

[case self_access_before_assignment2]
class A:
    x: int

class B(A):
    def __init__(self) -> None:
        super().__init__()
        reveal_type(self.x)  # N: Revealed type is "int"
        self.x = 2

[case walrus_with_partial_list]
# flags: --warn-unreachable
# Like testWalrusPartialTypes, but with a bit of additional code as well
from typing import List

def check_partial_list() -> None:
    if (z := []):
        print(1)  # Theoretically this would be unreachable and could be analyzed as such as well.
    else:
        z.append(4)
    reveal_type(z)  # N: Revealed type is "list[int]"

[case sys_version_defined_smaller_than]
import sys
if sys.version_info < (3, 200):
    undefined # E: Name "undefined" is not defined
if sys.version_info > (3, 200):
    undefined
if sys.version_info < (2, 200):
    undefined
if sys.version_info > (2, 200):
    undefined # E: Name "undefined" is not defined
