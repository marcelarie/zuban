[case literal_union_formatting1]
from typing import Literal

a: int
b: str | Literal[1, 2] | float
a = b  # E: Incompatible types in assignment (expression has type "Literal[1, 2] | str | float", variable has type "int")

[case literal_union_formatting2]
from typing import Literal

a: int
b: str | Literal[1, 2] | float
c: str | Literal[1, 2] | float | Literal['x']
d: Literal[1] | Literal['x']

def x(y: int) -> None: ...
x(a)
x(b)  # E: Argument 1 to "x" has incompatible type "Literal[1, 2] | str | float"; expected "int"
x(c)  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 'x'] | str | float"; expected "int"
x(d)  # E: Argument 1 to "x" has incompatible type "Literal[1, 'x']"; expected "int"

[case literal_union_formatting_through_type_vars]
from typing import Literal, TypeVar

T = TypeVar("T")

l: Literal[3]
u: Literal[3] | list[int]

def foo(x: T) -> str | Literal[1, 2] | float | Literal['x'] | T: ...

def x(y: int) -> None: ...
x(foo(l))  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 3] | float | str"; expected "int"
x(foo(u))  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 3] | float | str | list[int]"; expected "int"
