[case literal_union_formatting1]
from typing import Literal

a: int
b: str | Literal[1, 2] | float
a = b  # E: Incompatible types in assignment (expression has type "Literal[1, 2] | str | float", variable has type "int")

[case literal_union_formatting2]
from typing import Literal

a: int
b: str | Literal[1, 2] | float
c: str | Literal[1, 2] | float | Literal['x']
d: Literal[1] | Literal['x']

def x(y: int) -> None: ...
x(a)
x(b)  # E: Argument 1 to "x" has incompatible type "Literal[1, 2] | str | float"; expected "int"
x(c)  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 'x'] | str | float"; expected "int"
x(d)  # E: Argument 1 to "x" has incompatible type "Literal[1, 'x']"; expected "int"

[case literal_union_formatting_through_type_vars]
from typing import Literal, TypeVar

T = TypeVar("T")

l: Literal[3]
u: Literal[3] | list[int]

def foo(x: T) -> str | Literal[1, 2] | float | Literal['x'] | T: ...

def x(y: int) -> None: ...
x(foo(l))  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 3] | float | str"; expected "int"
x(foo(u))  # E: Argument 1 to "x" has incompatible type "Literal[1, 2, 3] | float | str | list[int]"; expected "int"

[case str_literal_assignment]
# Like testLiteralFromTypingWorks, but for strings
from typing import Literal

x: Literal["foo"]
x = "bar"  # E: Incompatible types in assignment (expression has type "Literal['bar']", variable has type "Literal['foo']")

y: Literal["bar"]
y = "bar"

[case avoid_long_literal_test]
x = dict([
    (1, ("00",)),
    (1, ("01",)),
    (1, ("02",)),
    (1, ("03",)),
    (1, ("04",)),
    (1, ("05",)),
    (1, ("06",)),
    (1, ("07",)),
    (1, ("08",)),
    (1, ("09",)),
    (1, ("10",)),
    (1, ("11",)),
    (1, ("12",)),
    (1, ("13",)),
    (1, ("14",)),
    (1, ("15",)),
    (1, ("16",)),
    (1, ("17",)),
    (1, ("18",)),
    (1, ("19",)),
    (1, ("20",)),
    (1, ("21",)),
    (1, ("22",)),
    (1, ("23",)),
    (1, ("24",)),
    (1, ("25",)),
    (1, ("26",)),
    (1, ("27",)),
    (1, ("28",)),
    (1, ("29",)),
    (1, ("30",)),
    (1, ("31",)),
    (1, ("32",)),
    (1, ("33",)),
    (1, ("34",)),
    (1, ("35",)),
    (1, ("36",)),
    (1, ("37",)),
    (1, ("38",)),
    (1, ("39",)),
    (1, ("40",)),
    (1, ("41",)),
    (1, ("42",)),
    (1, ("43",)),
    (1, ("44",)),
    (1, ("45",)),
    (1, ("46",)),
    (1, ("47",)),
    (1, ("48",)),
    (1, ("49",)),
    (1, ("50",)),
    (1, ("51",)),
    (1, ("52",)),
    (1, ("53",)),
    (1, ("54",)),
    (1, ("55",)),
    (1, ("56",)),
    (1, ("57",)),
    (1, ("58",)),
    (1, ("59",)),
    (1, ("60",)),
    (1, ("61",)),
    (1, ("62",)),
    (1, ("63",)),
    (1, ("64",)),
    (1, ("65",)),
    (1, ("66",)),
    (1, ("67",)),
    (1, ("68",)),
    (1, ("69",)),
    (1, ("70",)),
    (1, ("71",)),
    (1, ("72",)),
    (1, ("73",)),
    (1, ("74",)),
    (1, ("75",)),
    (1, ("76",)),
    (1, ("77",)),
    (1, ("78",)),
    (1, ("79",)),
    (1, ("80",)),
    (1, ("81",)),
    (1, ("82",)),
    (1, ("83",)),
    (1, ("84",)),
    (1, ("85",)),
    (1, ("86",)),
    (1, ("87",)),
    (1, ("88",)),
    (1, ("89",)),
    (1, ("90",)),
    (1, ("91",)),
    (1, ("92",)),
    (1, ("93",)),
    (1, ("94",)),
    (1, ("95",)),
    (1, ("96",)),
    (1, ("97",)),
    (1, ("98",)),
    (1, ("99",)),
])
reveal_type(x)
