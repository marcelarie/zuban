# Next up
testBadEnumLoading
testInvalidNamedTupleWithinFunction
testVariadicUnpackWithRegularInstance
testMisguidedSetItem

testTwoUncomfortablyIncompatibleProtocolsWithoutRunningInIssue9771

# mypy upgrade
testMultilineQuotedAnnotation
testDataclassFieldWithPositionalArguments
testCanCreateClassWithFunctionBasedTypedDictBase
testTypeVarTupleInvariant

# 3.12 type var syntax
test695TypeAlias
test695Class
test695Function
test695TypeVar

# super with Type[...]
testSuperWithAny
testSuperInClassMethod
testSuperClassGetItem
testInvalidFirstSuperArg
testWrongSuperOutsideMethodNoCrash
testSuperWithTypeObjects
testSuperWithTypeTypeAsSecondArgument
# "super() outside of a method is not supported"
testSuperOutsideMethodNoCrash
# "super() requires one or more positional arguments in enclosing function"
testSuperInMethodWithNoArguments
# How do we deal with super() and Self or self type vars?
testSuperSelfTypeInstanceMethod
testSuperSelfTypeClassMethod
testTypingSelfOnSuperTypeVarValues
testSelfTypeSuper
testMixinProtocolSuper
# Super in classmethod or __new__
testSuperWithNew
testSuperNew
testMetaclassAndSuper

# Flakey in --release
testReturnInIterator

# Uses function context but is in fact in module context
testFunctionForwardRefAlias
# Remove Mode from inference_state
testSelfTypeRestrictedMethodOverloadInitBadTypeNoCrash
# Class is still set in InferenceState
testAsyncForComprehensionErrors
# TODO ^ also clean up dataclass field calculation

# functools.total_ordering
testTotalOrderingEqLt
testTotalOrderingLambda
testTotalOrderingReturnNotBool
testTotalOrderingAllowsAny
testTotalOrderingWithForwardReference

# Overload class self variable matching (__init__ against __init__)
testUnpackIterableClassWithOverloadedIter
testUnpackIterableClassWithOverloadedIter2
# Overload union math for __init__
overload_union_math_on_class_init_constrained
# union math for None vs. TypeVar
testOverloadDetectsPossibleMatchesWithGenerics
# overload *args should be used if a list of never/any is given?
testOverloadVarargsSelection
# overload Any unclear why Mypy decides like this
testTypeVarTupleOverloadMatch
# overload x should be preferred over an *x alternative
testTupleOverloadZipAny

# Union of empty lists dicts sets with used ones
testUnificationEmptyListLeft
testUnificationEmptyListRight
testUnificationEmptySetLeft
testUnificationEmptyDictLeft
testUnificationEmptyDictRight
testUnificationDictWithEmptyListLeft
testUnificationDictWithEmptyListRight
testOperatorWithEmptyListAndSum
testOrOperationWithGenericOperands
testOrOperationInferredFromContext

# No recursion tests
testNoRecursiveExpandInstanceUnionCrashGeneric
# recursive limits missing for joins / unions
testRecursiveAliasGenericInferenceNested
testRecursiveAliasTopUnion
testCrashInJoinOfSelfRecursiveNamedTuples
testGenericJoinRecursiveTypes
testRecursiveAliasWithRecursiveInstance
testBasicRecursiveGenericNamedTuple
# Recursive Alias wrong type var inference --enable-recursive-aliases
testRecursiveAliasesJoins
# Recursive alias union type var inference --enable-recursive-aliases
testRecursiveAliasWithRecursiveInstanceInference
# Recursive alias class type aliases --enable-recursive-aliases
testRecursiveClassLevelAlias

# Type var finder recursion is not handled, because imports are involved.
testRecursiveAliasImported
# cycle for self.a = self.f(self.a) where f(T) -> T
testGenericTypeBody1
# import cycle
testBoundGenericMethodParamSpecFine
testCyclicUndefinedImportWithName
testCyclicUndefinedImportWithStar1
testCyclicUndefinedImportWithStar2
testCyclicUndefinedImportWithStar3
testNewAnalyzerTypeAnnotationCycle4
testBoundGenericMethodFine
testNewImportCycleTypeVarBound
testNewImportCycleTupleBase
testNewImportCycleTypedDict
# C = C Cycle
testOverrideByIdemAliasCorrectType
testOverrideByIdemAliasCorrectTypeReversed
testConditionalExceptionAlias
testListAssignmentUnequalAmountToUnpack
testSelfReferentialSubscriptExpression
testNewAnalyzerMemberNameMatchesNamedTuple
testVariableTypeWithQualifiedName
testNewAnalyzerMemberNameMatchesTypedDict
# TypedDict definition circle: A = TypedDict('A', {'a': 'A'})
testCrashOnSelfRecursiveTypedDictVar
testBasicRecursiveTypedDictCall
testRecursiveTypedDictWithList
# dataclass circles with bound
testDataclassGenericWithBound
testNoCrashOnSelfWithForwardRefGenericDataclass

# Module attributes
testModuleImplicitAttributes
# class attributes
testImplicitClassScopedNames
# type.__init__ where self is implicitly Any
testTypeEquivalentTypeAnyEdgeCase

# Type var constraints not enforced in type alias
testValidTypeAliasValues
testValidTypeAliasValuesMoreRestrictive

# Tuple type comment definitions with list assignment
testMultipleAssignmentWithListsInInitialization
testAssignmentToStarAnnotation
# star input for tuple
testTupleWithStarExpr
# List literal inference that works like a tuple?
testInferringLvarTypesInNestedListAssignment
testNestedListAssignment
testNestedListAssignmentToTuple
# Tuple a, *li = ta: "List item 0 has incompatible type "A"; expected "int""
testAssignmentToStarFromTupleType

# Special-case type inference of empty collections https://github.com/python/mypy/pull/16122
testInferenceWorksWithEmptyCollectionsUnion
testWideOuterContextEmptyError
testWideOuterContextNoArgsError
testInferenceWorksWithEmptyCollectionsNested
testCallerVarargsAndComplexTypeInference

# WTF why is this base type not object/function?
testListLiteralWithNameOnlyArgsDoesNotEraseNames
# join of {1, *some_str_tuple} leads to int | str???
testUnpackInExpression2-only_when_nocache
# slightly different argument errors
testCallerVarArgsListWithTypeInference
# Self is confused. matcher needs to know Self from both sides.
testOverloadWithDerivedFromAny
testTypingSelfOverrideVarMulti
# Any base class now matches everything for union simplification
testUnionSimplificationSpecialCases2
# EnumMeta does not inherit from ABCMeta anymore: https://github.com/python/typeshed/pull/10577
testStrEnumCreation
testRegression12258
testDerivedEnumIterable
testEnumIterMetaInference
# Callable matching
testSubtypingGenericTypeObject
testParamSpecNoCrashOnUnificationPrefix
# Callable matching positional names ignored, but kwargs is there; mypy wrong?
testProtocolIncompatibilityWithUnionType
# dict questionable decisions
testDictWithStarStarExpr
testDictFromIterableAndStarStarArgs
testDictFromIterableAndStarStarArgs2
# Type variable "C.T" cannot be used as an expression
testClassMemberTypeVarInFunctionBody
# Type variable "__main__.Ts" is invalid as target for type alias
testTypeVarTupleIsNotValidAliasTarget
testGenericTypeAliasesWrongAliases
# Type var used in bound, defined in class body, bound to that class
testGenericClassAlternativeConstructorPreciseOverloaded
# current_class in i_s should probably be a type and not a class
testEnumNameWorkCorrectlyOn311
# current_function in i_s is wrong.
testTypeVarTuplePep646TypeVarStarArgs

# function type vars are not late bound in Mypy in params
testTypeVarTupleParamSpecInteraction
testParamSpecSubtypeChecking2
testParamSpecNestedApplyPosVsNamed
# Callable remapping over overload leads to a mapped overload (this is special cased for only one arg and decorator like behavior, see also is_generic_decorator_overload_call)
testRegularGenericDecoratorOverload
testParamSpecDecoratorOverload
# Weird class type vars passing
testDefaultDict
# list element context inference should probably ignore type vars
testInferenceAgainstGenericCallableGenericNonLinear
# type var backtracking
testGenericFunctionSubtypingWithUnions
testUnionInference
testCrashOnComplexCheckWithNamedTupleNext
unite_type_vars_mypy_issue_5874
multiple_lambda_mypy_issue_4226
# type var backtracking for overloads if variant does not match
testMatchProtocolAgainstOverloadWithAmbiguity

# lambda infer callable after type params after it.
testParamSpecInferredFromLambda
# lambda --new-type-inference
testInferenceAgainstGenericLambdas
testGenericLambdaGenericMethodNoCrash
# lambda context recursion
testRejectCovariantArgumentInLambda
# i_s missing current class
testLambdaDeferredSpecialCase
testLambdaDeferredCrash
# "Duplicate argument "x" in function definition"
testFastParserDuplicateNames
# Lambda inferred like (lambda x: x)(1)
testInferLambdaTypeUsingContext
# Generator in lambda
testNoCrashOnLambdaGenerator

# better meet/join
testJoinProtocolCallback
testMeetOfIncompatibleProtocols
testMeetProtocolCallback

# Nested type vars
testFunctionInGenericInnerClassTypeVariable-skip
testParamSpecTestPropAccess
testTupleAndDictOperationsOnParamSpecArgsAndKwargs
testUnpackingParamsSpecArgsAndKwargs
testParamSpecConcatenateFromPep
testNestedGenericFunctionTypeApplication
testIncrementalInnerClassAttrInMethodReveal
param_spec_with_identity_mypy_issue_12278

# Param spec invalid definitions
testInvalidParamSpecDefinitionsWithArgsKwargs
testInvalidParamSpecAndConcatenateDefinitionsWithArgsKwargs
testUnboundParamSpec
testParamSpecArgsAndKwargsMissmatch
# Param spec invalid calls
testParamSpecInvalidCalls
# ParamSpec is not unbound if working like a T in Callable?
testTrivialParametersHandledCorrectly
# Class function Foo.bar something like a BoundFunction
testParamSpecConstraintOnOtherParamSpec
testExpandNonBareParamSpecAgainstCallable
# param spec new tests
testParamSpecClassConstructor
testParamSpecAliasInvalidLocations
testParamSpecAliasNested
testParamSpecArgumentParamInferenceRegular
testParamSpecApplyPosVsNamedOptional
testParamSpecConcatenateSelfType
testParamSpecCorrectParameterNameInference
testOverloadingWithParamSpec
testParamSpecGenericWithNamedArg1
testParamSpecGenericWithNamedArg2

# Are generics in self types always bound to the function?
# https://github.com/python/typing/discussions/1340
# https://github.com/python/mypy/issues/14729
testSelfTypeRestrictedMethodOverloadInit
# Self tests
testTypingSelfAttrOldVsNewStyle
testSelfTypeOnGenericClassObjectNewStyleBound
testVariadicClassNewStyleSelf
# "Method cannot have explicit self annotation and Self type"
testTypingSelfConflict
# "Self argument missing for a non-static method"
# "The erased type of self "None" is not a supertype of its class "__main__.A""
testSelfTypeNotSelfType
# Self in bound method shouldn't probably be there
testFunctionAssignedAsCallback
testErrorSettingCallbackWithDifferentFutureType

# NewType in function "A@6" as qualified name
testNewTypeInLocalScope
# class in class forward reference
testForwardReferenceToNestedClassWithinClass
testClassWithBaseClassWithinClass
testDeclarationReferenceToNestedClass
testNewAnalyzerNamedTupleCallNested
testNewAnalyzerNamedTupleCallNestedMethod
# class in function forward reference / type comment
testGenericClassWithinFunction
testGenericClassWithInvalidTypevarUseWithinFunction
testClassWithinFunction
testDeclareVariableWithNestedClassType
# function types in class body
testMethodRefInClassBody
testRefMethodWithDecorator
# Class argument and __init__ as overloaded DbType
testOverloadedToGeneric

# name binding of type definitions within function/class scopes
testSerializeNamedTupleInMethod4
testForwardBoundFunctionScopeWorks
testIncrementalNestedTypeAlias
testNewAnalyzerAnnotationConflictsWithAttributeSinglePass
testNewAnalyzerAnnotationConflictsWithAttributeTwoPasses
testNewAnalyzerNameConflictsAndMultiLineDefinition

# object.__new__(cls) -> Self where object.__new__(int) leads to Never
testOverride__new__AndCallObject

# Self type classmethod access with type vars(no Self)
testSelfTypeClone
testNewAnalyzerTypeVarBoundInCycle
testSelfTypeVarIndexExpr
testSelfTypesWithParamSpecInfer
# classmethod self param in overload is not a self param
testOverloadClassMethodImplementation
# Recursion error wtf?
testRefMethodWithOverloadDecorator
# classmethod self type with overload
testSelfTypeClassMethodOverloadedOnInstance
SelfTypeOverloadedClassMethod
# "staticmethod" used with a non-method"
testStaticmethodAndNonMethod
# "classmethod" used with a non-method"
testClassmethodAndNonMethod
# "override" used with a non-method"
invalidExplicitOverride
# Error for staticmethod: "Overloaded function implementation does not accept all possible arguments of signature 1"
testOverloadWithSwappedDecorators2
# "Static methods cannot use Self type"
testTypingSelfClassMethod

# "The erased type of self "Type[__main__.A]" is not a supertype of its class "Type[__main__.B]""
testSelfTypeNonsensical
testSelfTypeNew
testSelfTypeNew_explicit

# dataclasses __slots__
testDataclassWithSlotsArg
# dataclass classmethod
testDataclassesClassmethods
testClassmethodShadowingFieldDoesNotCrash
testDeferredDataclassInitSignature
# InitVar set default
testDataclassInitVarCannotBeSet
# dataclass transform
updateDataclassTransformParameterViaDecorator
updateDataclassTransformParameterViaParentClass
updateBaseClassToUseDataclassTransform
frozenInheritanceViaDefault
testDataclassReplaceOptional

# int | str leads to object instead of Any when using Enum().value?
testEnumValueInhomogenous
# All members in a union lead to the enum again
testEnumTypeCompatibleWithLiteralUnion
# Enum Dict value inferred is int instead of Literal[1]
testFunctionalEnumListOfPairs
# enum member gathering
testFinalWithMethodAssignment
# Enum access merging leads to int | Any instead of Any
testEnumValueUnionSimplification
# Generic Enums
testGenericEnum
# "Cannot assign to final attribute "gold""
testEnumFinalValues
testEnumFinalSpecialProps
# "Cannot override writable attribute "x" with a final one"
testEnumNotFinalWithMethodsAndUninitializedValues
testEnumAreStillFinalAfterCache

# "Enum type as attribute is not supported"
testAssignEnumAsAttribute
# "TypedDict type as attribute is not supported"
testAssignTypedDictAsAttribute

# Recursive definitions
testRecursiveNamedTupleTypedDict
# Unpack
testUnpackKwargsInference
testUnpackKwargsParamSpec
# dict unpacking
testTypedDictUnpackFromUnion
testTypedDictUnpackUnionRequiredMissing
testTypedDictUnpackIncompatible
# Lookups
testTypedDictMappingMethods
testTypedDictAsStarStarArgCalleeKwargs
testTypedDictAsStarStarAndDictAsStarStar
testTypedDictNonMappingMethods
# Nested typed dict formatting
testSerializeTypedDictInMethod
# --extra-checks
testTypedDictUnpackStrictMode
testTypedDictStrictUpdate
testTypedDictFlexibleUpdateUnionStrict
testParamSpecConcatenateNamedArgs
testParamSpecPrefixSubtypingInvalidStrict
# unions
testTypedDictChainedGetWithEmptyDictDefault
# "Type of TypedDict is ambiguous, none of ("A", "B") matches cleanly"
testUnionOfEquivalentTypedDictsDistinct
testUnionOfEquivalentTypedDictsNested
testTypedDictUnionAmbiguousCaseNoMatch
# slightly different TypedDict.get signature than in mypy Is this relevant?
testTypedDictGetMethodInvalidArgs
# TypedDict |
testTypedDictWith__or__method
testTypedDictWith__or__method_error
testTypedDictWith__ror__method
testTypedDictWith__ior__method

# typing.no_type_check
testNoTypeCheckDecoratorOnMethod1
testNoTypeCheckDecoratorOnMethod2
testCallingNoTypeCheckFunction
testCallingNoTypeCheckFunction2
testNoTypeCheckDecoratorSemanticError

# Protocol NamedTuple field issues
testTypingNamedTupleAttributesAreReadOnly
testNamedTupleWithNoArgsCallableField
testVariadicNamedTuple
# Protocol Self binding
testSelfTypesWithProtocolsBehaveAsWithNominal
testInferenceViaTypeTypeMetaclass
testSelfTypeProtocolClassmethodMatch
# Protocol Self binding recursion error
testRecursiveSelfTypeCallMethodNoCrash
# TypeVar in Protocol Body
testTypeVarInProtocolBody
# "Type aliases are prohibited in protocol bodies"
testTypeAliasInProtocolBody
# small protocol formatting issues
testParamSpecPrefixSubtypingProtocolInvalid
# Protocols mypy might be wrong?
testMutuallyRecursiveProtocolsTypesWithSubteMismatchWriteable
# typing_extensions.runtime_checkable
testProtocolAndRuntimeAreDefinedAlsoInTypingExtensions
testOverloadOnProtocol
testSimpleRuntimeProtocolCheck

# Unpack fixed length TypeVarTuple
testTypeVarTuplePep646TypeVarStarArgsFixedLengthTuple
testTypeVarTupleNewSyntaxCallables
# subtyping arbitrary length unpacks
testVariadicTupleSubtyping
# TypeVarTuple kind of works correctly, but mypy checks args first before callables
testTypeVarTuplePep646Callable
testTypeVarTuplePep646CallableStarArgs
testVariadicTupleInProtocol

# import order
testTypeAliasesToNamedTuple
# future imports (future is not part of stubs)
testNewAnalyzerMetaclassFuture1
testNewAnalyzerMetaclassFuture3
testNewAnalyzerMetaclassFuture4
testFutureMetaclass
testFromFutureMetaclass
testFutureMetaclassImportFrom
testFutureMetaclassImport
testFutureMetaclassAndBase
testFutureMetaclassGenerics
testFutureMetaclassErrors
testFutureMetaclassAny
# "Library stubs not installed for "requests""
testLibraryStubsNotInstalled
testIgnoreImportIfNoPython3StubAvailable
testNoPython3StubAvailable
# six imports
testNewAnalyzerMetaclassSix1
testNewAnalyzerMetaclassSix2
testNewAnalyzerMetaclassSix3
testNewAnalyzerMetaclassSix4
testSixMetaclassImportFrom
testSixMetaclassImport
testSixMetaclassAndBase
testSixMetaclassGenerics
testSixMetaclassErrors
testSixMetaclassAny
testSixMetaclass
testFromSixMetaclass
testSixMetaclassGenericBase
testIgnoreInsideClassDoesntAffectWhole
# import of typeshed stubs
testErrorFromGoogleCloud

# ctypes
testCtypesArrayStandardElementType
testCtypesArrayCustomElementType
testCtypesArrayUnionElementType
testCtypesCharArrayAttrs
testCtypesWcharArrayAttrs
testCtypesCharUnionArrayAttrs
testCtypesAnyUnionArrayAttrs
testCtypesOtherUnionArrayAttrs
testCtypesOtherArrayAttrs

# singledispatch
testIncorrectDispatchArgumentWhenDoesntMatchFallback
testCheckNonDispatchArgumentsWithTypeAlwaysTheSame
testImplementationHasSameDispatchTypeAsFallback-xfail
testRegisterHasDifferentTypeThanTypeSignature-xfail
testTypePassedAsArgumentToRegister
testCustomClassPassedAsTypeToRegister
testOnePartOfUnionDoesNotHaveCorrespondingImplementation
testIncorrectArgumentsInSingledispatchFunctionDefinition
testDispatchTypeIsNotASubtypeOfFallbackFirstArgument
testAnyInConstructorArgsWithClassPassedToRegister
testIncorrectArgumentTypeWhenCallingRegisteredImplDirectly
testDontCrashWhenRegisteringAfterError

# Override import cached files like typing types builtins etc.
testNoCrashDoubleReexportFunctionEmpty
testNoCrashDoubleReexportBaseEmpty
testNoCrashDoubleReexportMetaEmpty
testNoCrashDoubleReexportTupleEmpty
testNoCrashDoubleReexportOverloadEmpty
testNoCrashDoubleReexportTypedDictEmpty

# Module __all__
testNewAnalyzerExportedValuesInImportAll
testExportedValuesInImportAll
testAllMustBeSequenceStr
testUnderscoreExportedValuesInImportAll
testReExportAllInStub

# Module <M> has no attribute <missing_name>
testRelativeImportFromSameModule
testImportFromSameModule
# Module <M> has no attribute <missing_name>; maybe <name>
testNewAnalyzerTypeAnnotationCycle3
testModuleAttributeTwoSuggestions
testModuleAttributeThreeSuggestions
testImportMisspellingSingleCandidate
testImportMisspellingMultipleCandidates
testImportMisspellingMultipleCandidatesTruncated
testColumnHasNoAttribute
testErrorCodeNoAttribute
testDequeWrongCase
# "C" has no attribute "__aenter__"; maybe "__enter__"?
testAsyncWithError

# Unexpected keyword argument "otter" for "f"; did you mean "other"?
testMultipleKeywordsForMisspelling
testKeywordMisspelling*
# "TypedDict "XXX" has no key "xxx" note: Did you mean "type"?"
testCannotGetItemOfTypedDictWithInvalidStringLiteralKey

# Import submodules
testNewAnalyzerImportStarSpecialCase
# import a.b.c issues
testMissingSubmoduleImportedWithIgnoreMissingImportsStub
testMissingSubmoduleOfInstalledStubPackage
testAddedMissingStubsIgnorePackagePartial
testGenericAliasCollectionsABCReveal
# import a.b type: ignore
testFineAddedMissingStubsIgnorePackagePartial
# imports have different error codes, see https://github.com/python/mypy/commit/78339b97dc911c8c6841184eaddbbc30d0e406da
testErrorCodeMissingModule
# Complex Star import
testImportWithinMethod
testNoCrashOnImportFromStarNested
testSerializeStarImport
testImportStarWithinFunction
# Star import override
testAssignToFuncDefViaImport
# Import itself / Extremely weird import orders
testNewAnalyzerImportCycleWithIgnoreMissingImports
testNewAnalyzerImportFromTopLevelFunction
testNewAnalyzerImportFromTopLevelAlias
testNewAnalyzerImportAmbiguousWithTopLevelFunction
testImportCycleSpecialCase
testPackagePath
testIncrementalNestedBrokenCascade

# Module type does not contain module info
testMultiModuleAlias
testModuleAliasWithExplicitAnnotation

# Stub Reexport
testNoReExportFromStubs
testNoReExportFromStubsMemberType
testNoReExportFromStubsMemberVar
testNoReExportChildStubs
testReExportChildStubs
testReExportChildStubs2
testNoReExportNestedStub
testNoReExportFromMissingStubs
testMissingGenericImport
testStubFixupIssues
testNoReExportUnrelatedModule
testNoReExportUnrelatedSiblingPrefix
testUnimportedHintAny
testUnimportedHintAnyLower
testFromImportAsInStub
testImportAsInStub
testReExportChildStubs3
testNewSemanticAnalyzerModulePrivateRefInMiddleOfQualified
# underscore names are not exported in an import with stubs
testInternalBuiltinDefinition
# --no-implicit-reexport
testNoImplicitReexport
testNoImplicitReexportRespectsAll
testNoImplicitReexportGetAttr
textNoImplicitReexportSuggestions

# Metaclass descriptor
metaclass_descriptor
# Metaclass Union
testNotSimplifyingUnionWithMetaclass
# Metaclass iter/getitem/addition
testInferringLvarTypesUnpackedFromIterableClassObjectWithGenericIter
testIterableProtocolOnMetaclass
# Metaclass instance vs. class members
testMetaclassConflictingInstanceVars
testInferenceOfDunderDictOnClassObjects

# Use type(foo) when foo has a metaclass
testMetaclassTypeCallable
testMetaclassMemberAccessViaType
# Foo = type(...) used as `x: Foo` (type execution)
testNoneAlias
testNoneAliasStrict

# "Invalid assignment target"
testSuperWithReadWriteAbstractProperty
testAssignToBaseClassMethod
# "Call to abstract method "meth" of "Proto" with trivial body via super() is unsafe"
testEmptyBodyUnsafeAbstractSuper
testEmptyBodyUnsafeAbstractSuperOverloads
testEmptyBodyUnsafeAbstractSuperProperty
testErrorCodeUnsafeSuper_no_empty
testAbstractBodyTurnsEmpty
testAbstractBodyTurnsEmptyProtocol
testAbstractBodyTurnsEmptyCoarse
# ""abstractmethod" used with a non-method"
testAbstractNestedFunction
testAbstractGlobalFunction
# "Class a.B has abstract attributes "f""
# "If it is meant to be abstract, add 'abc.ABCMeta' as an explicit metaclass"
testAbstractClasses
# "Only concrete class can be given where "Type[C]" is expected"
testDedicatedErrorCodeTypeAbstract
testAbstractTypeInADict
# "Can only assign concrete classes to a variable of type "Type[A]""
testInstantiationAbstractsInTypeForVariables
testInstantiationProtocolInTypeForVariables
# "Overloaded method has both abstract and non-abstract variants"
testOverloadedAbstractMethodVariantMissingDecorator0
testOverloadedAbstractMethodVariantMissingDecorator1
# class: "Cannot instantiate abstract class "C" with abstract attribute "f""
testInstantiatingAbstractClass
testInstantiatingClassWithInheritedAbstractMethod
testInstantiationAbstractsInTypeForFunctions
testInstantiationAbstractsInTypeForAliases
testOverloadedAbstractMethod
testOverloadedAbstractMethodWithAlternativeDecoratorOrder
testInstantiateClassWithReadOnlyAbstractProperty
testInstantiateClassWithReadWriteAbstractProperty
testNestedAbstractClass
testAbstractNewTypeAllowed
testSubclassOfABCFromDictionary
testAbstractPropertiesAllowed
testInstantiatingAbstractClassWithMultipleBaseClasses
# Cannot instantiate abstract class "A" with abstract attributes "a", "b", ... and "j" (7 methods suppressed)
testInstantiatingClassWithInheritedAbstractMethodAndSuppression
# Same but not from check-abstract.test
testAddAbstractMethod
testMakeClassAbstract
testAbstractInit
testErrorCodeInstantiateAbstract
testNewAnalyzerClassPropertiesInAllScopes
testSerializeAbstractClass
# protocol: "Cannot instantiate abstract class "C" with abstract attribute "x""
testNonProtocolToProtocol
testCannotInstantiateAbstractMethodExplicitProtocolSubtypes
testCannotInstantiateAbstractVariableExplicitProtocolSubtypes
testCannotInstantiateProtocolWithOverloadedUnimplementedMethod
testEmptyBodyImplicitlyAbstractProtocol
testEmptyBodyImplicitlyAbstractProtocolProperty
testEmptyBodyImplicitlyAbstractProtocolStub
testEmptyBodyVariationsImplicitlyAbstractProtocol
testEmptyBodyNoneCompatibleProtocol
testEmptyBodyWithFinal

# "Invalid self argument "A[C]" to attribute function "f" with type "Callable[[A[B]], None]""
testInvalidMethodAsDataAttributeInGenericClass
# "Attribute function "f" with type "Callable[[], None]" does not accept self argument"
testMethodWithInvalidMethodAsDataAttribute
testClassValuedAttributesBasics
no_self

# ClassVar
testOverrideOnSelf
testOverrideOnSelfInSubclass
testMetaclassStrictSupertypeOfTypeWithClassmethods
testClassVarsInProtocols
# "ClassVar protocol member P.foo can never be matched by a class object"
testProtocolClassObjectClassVarRejected
# x = 1  # type: ClassVar
testClassVarWithoutArguments
testIncrementalClassVar

# "Maybe you forgot to use "await"?"
testErrorOneLessFutureInReturnType
testAwaitMissingNote
testAsyncForErrorNote

# None as a default for class variables, even if not optional?
testNoneClassVariableInInit
testMultipleAssignmentNoneClassVariableInInit

# supertype context inference
testUseSupertypeAsInferenceContext
testUseSupertypeAsInferenceContextInvalidType
testUseSupertypeAsInferenceContextPartial
testUseSupertypeAsInferenceContextPartialError
testUseSupertypeAsInferenceContextPartialErrorProperty
testUseSupertypeAsInferenceContextConflict
testLiteralSubtypeContext
testLiteralSubtypeContextNested
testLiteralSubtypeContextGeneric
testSetDescriptorOnClass
testListObject
testInheritanceFromGenericWithImplicitDynamic
testVariableTypeVarList
testInWithInvalidArgs
testClassOrderOfError
# subclass preferred over class for types
testAddBaseClassAttributeCausingErrorInSubclass
# Issues with overrides, because of self definitions 
testVariableSubclassAssignment
testClassOneErrorPerLine
testAttributeDefOrder1
testAttributeDefOrder2
testChangeBaseClassAttributeType

# More information needed
# "Read-only property cannot override read-write property"
testDataclassIncompatibleOverrides
testMixinTypedPropertyReversed
# "Property "x" defined in "Base" is read-only"
testNewNamedTupleMethodInheritance
testCantImplementAbstractPropertyViaInstanceVariable
# @override  "Method "g" is marked as an override, but no base method was found with this name"
explicitOverrideOverloads
explicitOverrideNotOnOverloadsImplementation
# Self definitions different from parent
testSelfTypeOverrideCompatibility
testSelfTypeOverrideCompatibilityGeneric
# "Cannot assign to a method" should not error
testDataclassCallableFieldAssignment
testDataclassesCallableFrozen
# "Covariant override of a mutable attribute (base class "C" defined the type as "float", expressi on has type "int")  [mutable-override]"
testCovariantMutableOverride
# "Signature of "???" incompatible with supertype "???""
# __hash__ None overrides
testOverrideAttributeWithMethod
# Inheritance multiple issues?
testOverrideClassVarManyBases
testOverrideIncompatibleWithMultipleSupertypes
testSubclassingGenericABCWithDeepHierarchy
testSubclassingGenericABCWithDeepHierarchy2
testOverridingMethodAcrossHierarchy
testMultipleInheritance_MethodDefinitionsIncompatibleOverride
testClassIgnoreType_RedefinedAttributeAndGrandparentAttributeTypesNotIgnored
testMultipleInheritance_NestedVariableOverriddenWithIncompatibleType1
testGenericMultipleOverrideReplace
# "This violates the Liskov substitution principle"
testIntroducingInplaceOperatorInSubclass
# Namedtuple bad overwrite of count etc
testNewNamedTupleIllegalNames
testNamedTupleFallback
testNamedTupleIncompatibleRedefinition

# verify class definitions when setting self.foo
testInferAttributeTypeAndAssignInInit
testTypingSelfInternalSafe
testTypingSelfClashInBodies

# Dynamic functions are ignored in classes and the super class is used?
testInferringTypesFromIterable
testMultipleAssignmentAndGenericSubtyping

# __init_subclass__
testOverride__init_subclass__WithDifferentSignature
testInitSubclassWrongType
testInitSubclassTooFewArgs
testInitSubclassTooFewArgs2
testInitSubclassWithImports
testInitSubclassUnannotated
testTooManyArgsForObject
testNoClassKeywordsForNamedTuple
testTypedDictWithClassLevelKeywords

# __setattr__ and __getattr__
testGetattrAndSetattr

# "Accessing "__init__" on an instance is unsound, since instance.__init__ could be from an incompatible subclass"
testAccessingInit
# Decorated constructors
testDecoratedConstructors
# "Unsupported decorated constructor type"
testDecoratedConstructorsBad

# "Cannot assign to a type"
testAssignToNestedClassViaClass

# Unsupported class scoped import
testClassScopeImports
testClassScopeImportModule
testClassScopeImportAlias
testClassScopeImportModuleStar
testClassScopeImportFunctionNested
testClassScopeImportUndefined
testClassScopeImportWithFollowImports
testClassScopeImportVarious
testClassScopeImportWithError
testClassScopeImportWithWrapperAndError
testImportInClassBody
testOverrideByBadVarClass
testOverrideByBadVarClassAlias
testIncrementalSilentImportsAndImportsInClass
testImportStarAddMissingDependencyWithinClass

# List/Set/Dict/Tuple Inferring type of variable when initialized to an empty collection
testInferListInitialized*
testInferSetInitializedToEmpty
testInferSetInitializedToEmptyUsingDiscard
testInferSetInitializedToEmptyUsingUpdate
testInferDictInitialized*
testSpecialCaseEmptyListInitialization
testSpecialCaseEmptyListInitialization2
testInferListInitializedToEmptyAndAssigned
testInferOrderedDictInitializedToEmpty
testEmptyCollectionAssignedToVariableTwiceIncremental
testEmptyCollectionAssignedToVariableTwiceNoReadIncremental
testInferAttributeInitializedToEmpty*
testInferAttributeInitializedToNoneAndAssigned
testInferAttributeInitializedToNoneAndAssignedOtherMethod
testInferAttributeInitializedToNoneAndAssignedClassBody
testInferFromEmptyDictWhenUsingIn
testInferFromEmptyDictWhenUsingInSpecialCase
testInferListTypeFromInplaceAdd
testInferSetTypeFromInplaceOr
testConditionalExpressionWithEmptyListAndUnionWithAny
testConditionalExpressionWithEmptyIteableAndUnionWithAny
testLiteralFinalErasureInMutableDatastructures2
testInferNonOptionalListType
testInferNonOptionalDictType

# OrderedDict = _Alias()
testTypingExtensionsOrderedDictAlias

# TypeVar Values in func
testErrorCodeInvalidTypeArg
testCheckGenericFunctionBodyWithTypeVarValues
testCheckGenericFunctionBodyWithTypeVarValues2
testTypeInferenceAndTypeVarValues
testTypeDeclaredBasedOnTypeVarWithValues
testTypeVarValuesAndNestedCalls
testGenericTypeWithTypevarValuesAndTypevarArgument
testGenericTypeBodyWithTypevarValues
testAttributeInGenericTypeWithTypevarValues*
testMultipleClassTypevarsWithValues1
testGenericFunctionWithNormalAndRestrictedTypevar
testDefineAttributeInGenericMethodUsingTypeVarWithValues
testTypevarValuesSpecialCase1
testGenericTypeAliasesTypeVarConstraints
testWideOuterContextValuesOverlapping
testTypevarValuesWithOverloadedFunctionSpecialCase
testReferenceToDecoratedFunctionAndTypeVarValues
testLiteralAndGenericsRespectsValueRestriction
testTypeVarValuesFunction
testTypeVarValuesMethod1
testTypeVarValuesMethod2
testTypingSelfWithValuesExpansion
testOverloadingInferUnionReturnWithTypevarsAndValueRestrictions
testColumnFunctionWithTypeVarValues
testSuperWithTypeVarValues1
testSuperWithTypeVarValues2
testInnerFunctionWithTypevarValues
testInnerFunctionMutualRecursionWithTypevarValues
testNestedDecoratedCoroutineAndTypeVarValues
testAnyStr
testTypeVarWithTypedDictValueInIndexExpression
testReverseOperatorTypeVar2b
testIsinstanceAndTypeVarValues*
testIsinstanceWithUserDefinedTypeAndTypeVarValues
testIsinstanceWithUserDefinedTypeAndTypeVarValues
testIsinstanceWithUserDefinedTypeAndTypeVarValues2
testTypeCheckOverloadImplementationTypeVarWithValueRestriction

# - Overload does not consistently use the "@classmethod" decorator on all function signatures
# - Overload does not consistently use the "@staticmethod" decorator on all function signatures
testOverloadWithInconsistentStaticMethods
# - Condition cannot be inferred, unable to merge overloads
testOverloadIf*
# Overloads are detected in name binder (imports can not be there)
testVeryBrokenOverload
testVeryBrokenOverload2
# - The implementation for an overloaded function must come last
testInconsistentOverload
testInconsistentOverload2
# Non consecutive overloads
testNonconsecutiveOverloads
testNonconsecutiveOverloadsMissingFirstOverload
testNonconsecutiveOverloadsMissingLaterOverload
# Overload needs type var matcher probably (and maybe also overlapping)
overload_class_type_var_implementation_match_and_mismatch

# @final
testFinalAddFinalMethodOverrideFine
testFinalAddFinalMethodOverrideWithVarFine
testFinalAddFinalMethodOverrideOverloadFine
testFinalAddFinalPropertyWithVarFine
testFinalBodyReprocessedAndStillFinal
testFinalBodyReprocessedAndStillFinalOverloaded-only_when_cache
testFinalBodyReprocessedAndStillFinalOverloaded2-only_when_nocache
testTypingSelfAllowAliasUseInFinalClasses
testFinalClassWithAbstractAttributes
testFinalClassWithoutABCMeta
testFinalClassInheritedAbstractAttributes
testEnumExplicitlyAndImplicitlyFinal
testCannotSubclassFinalTypedDict
testCannotSubclassFinalTypedDictWithForwardDeclarations
testFinalDefiningProperty
# @final + abc abstract class
testFinalClassWithAbstractMethod
testFinalDefiningFuncWithAbstractMethod
# @final issues
testFinalDefiningFunc
testFinalDefiningFuncOverloaded
testFinalDefiningMethOverloaded
testFinalDefiningMethOverloadedStubs
# "Protocol member cannot be final"
testFinalNotInProtocol
# Final: "Cannot assign to final name "x""
testNewAnalyzerFinalReassignModuleReexport
testNewAnalyzerFinalOverrideInSubclass
testFinalAddFinalVarAssignFine
testFinalAddFinalVarOverrideFine
testNewAnalyzerFinalReassignModuleVar
testLiteralFinalMismatchCausesError
testFinalAddFinalVarAssign
testFinalAddFinalVarOverride
testFinalDelayedDefinition
testFinalDelayedDefinitionOtherMethod
testFinalReassignModuleVar
testFinalReassignModuleVar2
testFinalReassignModuleVar3
testFinalReassignModuleReexport
testFinalReassignFuncScope
testFinalReassignModuleVarExternal
testFinalReassignInstanceVarClassBody
testFinalReassignInstanceVarInit
testFinalReassignInstanceVarClassVsInit
testFinalReassignInstanceVarMethod
testFinalReassignInstanceVarExternalClass
testFinalReassignInstanceVarExternalInstance
testFinalWorksWithComplexTargets
testFinalInplaceAssign
testFinalCanUseTypingExtensions
testFinalCanUseTypingExtensionsAliased
testFinalDefiningNoRhsSubclass
# Overrides
testFinalOverridingVarClassBody
testFinalOverridingVarClassBodyExplicit
testFinalOverridingVarInit
testFinalOverridingVarInit2
testFinalOverridingVarOtherMethod
testFinalOverridingVarMultipleInheritanceClass
testFinalOverridingVarMultipleInheritanceInit
testFinalOverridingVarMultipleInheritanceMixed
testFinalOverridingVarWithMethod
testFinalOverridingVarWithMethodClass
testFinalOverridingMethodRegular
testFinalOverridingMethodInitNew
testFinalOverridingMethodWithVar
testFinalOverridingMethodWithVarImplicit
testFinalOverridingMethodMultipleInheritance
testFinalOverridingMethodMultipleInheritanceVar
testFinalOverridingClassMethod
testFinalOverridingStaticMethod
testFinalOverridingProperty
testFinalOverridingMethodOverloads
testFinalCantOverrideWriteable
# Final: "Cannot override final attribute "meth" (previously declared in base class "C")"
testFinalAddFinalMethodOverride
# : Final in dataclasses
testFinalInDataclass
# Final literal issues
testEnumCreatedFromFinalValue
# "Cannot inherit from final class "bool""
testFinalClassNoInheritance
testFinalClassNoInheritanceMulti
testCannotExtendBoolUnlessIgnored
# "Cannot access final instance attribute "x" on class object"
testFinalDefiningTypevarsImplicit
# Final "Protocol member PPS.attr expected settable variable, got read-only attribute"
testFinalAttributeProtocol
testModuleAsProtocolImplementationFinal
# Final issues
testFinalMultiassignAllowed
testFinalDefiningNotInOtherMethod
testFinalDefiningOnlyOnSelf
testFinalNotInLoops
testFinalInDeferredMethod
# "Unexpected type declaration"
testFinalInvalidDefinitions

# callable()
testFineGrainedCallable
testSerializeDummyType

# Except Foo as bar where bar is bound over its existence as a variable
testTryStarMultiple
testExceptWithAnyTypes
testExceptionVariableReuseInDeferredNode1
testExceptionVariableReuseInDeferredNode2
testExceptionVariableReuseInDeferredNode3
# with scoping is special
testWithStmtScopeBasics
testWithStmtScopeNestedWith1
testWithStmtScopeNestedWith2
testWithStmtScopeInnerAndOuterScopes
testWithStmtScopeMultipleContextManagers
testWithStmtScopeMultipleAssignment
testWithStmtScopeComplexAssignments
testWithStmtScopeAndClass
testWithStmtScopeAndLambda

# new isinstance tests
testIsinstanceNestedTuple
testAssignmentSubtypes
testIsinstanceFancyConditionals
testSubtypingWithAny
testUnionIfZigzag
testComplicatedBlocks
testUnionListIsinstance
testIsInstanceIndexing
testIsInstanceSubClassMember
testIsInstanceSubClassReset
testMemberAssignmentChanges
testIsInstanceSubClassMemberHard
testIsInstanceThreeUnion2
testIsInstanceThreeUnion3
testRemovingTypeRepeatedly
testReturnAndFlow
testUnreachableCode
testUnreachableCode2
testUnreachableWhileTrue
testUnreachableAssertFalse
testUnreachableAssertFalse2
testUnreachableReturnOrAssertFalse
testUnreachableTryReturnExceptRaise
testUnreachableReturnLambda
testIsinstanceShortcircuit
testIsinstanceExpression
testIsinstanceMultiAnd
testIsinstanceMultiAndSpecialCase
testIsinstanceOfNonoverlapping
testComprehensionIsInstance
testIsinstanceAndOr
testIsInstanceWithUnknownType
testIsInstanceWithBoundedType
testIsInstanceWithEmtpy2ndArg
testIsInstanceWithTypeObject
testIssubclassUnreachable
testIssubclasDestructuringUnions1
testIssubclasDestructuringUnions2
testIssubclasDestructuringUnions3
testIssubclass
testIssubclassDeepHierarchy
testIssubclassTuple
testIssubclassBuiltins
testIsinstanceTypeArgs
testIssubclassWithMetaclasses
testIssubclassWithMetaclassesStrictOptional
testIsinstanceVariableSubstitution
testIsinstanceNarrowAny
testNarrowTypeAfterInList
testNarrowTypeAfterInListNested
testNarrowTypeAfterInTuple
testNarrowTypeAfterInNamedTuple
testNarrowTypeAfterInDict
testNarrowTypeAfterInSet
testNarrowTypeAfterInTypedDict
testIsinstanceWidensWithAnyArg
testIsinstanceWidensUnionWithAnyArg
testIsinstanceIgnoredImport
testIsinstanceIgnoredImportDualAny
testIsInstanceInitialNoneCheckSkipsImpossibleCasesNoStrictOptional
testIsInstanceInitialNoneCheckSkipsImpossibleCasesInNoStrictOptional
testNoneCheckDoesNotNarrowWhenUsingTypeVars
testNoneCheckDoesNotNarrowWhenUsingTypeVarsNoStrictOptional
testNoneAndGenericTypesOverlapNoStrictOptional
testIsInstanceWithWrongStarExpression
testNarrowInElseCaseIfFinal
testNarrowInIfCaseIfFinalUsingIsNot
# isinstance error conditions
testLiteralErrorsWithIsInstanceAndIsSubclass
# isinstance narrowing
testIsinstanceAndGenericType
testIntersectionUsingPromotion2
testIntersectionUsingPromotion4
testIntersectionUsingPromotion5
testIntersectionUsingPromotion6
testIntersectionUsingPromotion8
testTypeshedRecursiveTypesExample
testTypedDictIsInstance
testParamSpecLiteralJoin
# isinstance Intersection types
testIsInstanceAdHocIntersectionBasic
testIsInstanceAdHocIntersectionRepeatedChecks
testIsInstanceAdHocIntersectionIncompatibleClasses
testIsInstanceAdHocIntersectionReversed
testIsInstanceAdHocIntersectionGenerics
testIsInstanceAdHocIntersectionGenericsWithValues
testIsInstanceAdHocIntersectionGenericsWithValuesDirectReturn
testIsInstanceAdHocIntersectionUsage
testIsInstanceAdHocIntersectionReinfer
testIsInstanceAdHocIntersectionWithUnions
testIsInstanceAdHocIntersectionSameNames
testIsInstanceAdHocIntersectionBadMro
testIsInstanceAdHocIntersectionAmbiguousClass
testIsSubclassAdHocIntersection
testIsInstanceAdHocIntersectionFineGrainedIncrementalNoChange
testIsInstanceAdHocIntersectionFineGrainedIncrementalIsInstanceChange
testIsInstanceAdHocIntersectionFineGrainedIncrementalUnderlyingObjChang
testIsInstanceAdHocIntersectionFineGrainedIncrementalIntersectionToUnreachable
testIsInstanceAdHocIntersectionFineGrainedIncrementalUnreachaableToIntersection
testIsInstanceAdHocIntersectionWithStrAndBytes
testConcreteClassesInProtocolsIsInstance
testConcreteClassesUnionInProtocolsIsInstance
testNewTypeWithIsInstanceAndIsSubclass
testIsInstanceAdHocIntersectionIncrementalNoChange
testIsInstanceAdHocIntersectionIncrementalNoChangeSameName
testIsInstanceAdHocIntersectionIncrementalNoChangeTuple
testIsInstanceAdHocIntersectionIncrementalIsInstanceChange
testIsInstanceAdHocIntersectionIncrementalUnderlyingObjChang
testIsInstanceAdHocIntersectionIncrementalIntersectionToUnreachable
testIsInstanceAdHocIntersectionIncrementalUnreachaableToIntersection
# issubclass narrowing
testIsInstanceTypeTypeVar
testIsInstanceTypeSubclass
testIsSubClassNarrowDownTypesOfTypeVariables
testOnlyMethodProtocolUsableWithIsSubclass
# --enable-recursive-aliases & isinstance
testRecursiveAliasesRestrictions2
testRecursiveAliasBasicGenericInference
testRecursiveAliasNewStyleSupported
# narrowing if with literals
testConditionalBoolLiteralUnionNarrowing
testRecursiveAliasTuple
# narrowing with Any troubles
testOptionalAssignAny1
testOptionalAssignAny2
testOptionalAssignAny3
testNewAnalyzerBuiltinAliasesFixed
testInferredTypeIsSimpleNestedList
testInferredTypeIsSimpleNestedIterable
testInferredTypeIsSimpleNestedListLoop
testInferredTypeIsSimpleNestedIterableLoop
# narrowing of foo.bar
testNamedTupleUpdateNonRecursiveToRecursiveFine
testNamedTupleUpdateNonRecursiveToRecursiveCoarse
testBasicRecursiveNamedTuple
testBasicRecursiveNamedTupleSpecial
testBasicRecursiveNamedTupleClass
# narrowing of foo[0]
testTupleTypeUpdateNonRecursiveToRecursiveCoarse
testTypeAliasUpdateNonRecursiveToRecursiveCoarse
testTypedDictUpdateNonRecursiveToRecursiveCoarse
testTypedDictTypeNarrowingWithFinalKey
testLiteralIntelligentIndexingTuples
testTupleTypeUpdateNonRecursiveToRecursiveFine
testTypeAliasUpdateNonRecursiveToRecursiveFine
# questionable implicit literal?
testEnumReachabilityChecksIndirect
testEnumReachabilityWithChainingDirectConflict
# Narrowing with previous and/or
testRegression11705_Strict
testRegression11705_NoStrict
# narrowing if and boolean check with or/and
testRestrictedTypeAnd
testRestrictedTypeOr
testUnionTruthinessTracking
# or/and boolean logic over multiple terms
testAndOr
testRestrictedBoolAndOrWithGenerics
testOptionalTypeNarrowedInBooleanStatement
testOrCases
testAndCases
# ternary narrowing
testTernaryWithNone
testNoneListTernary
testOptionalTypeNarrowedByGenericCall5
testCastConfusion
testIsinstanceInInferredLambda
# Narrowing __bool__ / __len__
testFinalWithoutBool
testFinalWithoutBoolButWithLen
# narrowing with assert regressions
testAssert
# narrowing with assert
testTypedDictUpdate3
testReModuleBytes
testReModuleString
testNoCrashForwardRefToBrokenDoubleNewType
testNoCrashForwardRefToBrokenDoubleNewTypeClass
testNewAnalyzerNoCrashForwardRefToBrokenDoubleNewTypeClass
# narrowing with in
testOperatorContainsNarrowsTypedDicts_unionWithList
testOperatorContainsNarrowsTypedDicts_total
testOperatorContainsNarrowsTypedDicts_partialThroughTotalFalse
testOperatorContainsNarrowsTypedDicts_partialThroughNotRequired
testVariadicTupleCollectionCheck
testTupleOverlapDifferentTuples
# narrowing assignments regressions
testAwaitOverloadSpecialCase
testCompatibilityOfDynamicWithOtherTypes
testMiscBinaryOperators
testGenericFunctionAsOverloadItem
testImportAndAssignToModule
testParamSpecSubtypeChecking1
testMultipleAssignmentWithNonTupleRvalue
testAssignAnyToUnion
testUnionOfVariableLengthTupleUnpacking
# narrowing assignments
testDynamicWithMemberAccess
testTupleCompatibleWithSequence
testAugmentedAssignmentIntFloat
testAugmentedAssignmentIntFloatMember
testUnionMultiassignRebind
testUnionMultiassignAlreadyDeclared
testUnionMultiassignPacked
testUnpackUnionNoCrashOnPartialNoneBinder
testNestedUnionUnpackingFromNestedTuplesBinder
testUnionUnpackingDoubleBinder
# narrowing with dict keys
testNarrowTypeForDictKeys
# try/except/finally
testExceptionVariableReuseInDeferredNode4
testExceptionVariableReuseInDeferredNode5
testExceptionVariableReuseInDeferredNode6
testUnionTryExcept
testUnionTryExcept2
testUnionTryExcept3
testUnionTryFinally
testUnionTryFinally2
testUnionTryFinally4
testUnionTryFinally5
testUnionTryFinally6
testUnreachableTryExcept
testUnreachableTryExceptElse
testUnreachableTryReturnFinally1
testUnreachableTryReturnFinally2
# while/for
testModifyLoop
testModifyLoop2
testModifyLoop3
testModifyLoopWhile4
testModifyLoopFor4
testModifyNestedLoop
testModifyLoopLong
testWhileExitCondition2
testWhileLinkedList
# narrowing of nested scopes
testNarrowedVariableInNestedFunctionBasic
testNarrowedVariableInNestedFunctionMore1
testNarrowedVariableInNestedFunctionMore2
testLambdaInferenceUsesNarrowedTypes
testNarrowOptionalOutsideLambda
testNarrowOptionalOutsideLambdaWithDeferred
# hasattr
testHasAttrMissingAttributeInstance
testHasAttrMissingAttributeFunction
testHasAttrMissingAttributeClassObject
testHasAttrMissingAttributeTypeType
testHasAttrMissingAttributeTypeVar
testHasAttrMissingAttributeChained
testHasAttrMissingAttributeNested
testHasAttrPreciseType
testHasAttrMissingAttributeUnion
testHasAttrMissingAttributeOuterUnion
testHasAttrMissingAttributeLiteral
testHasAttrModule
# type(foo) = int narrowing
testTypeEqualsCheck
testMultipleTypeEqualsCheck
testTypeEqualsCheckUsingIs
testTypeEqualsNarrowingUnionWithElse
testTypeEqualsMultipleTypesShouldntNarrow
testTypeNotEqualsCheck
testTypeNotEqualsCheckUsingIsNot

# NoReturn
testNoReturnTypeAlias
testUnionWithNoReturn
testOverloadsAndNoReturnNarrowWhenBlacklistingSubtype
testOverloadsAndNoReturnNarrowWhenBlacklistingSubtype2
testDontNeedAnnotationForCallable
testLiteralCheckSubtypingStrictOptional
testLiteralCheckSubtypingNoStrictOptional
testNewAndInitNoReturn
testOverloadedNewAndInitNoReturn
testNoReturnImportFromTyping
# --warn-no-return
testNoReturnDisallowsReturn
testNoReturnDisallowsImplicitReturn
testNoReturnImplicitReturnCheckInDeferredNode
testNoReturnInExpr
testNoReturnAsync
# --no-warn-no-return
testNoWarnNoReturn
testOverloadsAndNoReturnNarrowTypeNoStrictOptional1
testOverloadsAndNoReturnNarrowTypeWithStrictOptional1
testOverloadsAndNoReturnNarrowTypeNoStrictOptional2
testOverloadsAndNoReturnNarrowTypeWithStrictOptional2
testOverloadsAndNoReturnNarrowTypeNoStrictOptional3
testOverloadsAndNoReturnNarrowTypeWithStrictOptional3

# None late binding, because it's None (x = None; x = 3)
*PartialType*
testAssigningAnyStrToNone
testLocalVariablePartiallyInitializedToNone
testLocalVariablePartiallyTwiceInitializedToNone
testGvarPartiallyInitializedToNone
testPartiallyInitializedToNone*
testPartiallyInitializedVariableDoesNotEscapeScope2
testAttributePartiallyInitializedToNoneWithMissingAnnotation
testGlobalInitializedToNoneSetFromFunction
testGlobalInitializedToNoneSetFromMethod
testNoCrashOnPartialVariable
testNoCrashOnPartialVariable3
testInferOptionalType
testInferOptionalTypeLocallyBound
testInferOptionalAnyType
testInferOptionalTypeFromOptional
testDeferredAndOptionalInferenceSpecialCase
testInheritedAttributeNoStrictOptional
testIncompatibleInheritedAttributeNoStrictOptional
testInheritedAttributeStrictOptional
testIgnoreTypeInferenceError2
testCheckUntypedDefsSelf2
testNoCrashOnPartialLambdaInference
testUnpackUnionNoCrashOnPartialNone
testUnpackUnionNoCrashOnPartialNone2

# Walrus tests
testWalrus
testWalrusRedefined
testWalrusConditionalTypeBinder
testWalrusConditionalTypeCheck
testWalrusConditionalTypeCheck2
testWalrusAssignmentAndConditionScopeForLiteral
testWalrusAssignmentAndConditionScopeForProperty
testWalrusAssignmentAndConditionScopeForFunction
testWalrusUsedBeforeDef
testPossiblyUndefinedWithAssignmentExpr
testGenericDictWithOverload
testNarrowOnSelfInGeneric
testNarrowedVariableInNestedModifiedInWalrus
# "Assignment expression within a comprehension cannot be used in a class body"
testNoCrashOnAssignmentExprClass

# TypeGuard
testSerializeTypeGuardFunction
testTypeGuardWithPositionalOnlyArg
testTypeGuardKeywordFollowingWalrus
testWalrusTypeGuard
testReplaceIsDataclass

# Function local self attribute name binding
testOptionalDescriptorsBinder
testUnionDescriptorsBinder
testSubclassDescriptorsBinder
testPropertyGetterBody
# self assignment validation
testSlotsAssignmentWithMethodReassign
testTypeVarTupleNewSyntaxGenerics
# "NamedTuple type as an attribute is not supported"
testAssignNamedTupleAsAttribute
testNoCrashUnsupportedNamedTuple

# All conditional function variants must have identical signatures (flow analysis)
testUnionOrderEquivalence

# "Incompatible import of "y" (imported name has type "str", local name has type "int")"
testAssignAndConditionalImport
testAssignAndConditionalStarImport
testImportedVariableViaImport

# Multi definition ifs
testNewAnalyzerFirstAliasTargetWins
testNewAnalyzerFirstVarDefinitionWins
testOptionalBackwards1
testOptionalBackwards2
testOptionalBackwards3
testOptionalBackwards4
# Multi definition name binder issues where essentially the same type is defined?
testOverrideByIdemAliasReversed
testOverrideByIdemAliasGeneric
testOverrideByIdemAliasImported
testConditionalExceptionAliasOverride
# comprehensions Scoping (actually Python 3.10 name lookup behavior)
testListComprehensionSpecialScoping

# Conditional definitions
testNewAnalyzerConditionalFunc
testNewAnalyzerConditionalFuncDefer
testNewAnalyzerConditionallyDefineFuncOverVar
testRedefineFunctionDefinedAsVariableInitializedToNone
testRedefineNestedFunctionDefinedAsVariableInitializedToNone
testConditionalFunctionDefinitionUsingDecorator2
testConditionalFunctionDefinitionUnreachable
testConditionalExpressionAndTypeContext

# ""async for" outside async function"
testAsyncForOutsideCoroutine
testAsyncWithOutsideCoroutine

# "All conditional function variants must have identical signatures"
testIncompatibleConditionalFunctionDefinition
testIncompatibleConditionalFunctionDefinition2
testIncompatibleConditionalFunctionDefinition3
testConditionalRedefinitionOfAnUnconditionalFunctionDefinition1
testConditionalRedefinitionOfAnUnconditionalFunctionDefinition2
testIncompatibleConditionalMethodDefinition
testRedefineImportedFunctionViaImport

# TYPE_CHECKING
testIfTypeCheckingUnreachableClass
# MYPY
testRefreshImportIfMypyElse1
# --always-true TRUTH
testIfConditionsInDefinition
testAlwaysTrueAlwaysFalseFlags

# if sys.version
testNewAnalyzerVersionCheck
testNewAnalyzerVersionCheck2
testPromoteMemoryviewToBytes
testDataclassesBadInit
testDataclassFieldDoesNotFailOnKwargsUnpacking
testOverloadSpecialCase
# NamedTuple magic attribute __match_args__ in py >= 3.10
testNamedTupleHasMatchArgs

# "Name "C" is used before definition"
testNewAnalyzerNewTypeForwardClassAliasReversed
testBanPathologicalRecursiveTuples
# undefined += 1 where undefined is a NameError
testOperatorAssignment
inplace_operator_on_undefined_target
testInvalidDel3

# Import Redefinition
testRedefineTypeViaImport
# Redefinition (Name "X" already defined on line X)
testGlobalVarRedefinition
testLocalVarRedefinition
testClassVarRedefinition
testMultipleClassDefinitions
testMultipleMixedDefinitions
testMultipleMethodDefinition
testMultipleNestedFunctionDef
testRedefineVariableAsTypevar
testRedefineTypevar
testRedefineTypevar2
testRedefineTypevar3
testRedefineTypevar4
testImportTwoModulesWithSameNameInFunction
testImportTwoModulesWithSameNameInGlobalContext
testTypeRedeclarationNoSpuriousWarnings
testDuplicateDef*
testTypeVarClassDup
testAliasDup
testImportFuncDup
testIgnoredImportDup
testNewAnalyzerRedefinitionAndDeferral*
testNewAnalyzerImportStarForwardRef*
testNewAnalyzerImportOverExistingInCycle
testNewAnalyzerImportOverExistingInCycleStar1
testNewAnalyzerImportOverExistingInCycleStar2
testNewAnalyzerConditionalFunc
testNewAnalyzerConditionallyDefineFuncOverClass
testNewAnalyzerMissingImportErrors
testNewAnalyzerMissingImportErrorsRedefinition
testNewAnalyzerDuplicateTypeVar
testNewAnalyzerDuplicateTypeVarImportCycle
testNewAnalyzerDuplicateTypeVarImportCycleWithAliases
testNewAnalyzerRedefineAsClass
testNewAnalyzerOverrideClassWithTypeAlias
testNewAnalyzerIdentityAssignment*
testProhibitReassigningAliases
testProhibitReassigningSubscriptedAliases
testProhibitReassigningGenericAliases
testUnknownModuleRedefinition
testStarImportOverlappingMismatch
testStarImportOverridingLocalImports
testRedefineFunctionViaImport
testDifferentImportSameNameTwice
testNewAnalyzerRedefineAsOverload
testImportOnTopOfAlias1
testImportOnTopOfAlias2
testUnconditionalRedefinitionOfConditionalFunction
testUnconditionalRedefinitionOfConditionalMethod
testRedefineFunction2
testMissingOverloadDecorator
testDecoratedRedefinitionIsNotOverload
testMultipleClassDefinition
testMemberRedefinition
testMemberRedefinitionDefinedInClass
testDecorateOverloadedFunction
testErrorCodeAlreadyDefined
testNewAnalyzerEnumRedefinition
testNewSyntaxBasics
testDecoratedClassLine
testDataclassesInheritingDuplicateField
testPropertyAndFieldRedefinitionNoCrash
testModuleLevelGetattrImportFromAsTwice
testFinalClassVariableRedefinitionDoesNotCrash
# redefinition overload
testRedefinedOverloadedFunction
testFakeOverloadCrash
testFakeOverloadCrash2
testOverloadNotImportedNoCrash
testSingleOverload2
testCustomRedefinitionDecorator
# Cannot assign multiple types to name "b" without an explicit "Type[...]" annotation
testAliasesInClassBodyNormalVsSubscripted
# Cannot assign multiple modules to name "..." without explicit "types.ModuleType" annotation
testModuleAliasRepeated
testModuleAliasRepeatedComplex
testModuleAliasToOtherModule
testModuleAliasToQualifiedImport2
# Incompatible redefinition (redefinition with type "Callable[[Any], Any]", original type "Callable[[], Any]")
testRedefineFunctionDefinedAsVariableWithInvalidSignature
testRedefinedFunctionInTryWithElse
# Incompatible redefinition
testRedefineFunctionDefinedAsVariableInitializedToEmptyList
# NewType Redefinition
testNewAnalyzerNewTypeRedefinition
testNewTypeRedefiningVariablesFails

# "Value of type "A" must be used"
# "Value of type "Coroutine[Any, Any, None]" must be used"
# "Are you missing an await?"
# --enable-error-code unused-awaitable
testUnusedAwaitable
testForwardRefToBadAsyncShouldNotCrash_newsemanal
# async await when is a generator comprehension becoming an asyncgenerator?
testAsyncGeneratorExpressionAwait
testAsyncForComprehension
# Crazy types.coroutine types
testFullCoroutineMatrix

# "Trying to read deleted variable "Foo""
testDelStmtWithTypeInfo
testDelStatementWithAssignmentSimple
testDelStatementWithAssignmentTuple
testDelStatementWithAssignmentList
testDelStatementWithConditions
testDel
testReuseTryExceptionVariable
testReuseDefinedTryExceptionVariable
testRaiseFromStatement

# match statement
testValuePattern
testCapturePattern
testCapturePatternOutliving
testNestedCapturePatterns
testMappingPatternRest
testAsPattern
testGuard
testCapturePatternInGuard
testAsPatternInGuard
testMatchUndefinedSubject
testMatchUndefinedValuePattern
testMatchUndefinedClassPattern
testNoneBindingWildcardPattern
testNoneBindingStarredWildcardPattern

# "Cannot determine type of"
testThreePassesRequired
testAccessGlobalVarBeforeItsTypeIsAvailable
testAccessDataAttributeBeforeItsTypeIsAvailable
testMultipassAndTopLevelVariable
testMultipassAndCircularDependency
testForwardReferenceToDecoratedClassMethod
testAccessingClassAttributeWithTypeInferenceIssue
testClassObjectsNotUnpackableWithoutIterableMetaclass
testErrorCodeCannotDetermineType
testCannotDetermineTypeFromOtherModule
testColumnCannotDetermineType
testUnionOfNonIterableUnpacking
# "Cannot determine type of "X" in base class"
testCannotDetermineTypeInMultipleInheritance

# "Missing return statement"
testWarnNoReturnWorksWithStrictOptional
testAssertCurrentFrameIsNotUnreachable
testNoReturnInGenerator
testWithStmtBoolExitReturnOkay
testErrorCodeMissingReturn
testDedicatedErrorCodeForEmpty_no_empty
testEmptyBodyProhibitedFunction
testEmptyBodyProhibitedMethodNonAbstract
testEmptyBodyProhibitedPropertyNonAbstract
testEmptyBodyNoteABCMeta
testAsyncDefMissingReturn
testUnreachableWithStdlibContextManagers
testNoReturn
testNoReturnWhile
testNoReturnExcept
# "Use "-> None" if function does not return a value"
testDecoratedFunctionLine
testUntypedDef
testUnannotatedReturnWithOnlySelfArgument
testUntypedAsyncDef

# "Cannot call function of unknown type"
testUnknownFunctionNotCallable

# "Return value expected"
testReturnWithoutAValue
testEmptyReturnInGenerator
testErrorCodeMissingReturnValueInReturnStatement
testColumnReturnValueExpected
testAsyncDefReturnWithoutValue

# "No return value expected"
testNonEmptyReturnInNoneTypedGenerator
testErrorCodeReturnValueNotExpected

# The type "Type[type]" is not generic and not indexable
testTypeApplicationCrash
# `class type` stuff
testObfuscatedTypeConstructorReturnsTypeType
testOtherTypeConstructorsSucceed
testTypeEquivalentTypeAny2
# Type[Any] is object
testSimplifyingUnionWithTypeTypes2

# typing.assert_type in untyped functions
testAssertTypeUncheckedFunction
testAssertTypeUncheckedFunctionWithUntypedCheck
# function type mismatch when untyped
testSubtypingFunctionsImplicitNames

# Global
testAssignToFuncDefViaGlobalDecl2
testTypeOfGlobalUsed
testGlobalWithoutInitialization

# Nonlocal
testInvalidNonlocalDecl
testNonlocalDeclNotMatchingGlobal
testNonlocalDeclConflictingWithParameter
testNonlocalDeclOutsideFunction
testGlobalAndNonlocalDecl
testNonlocalAndGlobalDecl
testNewAnalyzerRedefinedNonlocal
testTypeOfOuterMostNonlocalUsed
testTypeOfNonlocalUsed

# __init__ None needed
testInitReturnTypeError

# Need type annotation for "X"
testNewAnalyzerLessErrorsNeedAnnotation
testNewAnalyzerLessErrorsNeedAnnotationNested
testErrorInTypeCheckSecondPassThroughPropagation
testGenericFunctionOnReturnTypeOnly
testUnderspecifiedInferenceResult
testNoCrashOnPartialMember
testDontMarkUnreachableAfterInferenceUninhabited
testDontMarkUnreachableAfterInferenceUninhabited2
testDontMarkUnreachableAfterInferenceUninhabited3
testNeedAnnotationForCallable
testPartialDefaultDict*
testInferenceOfFor1
testInferenceOfFor2
testInferenceOfFor3
testInferLocalVariableTypeWithUnderspecifiedGenericType
testLocalVariableInferenceFromEmptyList
testNoPartialInSupertypeAsContext
testSuggestPep604AnnotationForPartialNone
testSelfTypeRestrictedMethodOverloadInitFallBacks
testOverridePartialAttributeWithMethod
testInheritanceAndAttributeAssignment
testAssignmentToAttributeInMultipleMethods
testAccessingClassAttributeWithTypeInferenceIssue2
testTypeAnnotationNeededMultipleAssignment
testAssignmentToStarMissingAnnotation
testForLoopOverEmptyTuple
testTupleWithoutContext
testReusingInferredForIndex2
testErrorCodeNeedTypeAnnotation
testColumnNeedTypeAnnotation
testDictWithoutKeywordArgs
testUninferableLambda
testUninferableLambdaWithTypeError
testDisallowAnyGenericsPlainList
# "Perhaps you need a type annotation for "x"? Suggestion: "List[str | int]""
testInferredTypeSubTypeOfReturnType
# --disallow-any-generics
testDisallowAnyGenericsForAliasesInRuntimeContext
testGenericTypedDictAlias
# "Subscripting classes that are not generic at runtime may require escaping"
testCheckDisallowAnyGenericsStubOnly

# attrs
testAttrs*
updateMagicField
magicAttributeConsistency
magicAttributeConsistency2-only_when_cache
testDisallowIncompleteDefsAttrsNoAnnotations
testDisallowIncompleteDefsAttrsWithAnnotations
testDisallowIncompleteDefsAttrsPartialAnnotations

# Special case for assignment to '_'
testUnusedTargetLocal
testUnusedTargetNotClass
testUnusedTargetNotClass2
testUnusedTargetTupleUnpacking
testUnusedTargetMultipleTargets
testUnusedTargetNotImport
testUnderscoreClass
testUnusedTargetForLoop
testUnusedTargetWithClause
testUnusedTargetNotExceptClause

# __doc__ definitions
testNewNamedTupleDocString

# Formatting Module as types ("ModuleType" instead of Module)
testInvalidOperationsOnModules
testConditionalImportAndAssignInvalidToModule
testModuleAliasRepeatedWithAnnotation
# qualified name in function contains class path: __main__.Cls.FooEnum@4
testAnonymousFunctionalEnum
testNewAnalyzerIncrementalMethodNamedTuple
testNewAnalyzerNamedTupleClassNestedMethod
testNoIncrementalCrashOnTypedDictMethod
# qualified name for NewType for different module
testNewTypeInMultipleFiles
# qualified name for Enum for different module
testLiteralWithEnumsSimilarDefinitions
# qualified name for TypedDict for different module
testGenericTypedDictWithError
# qualified name for Type[cls] for different module (when format short)
testProtocolWithNestedClass
# NewType formatting instead of internal type
testNewTypeDependencies3
# Formatting C.__init__() call as "C" instead of "__init__" of "C"
testInitMethodUnbound
# Callable formatting varargs
testUnionOfSimilarCallablesCrash
# Nicer Callable Errors
testCallableParsingFromExpr
testCallableParsing
testCallableTooManyVarArg
testCallableKindsOrdering
testCallableFastParseBadArgArgName
# Formatting better verbosity
testDistinctTypes
testDictIncompatibleKeyVerbosity
testDictIncompatibleValueVerbosity
# Separate formatting for ambigous names???
testIncompatibleAssignmentAmbiguousShortnames
# for long tuples: "Expression tuple item 8 has type "str"; "int" expected;"
testAssigningWithLongTupleInitializer

# Assignment like ac[b] += c with both __getitem__ and __setitem__ has same error twice
testOperatorAssignmentWithIndexLvalue1

# EllipsisType
testUnionWithEllipsis
# Ellipsis / raise NotimplementedError / pass are considered stubs in normal files 
testEllipsisDefaultArgValueInNonStub
testEllipsisDefaultArgValueInNonStubsMethods

# NotImplemented
testOperatorMethodAgainstSameType
testReturnAnyForNotImplementedInNormalMethods

# Probably fixed eventually by updating mypy or typeshed
testDecoratorTypeAfterReprocessing

# type ignore whole module
testIgnoreWholeModule2
testIgnoreWholeModule3
testIgnoreWholeModule4
testDontIgnoreWholeModule2
testDontIgnoreWholeModule3
# type ignore leads to "Revealed type is "A?""
testSerializeIgnoredInvalidType
# bad type: ignore
testErrorCodeBadIgnore
testErrorCodeBadIgnoreNoExtraComment
# --disable-error-code
testUncheckedAnnotationSuppressed
testMethodAssignmentSuppressed
testMethodAssignCoveredByAssignmentFlag
testIncrementalInvalidNamedTupleInUnannotatedFunction
testDisableErrorCode
testDisableMultipleErrorCode
# --enable-error-code
testEnableDifferentErrorCode
testEnableMultipleErrorCode
# --warn-unused-ignores
# "Unused "type: ignore" comment"
testErrorCodeWarnUnusedIgnores1
testErrorCodeWarnUnusedIgnores2
testErrorCodeWarnUnusedIgnores3
testErrorCodeWarnUnusedIgnores4
testErrorCodeWarnUnusedIgnores5
testErrorCodeWarnUnusedIgnores6_NoDetailWhenSingleErrorCode
testMethodAssignCoveredByAssignmentUnused
testUnusedIgnoreTryExcept
testUnusedIgnoreEnableCode
testIgnoreDecoratedFunction1
testIgnoreScopeUnused1
testIgnoreScopeUnused2
testIgnoreScopeUnused3
testUnusedIgnoreVersionCheck
testUnusedTypeIgnore
testUnusedTypeIgnoreImport
# --warn-unused-ignores whole module
testIgnoreWholeModule1
testImportUnusedIgnore2
# --enable-error-code ignore-without-code
testErrorCodeMissingWhenRequired
testErrorCodeMissingDoesntTrampleUnusedIgnoresWarning
testErrorCodeMissingWholeFileIgnores
testErrorCodeMissingMultiple
# type: ignore blocking errors cannot be ignored: ""yield" outside function"
testCannotIgnoreBlockingError
# type: ignore on forward reference
testErrorCodeSyntaxErrorIgnoreNote
# type: ignore on call silences errors in call, even if not on same line?!
testMultiLineMethodOverridingWithIncompatibleTypesIgnorableAtDefinition
# mypy: ignore-errors=True
testAsyncIteratorWithIgnoredErrorsAndYieldFrom

# "mypy: "tmp/typing.py" shadows library module "typing""
testShadowTypingModule

# Weird and unsound mypy cases for x: typing.TypeAlias = ...
testClassLevelTypeAliasesInUnusualContexts
testMalformedTypeAliasRuntimeReassignments
# weird files
testScriptsAreNotModules

# pyproject.toml
testMultipleModulesInOverridePyProjectTOML
testIgnoreErrorFromMissingStubs1
testIgnoreErrorFromMissingStubs2
testCaseInsensitivityDirPyProjectTOML
testPreferPackageOverFileCasePyProjectTOML
testClassicPackageInsideNamespacePackageCasePyProjectTOML
testIncrementalFollowImportsVariablePyProjectTOML
testNamespacePackageWithMypyPathPyProjectTOML
testNamespacePackagePickFirstOnMypyPathCasePyProjectTOML
testPerFileIncompleteDefsBasicPyProjectTOML
testPerFileStrictOptionalBasicPyProjectTOML
testPerFileStrictOptionalBasicImportStandardPyProjectTOML
testPerFileStrictOptionalBasicImportOptionalPyProjectTOML
testPerFileStrictOptionalListItemImportOptionalPyProjectTOML
testPerFileStrictOptionalNoneArgumentsPyProjectTOML
testAlwaysTrueAlwaysFalseConfigFilePyProjectTOML
testDisableErrorCodeConfigFilePyProjectTOML
testStrictInConfigAnyGenericPyProjectTOML
testStrictFalseInConfigAnyGenericPyProjectTOML
testStrictEqualityPerFilePyProjectTOML
testNoImplicitReexportPyProjectTOML
testDisallowSubclassingAnyPyProjectTOML
testNoImplicitOptionalPerModulePyProjectTOML
testModuleGetattrInit10PyProjectTOML

# mypy.ini
testRefreshIgnoreErrors1
testRefreshIgnoreErrors2
testRefreshOptions
testCaseInsensitivityDir
testPreferPackageOverFileCase
testClassicPackageInsideNamespacePackageCase
testShowErrorCodesInConfig
testIncrementalFollowImportsVariable
testRegularUsesFgCache
testFgCacheNeedsFgCache
testIncrementalPerFileFlags
testClassicPackageIgnoresEarlierNamespacePackage
testClassicPackageInsideNamespacePackage
testNamespacePackageWithMypyPath
testNamespacePackagePickFirstOnMypyPath
testNamespacePackageInsideClassicPackage
testNamespacePackagePickFirstOnMypyPathCase
testTypedPkgNoSitePkgsIgnoredImports
testTypedPkg_config_nositepackages
testPerFileIncompleteDefsBasic
testPerFileStrictOptionalBasic
testPerFileStrictOptionalBasicImportStandard
testPerFileStrictOptionalBasicImportOptional
testPerFileStrictOptionalListItemImportOptional
testPerFileStrictOptionalNoneArguments
testAlwaysTrueAlwaysFalseConfigFile
testDisableErrorCodeConfigFile
testStrictInConfigAnyGeneric
testStrictFalseInConfigAnyGeneric
testStrictEqualityPerFile
testNoImplicitReexportMypyIni
testDisallowSubclassingAny
testNoImplicitOptionalPerModule
testDisallowUntypedCallsAllowListConfig
testPerModuleErrorCodes
testPerModuleErrorCodesOverride
testNoCrashFollowImportsForStubs
testModuleGetattrInit10
# Uses an environment variable in mypy.ini files=$MYPY_CONFIG_FILE_DIR/good.py
testEnvvar_MYPY_CONFIG_FILE_DIR

# Mypy plugins
testChangedPluginsInvalidateCache
testChangedPluginsInvalidateCache2
testAddedPluginsInvalidateCache
testRemovedPluginsInvalidateCache
testPluginConfigData
testIncrementalAddClassMethodPlugin
testIncrementalAddOverloadedMethodPlugin

# Mypy inline config https://mypy.readthedocs.io/en/stable/inline_config.html
testOptionalIterator
testNoneVsProtocol

# strict optional with config file
testNewAnalyzerTypeArgBoundCheckWithStrictOptional
testNewAnalyzerTypeArgBoundCheckWithStrictOptionalPyProjectTOML
testPerFileStrictOptionalModule
testPerFileStrictOptionalModuleOnly
testPerFileStrictOptionalFunction
testPerFileStrictOptionalMethod
testStrictOptionalCovarianceCrossModule

# mypy extensions
testFlexibleAlias1
testFlexibleAlias2
testFlexibleAlias3

# enable-error-code="redundant-self"
# "Redundant "Self" annotation for the first method argument"
testTypingSelfRedundantWarning
testTypingSelfRedundantWarning_pep585

# if right operand is Any, fallback to Any in operation
testBinaryOperationsWithDynamicAsRightOperand
# --strict-equality strict equality "Non-overlapping equality check (left operand type: "int", right operand type: "str")"
testStrictEqualityEq
testStrictEqualityIs
testStrictEqualityContains
testStrictEqualityUnions
testStrictEqualityNoPromotePy3
testStrictEqualityEqNoOptionalOverlap
testCustomEqCheckStrictEquality
testCustomEqCheckStrictEqualityTuple
testCustomEqCheckStrictEqualityMeta
testCustomContainsCheckStrictEquality
testStrictEqualityTypeVsCallable
testStrictEqualityMetaclass
testStrictEqualityWithALiteral
testStrictEqualityWithALiteralNewType
testStrictEqualityWithFixedLengthTupleInCheck
testStrictEqualityBytesSpecialUnion
testErrorCodeNonOverlappingEquality
testColumnNonOverlappingEqualityCheck
testStrictEqualityAndEnumWithCustomEq
testStrictEqualityAllowlist
testStrictEqualitywithParamSpec
testTypedDictOverlapWithDictNonOverlapping
testTypedDictOverlapWithDictNonTotalNonOverlapping
testTypedDictOverlapWithDictEmpty
testStrictAndStrictEquality
testStrictEqualityWithRecursiveMapTypes

# --show-column-numbers and tuple targets
testColumnsAssignment
# --show-error-end
testCheckEndColumnPositions

# "type ignore with error code is not supported for modules; use `# mypy: disable-error-code="whatever"`"
testNoteAboutChangedTypedDictErrorCode
testRecommendErrorCode
testRecommendErrorCode2

# --show-error-context
testNewAnalyzerTypeArgBoundCheckWithContext
testShowErrorContextFunction
testShowErrorContextClass
testShowErrorContextMember
testShowErrorContextModule
testShowErrorContextTopLevel
testShowErrorContextFromHere

# --allow-untyped-globals
testPermissiveAttributeOverride1

# --allow-redefinition
testStarLvalues
testRenameGlobalVariable
testNoRenameGlobalVariable
testCannotRenameExternalVarWithinClass

# --disallow-any-expr
testDoNotLimitErrorVolumeIfNotImportErrors
testDisallowAnyExprIncremental
testDisallowAnyExprUnannotatedFunction
testDisallowAnyExprSimple
testDisallowAnyExprExplicitAnyParam
testDisallowAnyExprAllowsAnyInCast
testDisallowAnyExprAllowsAnyInVariableAssignmentWithExplicitTypeAnnotation
testDisallowAnyExprGeneric

# --disallow-any-unimported
testErrorCodeAnyFromUnfollowedImport
testDisallowImplicitTypesIgnoreMissingTypes
testDisallowImplicitTypes
testDisallowImplicitAnyVariableDefinition
testDisallowImplicitAnyGeneric
testDisallowImplicitAnyInherit
testDisallowImplicitAnyAlias
testDisallowImplicitAnyCast
testDisallowImplicitAnyNamedTuple
testDisallowImplicitAnyTypeVarConstraints
testDisallowImplicitAnyNewType
testDisallowImplicitAnyCallableAndTuple
testDisallowImplicitAnySubclassingExplicitAny
testDisallowImplicitAnyVarDeclaration
testDisallowUnimportedAnyTypedDictSimple
testDisallowUnimportedAnyTypedDictGeneric
testNoCrashOnUnImportedAnyNotRequired

# --disallow-untyped-decorators
testDisallowUntypedDecoratorsUnresolvedDecorator

# --disallow-untyped-calls
testDisallowUntypedCallsArgType
# --untyped-calls-exclude=bar.A
testDisallowUntypedCallsAllowListFlags

# --follow-imports=error
testImportSuppressedWhileAlmostSilent
testAncestorSuppressedWhileAlmostSilent
testErrorButDontIgnore1
testErrorButDontIgnore2
testErrorButDontIgnore3-skip
testErrorButDontIgnore4
testIncrementalFollowImportsError
testFollowImportsError
# --follow-imports=silent
testIncrementalFollowImportsSilent
testIncrementalWithSilentImports
testFollowImportsSilent
# --follow-imports=skip
testIncrementalUnsilencingModule
testIncrementalWithSilentImportsAndIgnore
testIncrementalSilentImportsWithBlatantError
testIncrementalImportIsNewlySilenced
testIncrementalSilencedModuleNoLongerCausesError
testIncrementalFollowImportsSkip
testFollowImportSkipNotInvalidatedOnAddedStubOnFollowForStubs
testAddedSkippedStubsPackageFrom
testAddPackage6
testAddPackage7
testSkipImports
testSkipImportsWithinPackage
testSkipButDontIgnore1
testSkipButDontIgnore2
testFineFollowImportSkipInvalidatedOnAddedStub-skip
testFineAddedSkippedStubsPackageFrom
testFileAddedAndImported
testFileAddedAndImported2
testDeleteFileWithErrors
testDoNotFollowImportToNonStubFile
testFollowImportsSkip
testSubclassingAnySilentImports
testSubclassingAnySilentImports2

# --warn-unreachable "Statement is unreachable"
testOperatorContainsNarrowsTypedDicts_final
testNamedTupleWithBoolNarrowsToBool
testUnreachableWithStdlibContextManagers
testUnreachableWithStdlibContextManagersNoStrictOptional
testSpecialTypingProtocols
testTypeVarTupleWithIsInstance
# Right operand of "and" is never evaluated
testNoneAndStringIsNone
testInvalidBooleanBranchIgnored

# --no-strict-optional details
testNestedListExpressions
testInitializationWithMultipleValues

# --no-namespace-packages
testClassicNotPackage
testPackageWithoutInitFile
testDeletePackage4
testDeletePackage5
testDeletePackage6

# namespace multiple packages
testTypedPkgSimple
testTypedPkg_args_nositepackages
testTypedPkgStubs
testStubPrecedence
testTypedPkgSimpleEgg
testTypedPkgSimpleEditable
testTypedPkgSimpleEditableEgg
testTypedPkgNamespaceImportFrom
testTypedPkgNamespaceImportAs
testTypedPkgNamespaceRegImport
testTypedPkgNamespaceRegFromImportTwice
testNamespacePkgWStubs
testNamespacePkgWStubsWithNamespacePackagesFlag
testTypedPkgNamespaceRegFromImportTwiceMissing
testTypedPkgNamespaceRegFromImportTwiceMissing2

# --enable-incomplete-feature=PreciseTupleTypes
testTupleWithStarExpr2Precise
testTupleWithStarExpr3Precise
testVariadicTupleConcatenation
testPackingVariadicTuplesHomogeneous
testVariadicTupleContextNoCrash
testVariadicTupleInTupleContext

# --enable-error-code redundant-expr
# "If condition is always false"
testRedundantExpressions

# flags: --enable-error-code truthy-bool
testTruthyBool
testTruthyFunctions
testTruthyIterable
# flags: --disable-error-code truthy-bool
testDisableEnableErrorCodesIncremental

# --disable-bytearray-promotion
testDisableBytearrayPromotion
# --disable-memoryview-promotion
testDisableMemoryviewPromotion

# --enable-error-code=unimported-reveal
testUnimportedRevealType
testUnimportedRevealTypePy311
testUnimportedRevealTypeInUncheckedFunc
testUnimportedRevealLocals

# --enable-error-code explicit-override "Method "prop" is not using @override but is overriding a method in class "__main__.A""
requireExplicitOverrideMethod
requireExplicitOverrideProperty
requireExplicitOverrideOverload
requireExplicitOverrideMultipleInheritance

# Not all modules are checked in mypy: `# cmd: mypy -m m`
testTypeCheckNamedModule4
testTypeCheckNamedModule5
testTypeCheckNamedModuleWithImportCycle
testStubImportNonStubWhileSilent
# cmd: mypy a.py
testErrorInReAddedModule
testFollowImportsNormalPackageInitFileStub
# Not all modules are checked even in default mypy
testPreferPackageOverFile
testPreferPackageOverFile2
testNotPreferPackageOverFileCase
testFollowImportsNormalDeleteFile4
testFollowImportsNormalDeleteFile5
testFollowImportsNormalDeleteFile6
testFollowImportsNormalDeleteFile7
testSubmoduleMixingImportFromAndImport
testSubmoduleImportFromDoesNotAddParents

# --soft-error-limit
testLimitLegacyStubErrorVolume

# --pretty
testReprocessMethodShowSource
testGenericTypeAliasesWithNestedArgs
testPrettyMessageSorting
testParseErrorShowSource
testDictExpressionErrorLocations

# --no-silence-site-packages
testAddFileWhichImportsLibModuleWithErrors

# "Incompatible types in string interpolation (expression has type "str", placeholder has type "int")"
testErrorCodeFormatCall

# tuple type is not initializable (though it probably should)
testTypeUsingTypeCErrorUnsupportedType
testTypeUsingTypeCTuple

# syntax not yet supported
# ""break" outside loop"
testBreakOutsideLoop
testNoCrashOnBreakOutsideLoopFunction
testNoCrashOnBreakOutsideLoopClass
testContinueOutsideLoop
testInvalidGlobalDecl
testAssignToTypeDef
testSemanticAnalysisBlockingError

# "unknown encoding: uft-8"
testInvalidEncoding
testInvalidEncoding2
testInvalidEncoding3
testDoubleEncoding
testDoubleEncoding2
# coding: ascii
testDecodeErrorBlocker1-posix
testDecodeErrorBlocker2-windows
testDecodeErrorBlockerOnInitialRun-posix

# "Syntax error in type annotation"
# Suggestion: Use tuple[T1, ..., Tn] instead of (T1, ..., Tn)
testImplicitTuple2
# "Suggestion: Use tuple[()] instead of () for an empty tuple, or None for a function without a return value"
testReturnEmptyTuple
# "Suggestion: Is there a spurious trailing comma?"
testColumnSyntaxErrorInTypeAnnotation
# Syntax error in type comment, because used `# type:` twice
testErrorCodeTypeIgnoreMisspelled2

# invalid syntax, and therefore name errors, names should probably be Any
testModifyTwoFilesOneWithBlockingError1
testModifyTwoFilesOneWithBlockingError2
testModifyTwoFilesIntroduceTwoBlockingErrors

# All of these are really not important at all, because there are syntax
# errors, just not the fancy ones.
# Too many invalid syntax errors?
testInvalidFunction
testInvalidFuncDefArgs3
testInvalidFuncDefArgs4
testExceptCommaInPython3
# "unexpected indent"
testUnexpectedIndent
testInconsistentIndent
# "unindent does not match any outer indentation level"
testInconsistentIndent2
# "unexpected EOF while parsing"
testUnexpectedEof
testParseErrorInExtendedSlicing
testParseErrorInExtendedSlicing2
testParseErrorInExtendedSlicing3
# "positional argument follows keyword argument"
testInvalidKeywordArguments1
# "positional argument follows keyword argument unpacking"
testInvalidKeywordArguments2
# "named arguments must follow bare *"
testInvalidBareAsteriskAndVarArgs4
testInvalidBareAsterisk1
testInvalidBareAsterisk2
# "non-default argument follows default argument"
testInvalidFuncDefArgs1
# "invalid syntax. Perhaps you forgot a comma?"
testNotAsBinaryOp
testBinaryNegAsBinaryOp
testErrorCodeSyntaxError
testUpdateClassReferenceAcrossBlockingError
testAddFileWithBlockingError
testBlockingErrorRemainsUnfixed
testDeleteFileWithBlockingError-only_when_nocache
testDeleteFileWithBlockingError2-only_when_cache
testModifyFileWhileBlockingErrorElsewhere
testInitialBlocker
# "cannot delete function call"
testInvalidDel1
# "cannot delete expression"
testInvalidDel2
# "cannot assign to function call here. Maybe you meant '==' instead of '='?"
testInvalidLvalueWithExplicitType
testInvalidTypeDeclaration
# "Cannot assign to literal"
testInvalidWithTarget
# "cannot assign to literal here. Maybe you meant '==' instead of '='?"
testInvalidLvalues*
testInvalidTypeAnnotation2
# "cannot delete expression"
testDelMultipleThingsInvalid
# "Missing parentheses in call to 'print'. Did you mean print(1)?"
testPrintStatementInPython3
# "invalid character in identifier"
testSmartQuotes
# "expected ':'"
testParseError
testParseErrorMultipleTimes
testBlockingErrorWithPreviousError

# Needs lib-stub/blocker.pyi
testImportBringsAnotherFileWithBlockingError1
testImportBringsAnotherFileWithSemanticAnalysisBlockingError
testFixingBlockingErrorBringsInAnotherModuleWithBlocker

# "Not all union combinations were tried because there are too many unions"
testTooManyUnionsException

# - (with type vars) Overloaded function signatures 2 and 3 overlap with incompatible return types
#testOverloadMultipleVarargDefinitionComplex
#testOverloadPartialOverlapWithUnrestrictedTypeVar
#testOverloadPartialOverlapWithUnrestrictedTypeVarNested
#testOverloadedPartiallyOverlappingTypeVarsAndUnion
# Overlapping general
#testManyUnionsInOverload
#testOverloadInferUnionReturnFunctionsWithKwargs
#testOverloadWithOverlappingItemsAndAnyArgument5
#testIntersectionTypesAndVarArgs
#testLiteralInferredInOverloadContextWithTypevars
#testLiteralSubtypeOverlap
#testOverloadsAndNoneWithoutStrictOptional
#testOverloadsAndNoneWithStrictOptional
#testTypeTypeOverlapsWithObjectAndType
#testTypeOverlapsWithObject
#testAccessingGenericDescriptorFromInferredClass
#testAccessingGenericDescriptorFromClass
#testOverloadWithNonGenericDescriptorLookalike
#testOverloadWithGenericDescriptor
#testUnpackIterableClassWithOverloadedIter2
testErrorCodeUnsafeOverloadError

# Note ""<Foo>.__call__" has type "Callable[[Arg(str, 'x'), VarArg(int)], None]"
# Curently ignored

# Additional questionable cases of "Signatures of "__ior__" and "__or__" are incompatible"
testGenericOperatorMethodOverlapping2
testOverloadedNormalAndInplaceOperatorMethod

# Mypy is probably wrong here, but we might need to revisit
testConstructorJoinsWithCustomMetaclass

# Callable override https://github.com/python/mypy/issues/16549
testClassSpec
testClassSpecError

# `for ... in` type comment
testRefreshForWithTypeComment1
testRefreshForWithTypeComment2
testForStatementTypeComments
testForStatementMultipleTypeComments
testForIndex
testForIndexInClassBody
testErrorCodeSyntaxError3
testAsyncForTypeComments
# with type comment
testWithStmt
testWithStmtInClassBody
testWithStmtTypeComment
testWithStmtTupleTypeComment
testWithStmtComplexTypeComment
testAsyncWithTypeComments
testNewAnalyzerTypeArgBoundCheckDifferentNodes
testForwardRefsInWithStatement

# Type Vars qualified names
testQualifiedTypeVariableName
testPartiallyQualifiedTypeVariableName
testSerializeSimpleTypeVar
testSerializeBoundedTypeVar
testSerializeTypeVarWithValues
testSerializeTypeVarInClassBody

# "Access to generic class variables is ambiguous" (unimportant, because similar lint exists)
testClassVarWithGeneric
testClassVarWithNestedGeneric
# ""foo" is considered instance variable, to make it class variable use ClassVar[...]"
testSuggestClassVarOnTooFewArgumentsMethod

# Create a class with a base class based on Type[..] of self.foo
testNewAnalyzerUnsupportedBaseClassInsideFunction

# My own hard/special tests
class_context_super_class
namedtuple__new__
generic_method_on_class_access_no_overload
generic_method_on_class_access_overload
type_type_alias_circular

# Weird native types of mypy like `from mypy_extensions import i64, i32`
testNativeIntTypes

# Won't support for now --show-error-code-links
testShowErrorCodeLinks

# Won't support for now: "t" is a type variable and only valid in type context
testExpressionRefersToTypeVariable

# Won't support for now: "Use `from typing_extensions import _FutureFeatureFixture` instead"
testTypingExtensionsSuggestion

# Probably won't support: invalid version numbers for # flags: --python-version 3.99
testFeatureVersionSuggestion

# Probably won't support: typing._promote
testListWithDucktypeCompatibility
testListWithDucktypeCompatibilityAndTransitivity
testSimpleDucktypeDecorator
testDucktypeTransitivityDecorator
testOverloadingAndDucktypeCompatibility

# Probably won't support: Type comments for params
testFastParsePerArgumentAnnotations
testFastParsePerArgumentAnnotationsWithReturn
testFastParsePerArgumentAnnotationsWithAnnotatedBareStar
testFastParsePerArgumentAnnotationsWithReturnAndBareStar

# Tuple comment syntax: Incompatible number of tuple items
testVariableDeclWithInvalidNumberOfTypes
testVariableDeclWithInvalidNumberOfTypesNested
testVariableDeclWithInvalidNumberOfTypesNested2
testVariableDeclWithInvalidNumberOfTypesNested4
# Tuple comment syntax: tuple type expected for multiple variables
testVariableDeclWithInvalidType
testVariableDeclWithInvalidNumberOfTypesNested3
testVariableDeclWithInvalidNumberOfTypesNested5
# Won't support: Signature Comments
testIncompatibleSignatureInComment
testFunctionSignatureAsComment
testMethodSignatureAsComment
testVarArgsAndCommentSignature
testKeywordArgumentAndCommentSignature
testKeywordArgumentAndCommentSignature2
testKeywordVarArgsAndCommentSignature
testWrongNumberOfArguments
testNestedFunctionInMethodWithTooFewArgumentsInTypeComment
testDeepNestedFunctionWithTooFewArgumentsInTypeComment
testDeepNestedMethodInTypeComment
testEllipsisWithArbitraryArgsOnBareFunctionWithKwargs
testEllipsisWithArbitraryArgsOnBareFunctionWithVarargs
testEllipsisWithSomethingAfterItFails
testEllipsisWithSomethingBeforeItFails
testMethodDefaultArgumentsAndSignatureAsComment
testDefaultArgumentsAndSignatureAsComment
testLiteralInsideOtherTypesTypeCommentsPython3
testLiteralInvalidTypeComment
testLiteralInvalidTypeComment2
testInferOptionalFromDefaultNoneComment
testNoInferOptionalFromDefaultNoneComment
testCheckUntypedDefsSelf1
testOperatorDoubleUnionDivision
testFasterParseTooManyArgumentsAnnotation
testFasterParseTooFewArgumentsAnnotation
testFastParserShowsMultipleErrors
testFastParserConsistentFunctionTypes
testErrorCodeInvalidCommentSignature
testErrorCodeIgnoreAfterArgComment
testColumnsMethodDefaultArgumentsAndSignatureAsComment
testColumnTypeSignatureHasTooFewArguments
testInvalidSignatureInComment*
testDuplicateSignatures1
testDuplicateSignatures2
testTooManyTypes
testTooFewTypes
testCommentFunctionAnnotationVarArgMispatch-skip
testCommentFunctionAnnotationVarArgMispatch2-skip
testErrorCodeSyntaxError2
testFastParseFunctionAnnotationSyntaxError
testFastParseFunctionAnnotationSyntaxErrorSpaces
testFastParseInvalidFunctionAnnotation

# --scripts-are-modules
testScriptsAreModules

# --custom-typeshed-dir 
testIgnoreErrorsFromTypeshed

# cmd: mypy ...
testNonExistentFileOnCommandLine1
testInlineConfigFineGrained1
testInlineConfigFineGrained2
testNoCrashOnDeletedWithCacheOnCmdline
testFollowImportsNormalSearchPathUpdate-only_when_nocache
testFollowImportsNormalSearchPathUpdate2-only_when_cache
testAddNonPackageSubdir
testAddPackage5

# Won't support: __eq__ called directly with a keyword argument (which is actually legal)
testMagicMethodPositionalOnlyArg
testMagicMethodPositionalOnlyArgFastparse

# Won't support: reveal_locals
testRevealLocalsFunction
testRevealLocalsOnClassVars
testRevealLocals

# Won't support: Warning about wrong usage of type var values
testObsoleteTypevarValuesSyntax

# Won't support ever: Union Pipe "|" not allowed in 3.9
testUnionOrSyntaxWithinRuntimeContextNotAllowed
testUnionOrSyntaxWithinRuntimeContextNotAllowed2
testUnionOrSyntaxMissingFutureImport
testTypeAliasNotSupportedWithNewStyleUnion

# Won't support ever: Mypy test case details
testNewAnalyzerIncompleteFixture

# Won't support ever: python 2
testMypyPathAndPython2Dir
# Won't support: Python 3.7 specialties
testGenericBuiltinWarning
testGenericBuiltinSetWarning
testGenericCollectionsWarning
testNoSubcriptionOfStdlibCollections
# Won't support: Python 3.8 specialties
testTupleWithDifferentArgsPy38
# Won't support Pyhton 3.9 specialities
testDataclassWithMatchArgsOldVersion
testUnionOrSyntaxInIsinstanceNotSupported

# Won't support list/dict/tuple "is not subscriptable" (python <3.10)
testNoSubscriptionOfBuiltinAliases
testDataclassWithSlotsArgBefore310

# Won't support --disable-recursive-aliases
testNewAnalyzerAliasToNotReadyDirectBase
testNewAnalyzerAliasToNotReadyDirectBaseFunction
testNewAnalyzerNewTypeForwardClassAliasDirect
testNewAnalyzerForwardTypeAliasInBase
testRecursiveForwardReferenceInUnion
testRecursiveAliasesErrors1
testRecursiveAliasesErrors2
testJSONAliasApproximation
testCrashOnSelfRecursiveNamedTupleVar
testSimpleSelfReferentialNamedTuple
testSelfRefNT1
testSelfRefNT2
testSelfRefNT3
testSelfRefNT4
testSelfRefNT5
testRecursiveNamedTupleInBases
testSubclassOfRecursiveNamedTuple
testSelfRecursiveTypedDictInheriting
testSubclassOfRecursiveTypedDict
testCorrectJoinOfSelfRecursiveTypedDicts

# Won't support --force-union-syntax
testOptionalErrorSyntax
testLiteralUnionErrorSyntax
testLiteralOptionalErrorSyntax

# Mypy test case issues
# https://github.com/python/mypy/issues/13102
testNewAnalyzerMoreInvalidTypeVarArgumentsDeferred

# Not working in interpreter
# Recursive class inheritance
testNewAnalyzerAliasToNotReadyNestedClass

# "Recursive types are not allowed at function scope"
testNoRecursiveTuplesAtFunctionScope
testRecursiveBoundFunctionScopeNoCrash
testNewAnalyzerReportLoopInMRO2

# Won't support: Mypy internals
testIncrCacheBustedProtocol
testIncrementalBustedFineGrainedCache1
testIncrementalBustedFineGrainedCache3
testInvalidateCachePart

# Won't do, because too many differences because of different stubs
testDivmod
# xfail
testOpWithInheritedFromAny-xfail
# Skips
testSubtypingWithTypeImplementingGenericABCViaInheritance2-skip
testOverloadInferringArgumentsUsingContext2-skip
testUnionTwoPassInference-skip
testLiteralErrorsWhenInvoked-skip
testWeirdRecursiveInferenceForProtocols-skip
