testPositionalAndKeywordForSameArg
testGenericTypeWithTypevarValuesAndSubtypePromotion

# Overloading
*Overload*
# Overloading generated messages that were not necessary
testSubtypingIterableUnpacking1
testSubtypingIterableUnpacking2

# Not matching type vars
testJoinUnionWithUnionAndAny

# Type mismatches for x[Any] | int and x[int] | int
testAssignUnionWithTenaryExprWithEmptyCollection

# Duplicate in Union
testUnionMethodCalls

# Duplicate base class
testIncludingBaseClassTwice

# Cycles
testCyclicUndefinedImportWithName
testCyclicUndefinedImportWithStar1
testCyclicUndefinedImportWithStar2
testNewAnalyzerTypeAnnotationCycle4
testNewAnalyzerAliasToNotReadyMixed
testNewAnalyzerVarTypeVarNoCrashImportCycle
testNewAnalyzerFuncTypeVarNoCrashImportCycle
testRecursiveForwardReferenceInUnion
# Class generics cycles / + type alias cycles
testNewAnalyzerAliasToNotReadyDirectBase
testNewAnalyzerAliasToNotReadyDirectBaseFunction
testNewAnalyzerForwardTypeAliasInBase
testRecursiveAliasesErrors*
testJSONAliasApproximation

# Module Values
testModuleImplicitAttributes

# Type Var Value in func
testCheckGenericFunctionBodyWithTypeVarValues
testCheckGenericFunctionBodyWithTypeVarValues2
testTypeInferenceAndTypeVarValues
testTypeDeclaredBasedOnTypeVarWithValues
testTypeVarValuesAndNestedCalls
testGenericTypeWithTypevarValuesAndTypevarArgument
testGenericTypeBodyWithTypevarValues
testAttributeInGenericTypeWithTypevarValues*
testMultipleClassTypevarsWithValues1
testGenericFunctionWithNormalAndRestrictedTypevar
testDefineAttributeInGenericMethodUsingTypeVarWithValues
testTypevarValuesSpecialCase1

testTypeVarValuesFunction
testTypeVarValuesMethod1
testTypeVarValuesMethod2

# Bound with Union: Item "{}" of the upper bound "{}" of type variable "{}" has no attribute "{}"
testTypeVarBoundToOldUnionAttributeAccess
testTypeVarBoundToNewUnionAttributeAccess

# Nested type vars
testInnerFunctionWithTypevarValues
testInnerFunctionMutualRecursionWithTypevarValues

# Type Var overrides
testTypeInferenceWithCalleeVarArgs
testTypeInferenceWithCalleeVarArgsAndDefaultArgs

# Type variable "C.T" cannot be used as an expression
testClassMemberTypeVarInFunctionBody

# Type[T] TypeVars -> Indirect class access
testTypeVarWithAnyTypeBound

# Type Var Inference bottom up
testBoundOnGenericClass

# Type var self and access
testInheritanceFromGenericWithImplicitDynamic
testInheritanceFromGenericWithImplicitDynamicAndExternalAccess

# Type var formatting as nothing
testInheritedConstructor

# Literal
testNewAnalyzerBool
testNoneHasBool
testNoneHasBoolShowNoneErrorsFalse

# int -> float promotion
testNewAnalyzerPromotion
testProhibitUsingVariablesAsTypesAndAllowAliasesAsTypes
testSimplifyingUnionAndTypePromotions
testFlattenTypeAliasWhenAliasedAsUnion

# Class in Class
testNewAnalyzerNestedClass*
testNewAnalyzerAliasToNotReadyNestedClass*
testNestedClassOnAliasAsType

# Class in function
testNewAnalyzerClassInFunction
testNewAnalyzerNestedClassInMethod
testNewAnalyzerDeeplyNestedFunctions
testNewAnalyzerUnsupportedBaseClassInsideFunction
testInfiniteLoop

# Class: generic access from outside
testAliasRefOnClass
# Class alias with class type var prohibited
testProhibitBoundTypeVariableReuseForAliases

# Property
testNonMethodProperty
testInvalidArgCountForProperty
testNewAnalyzerProperty
testNewAnalyzerNoCrashOnCustomProperty

# classmethod
testAliasToClassMethod
testGenericClassMethod*
testClassmethodAndNonMethod
testAddBaseClassMethodCausingInvalidOverride
testModifyBaseClassMethodCausingInvalidOverride
testClassImportAccessedInMethod
testSelfTypeVarIndexExpr
testNewAnalyzerTypeVarBoundInCycle

# staticmethod
testStaticmethodAndNonMethod
testBoundStaticMethod

# NamedTuple
*NamedTuple*
testNewAnalyzerTupleIteration
testDistinctTypes
testInfiniteLoop2
testNewAnalyzerTypeArgBoundCheckDifferentNodes

# Cast
testInvalidCast*
testInvalidNumberOfArgsToCast
testInvalidKindsOfArgsToCast
testNewAnalyzerCastForward*
testCastConfusion
# NoReturn
testNoReturnTypeAlias
testUnionWithNoReturn

# Type application vs. type declaration
testNewAnalyzerAliasToNotReadyClassDoubleGeneric

# Incomplete Unions: `int | int`
testNewAnalyzerForwardAliasFromUnion
# Union simplification
testUnionSimplification*
testSimplifyingUnionWithTypeTypes2
testNewAnalyzerBuiltinAliasesFixed

# Union attribute error: Item "D" of "C | D" has no attribute "y"
testUnionAttributeAccess

# Union iter()
testUnionMultiassignSingle
testUnionMultiassignDouble
testUnionMultiassignGeneric
testUnionMultiassignAny
testUnionMultiassignNotJoin
testUnionMultiassignRebind
testUnionMultiassignAlreadyDeclared
testUnionMultiassignIndexed
testUnionMultiassignIndexedWithError
testUnionMultiassignPacked
testUnpackingUnionOfListsInFunction
testUnionOfVariableLengthTupleUnpacking
testUnionOfNonIterableUnpacking
testUnionAlwaysTooMany
testUnionAlwaysTooFew
testUnionUnpacking*
testNestedUnionUnpackingFromNestedTuples
testNestedUnionUnpackingFromNestedTuplesBinder
testUnpackUnionNoCrashOnPartialNone*

# Unpacking a string is disallowed
testStringDisallowedUnpacking

# BoundMethod class
testKwargsAllowedInDunderCall
testKwargsAllowedInDunderCallKwOnly

# Dynamic functions are not type checked?!
testNoInvalidTypeInDynamicFunctions
testCallGenericFunctionWithTypeVarValueRestrictionInDynamicFunc

# Comprehensions
testNewAnalyzerListComprehension
testNewAnalyzerDictionaryComprehension

# if sys.version
testNewAnalyzerVersionCheck*

# lambda
testNewAnalyzerVarTypeVarNoCrash

# Conditional definitions
testNewAnalyzerConditionalFunc*
testNewAnalyzerConditionallyDefineFuncOverVar

# isinstance flow analysis
testIsinstanceAndTypeVarValues*
testIsinstanceWithUserDefinedTypeAndTypeVarValues
testIsinstanceWithUserDefinedTypeAndTypeVarValues*
# isinstance & union
testUnion1
testUnion2
testUnion3
testUnionAnyIsInstance
testNestedUnionsProcessedCorrectly

# check after flow analysis
testAssignAnyToUnionWithAny

# All conditional function variants must have identical signatures (flow analysis)
testUnionOrderEquivalence

# Visibility of imports in pyi
testNewSemanticAnalyzerModulePrivateRefInMiddleOfQualified

# typing extensions
testInvalidUnpackTypes
testTypeVarTuple
testRuntimeProtoTwoBases

# mypy extensions
testFlexibleAlias*

# --show-error-context
testNewAnalyzerTypeArgBoundCheckWithContext

# Import stdlib
testSubclassingGenericABCWithImplicitAny
testSubclassingGenericABCWithImplicitAnyAndDeepHierarchy
testImplementingGenericABCWithImplicitAnyAndDeepHierarchy2
testInvariance

# Module __all__
testNewAnalyzerExportedValuesInImportAll
testExportedValuesInImportAll
testAllMustBeSequenceStr*
testUnderscoreExportedValuesInImportAll
testReExportAllInStub

# Module <M> has no attribute <missing_name>; maybe <name>
testNewAnalyzerTypeAnnotationCycle3
testModuleAttributeTwoSuggestions
testModuleAttributeThreeSuggestions

# Unexpected keyword argument "otter" for "f"; did you mean "other"?
testKeywordMisspelling
testMultipleKeywordsForMisspelling
testKeywordMisspelling*

# Import submodules
testNewAnalyzerImportStarSpecialCase

# Submodule was not imported
testSubmoduleImportFromDoesNotAddParents
testSubmoduleMixingImportFromAndImport

# import a.b.c issues
testMissingSubmoduleImportedWithIgnoreMissingImports*
testMissingSubmoduleOfInstalledStubPackage

# Complex Star import
testImportWithinMethod

# Module __getattr__
testNewAnalyzerModuleGetattrSerialize_incremental
testModuleLevelGetattr*
testModuleGetattr*
testModuleGetAttr*

# Module type does not contain module info
testMultiModuleAlias
testModuleAliasWithExplicitAnnotation

# namespace packages
testClassicNotPackage
testNamespacePackage*
testClassicPackageIgnoresEarlierNamespacePackage
testClassicPackageInsideNamespacePackage

# Stub Reexport
testNoReExportFromStubs*
testNoReExportChildStubs
testReExportChildStubs
testNoReExportNestedStub
testNoReExportFromMissingStubs
testMissingGenericImport

# Cannot assign multiple modules to name "..." without explicit "types.ModuleType" annotation
testModuleAliasRepeated
testModuleAliasRepeatedComplex
testModuleAliasToOtherModule
testModuleAliasToQualifiedImport2

# Import itself / Extremely weird import orders
testNewAnalyzerImportCycleWithIgnoreMissingImports
testNewAnalyzerImportFromTopLevelFunction
testNewAnalyzerImportFromTopLevelAlias
testNewAnalyzerImportAmbiguousWithTopLevelFunction
testReExportChildStubs
testReExportChildStubs2
testImportCycleSpecialCase
testPackagePath

# Multi definition ifs
testNewAnalyzerFirstAliasTargetWins
testNewAnalyzerFirstVarDefinitionWins

# Multiple arguments missing
testMissingPositionalArguments

# Redefinition
testGlobalVarRedefinition
testLocalVarRedefinition
testClassVarRedefinition
testMultipleClassDefinitions
testMultipleMixedDefinitions
testMultipleMethodDefinition
testMultipleNestedFunctionDef
testRedefineVariableAsTypevar
testRedefineTypevar*
testImportTwoModulesWithSameNameInFunction
testImportTwoModulesWithSameNameInGlobalContext
testTypeRedeclarationNoSpuriousWarnings
testDuplicateDef*
testTypeVarClassDup
testAliasDup
testImportFuncDup
testIgnoredImportDup
testNewAnalyzerRedefinitionAndDeferral*
testNewAnalyzerImportStarForwardRef*
testNewAnalyzerImportOverExistingInCycle*
testNewAnalyzerConditionalFunc
testNewAnalyzerConditionallyDefineFuncOverClass
testNewAnalyzerMissingImportErrors*
testNewAnalyzerDuplicateTypeVar*
testNewAnalyzerRedefineAsClass
testNewAnalyzerOverrideClassWithTypeAlias
testNewAnalyzerIdentityAssignment*
testProhibitReassigning*
testUnknownModuleRedefinition
testStarImportOverlappingMismatch
testStarImportOverridingLocalImports
testRedefineFunctionViaImport
testDifferentImportSameNameTwice

# BoundMethod type
testForwardReferenceToListAlias

# Metaclass
*Metaclass*
testNewAnalyzerClassKeywordsError
testNewAnalyzerNotAnAlias
testNewAnalyzerClassPropertiesInAllScopes

# Signature of "???" incompatible with supertype "???"
testKeywordOnlyArgumentOrderInsensitivity
testPositionalOverridingArgumentNamesCheckedWhenMismatchingPos
testOverrideGenericMethodInNonGenericClassLists
testOverrideGenericMethodInNonGenericClassGeneralize

# super
testSuperExpressionsWhenInheritingFromGenericType
testSuperExpressionsWhenInheritingFromGenericTypeAndDeepHierarchy
testSuperOutsideClass
testSuperField
testSuperBasics

# Liskov
*Liskov*
testPositionalOverridingArgumentNameInsensitivity
testOverridingMethodInSimpleTypeInheritingGenericType
testOverridingMethodInGenericTypeInheritingSimpleType
testOverridingMethodInMultilevelHierarchyOfGenericTypes
testOverridingMethodInGenericTypeInheritingGenericType
testSubclassingGenericABC1
testSubclassingGenericABCWithDeepHierarchy
testSubclassingGenericABCWithDeepHierarchy2

# Function Subtyping
testSubtypingFunction*
testLackOfNames
testLackOfNamesFastparse
testFunctionTypeCompatibilityWithOtherTypes
testVarArgsFunctionSubtyping

testGenericFunctionSubtypingWithTypevarValues

# flow graph
testAssignAndConditional*
testRedefineImportedFunctionViaImport
testImportedVariableViaImport

# syntax errors
testPreferPackageOverFile
testPreferPackageOverFile2

# "Cannot determine type of"
testThreePassesRequired

# *args input
testInvalidTypevarValues
testCallVarargsFunctionWithIterable
testCallVarargsFunctionWithTwoTupleStarArgs
testCallVarargsFunctionWithIterableAndPositional
testCallVarargsFunctionWithTupleAndPositional
testCallingWithListVarArgs
testCallingWithTupleVarArgs
testInvalidVarArg
testCallingVarArgsFunctionWithListVarArgs
testCallingVarArgsFunctionWithTupleVarArgs
testDynamicVarArg
testListVarArgsAndSubtyping
testCallerVarArgsAndDefaultArgs
testVarArgsAfterKeywordArgInCall*
testVarArgsEmptyList
testVarArgsEmptyTuple
testIntersectionTypesAndVarArgs
testCallerVarArgsListWithTypeInference
testCallerVarArgsTupleWithTypeInference
testCallerVarargsAndComplexTypeInference
testCallerTupleVarArgsAndGenericCalleeVarArg
testInvariantTypeConfusingNames2

# **kwargs input
testKwargsAfterBareArgs
testCallingFunctionWithKeywordVarArgs
testPassingMappingForKeywordVarArg
testPassingMappingSubclassForKeywordVarArg
testInvalidTypeForKeywordVarArg
testPassingKeywordVarArgsToNonVarArgsFunction
testBothKindsOfVarArgs
testPassingMultipleKeywordVarArgs
testPassingKeywordVarArgsToVarArgsOnlyFunction
testCallsWithStars
testCallStar2WithStar
testStarArgsAndKwArgsSpecialCase
testPassingEmptyDictWithStars
testKeywordUnpackWithDifferentTypes

# {**kwargs}
testSubtypingMappingUnpacking1
testSubtypingMappingUnpacking2
testSubtypingMappingUnpacking3
testNotDirectIterableAndMappingSubtyping

# "???" does not return a value
testCallingVarArgsFunction

# Implicit Param Option X = None -> Optional[X] inference
testCallingVarArgsFunctionWithDefaultArgs
testOneOfSeveralOptionalKeywordArguments
testKeywordArgAfterVarArgs
testKeywordArgAfterVarArgsWithBothCallerAndCalleeVarArgs

# Option[X] <-> Union[X, None] mixups
testOptional

# Implicit any param
testKwargsArgumentInFunctionBodyWithImplicitAny

# Decorators
*Deco*
testVarArgsCallableSelf

# https://github.com/python/mypy/issues/13102
testNewAnalyzerMoreInvalidTypeVarArgumentsDeferred

# fine-grained
testTypeAliasRefresh
testReprocessMethodShowSource
testVariableTypeBecomesInvalid
testIgnoreWorksAfterUpdate
testIgnoredAttrReprocessedMeta
testDataclass*
testAttrs*
testAddBaseClassAttributeCausingErrorInSubclass
testChangeBaseClassAttributeType
testConstructorSignatureChanged2
testConstructorSignatureChanged3
testReprocessMethodInNestedClassSemanal
testPreviousErrorInMethodSemanalPass3
*python2
testErrorInTypeCheckSecondPassThroughPropagation
*PartialType*
testRefreshGenericSubclass
*NewType*
*Enum*
*TypedDict*
testAliasFineNormalClassBases
testAliasFineGenericToNonGeneric
testAliasFineClassToAlias
testAliasFineAliasToClass
testAliasFineInitGenericMod
testAliasFineInitGenericFunc
testFineGrainedCallable
testRefreshSubclassNestedInFunction2
testSkippedClass*
testReprocessCallableArg
testImplicitTuple2
testImplicitTuple3
*GenericFineCallable*
*Abstract*
testChangeTypeVarToFunction
testChangeTypeVarToModule
testRefreshGenericClass
testChangeTypeVarToTypeAlias
testRefreshNestedClassWithSelfReference
testNonExistentFileOnCommandLine*
*DunderNew*
*Protocol*
*Yield*
testUnpackInExpression3-only_when_nocache
*Await*
test__aiter__and__anext__
*Async*
*RefreshIgnore*
testRefreshOptions
*ImportOnTopOfAlias*
testRefreshForWithTypeComment1
testRefreshForWithTypeComment2
*Final*
testIfTypeCheckingUnreachableClass
testAliasForwardFunction*
testLiteral*
testInlineConfigFineGrained*
testWrongNumberOfArguments
*NewAnalyzer
testIsInstanceAdHocIntersectionFineGrainedIncremental*
testStubFixupIssues
testDunderCallAddition

# check-generic-alias test stuff
testGenericAliasImportRe
testGenericAliasCollectionsABCReveal

# check-generics
testGenericMethodReturnType
testGenericMethodArgument
testGenericMemberVariable
testGenericMemberVariable2
testSimpleGenericSubtyping
testGenericTypeCompatibilityWithAny
testGenericTypeBody1
testOperatorAssignmentWithIndexLvalue1
testTypeApplicationCrash
testGenericTypeAliasesBasic2
testGenericTypeAliasesUnion
testGenericTypeAliasesCallable
testGenericTypeAliasesPEPBasedExample
testGenericTypeAliasesImporting
testGenericTypeAliasesImportingWithoutTypeVar
testAliasesInClassBodyNormalVsSubscripted
testGenericTypeAliasesRuntimeExpressionsInstance
testGenericTypeAliasesTypeVarBinding
testGenericTypeAliasesTypeVarConstraints
testGenericTypeAliasesIgnoredPotentialAlias
testNoSubscriptionOfBuiltinAliases
testImportedTypeAliasInRuntimeContext
testMultipleAssignmentWithList*
# scoping in check-generics
testClassLevelTypeVariable
testGenericInnerClass
testGenericClassInnerFunctionTypeVariable
testFunctionInGenericInnerClassTypeVariable-skip
# function subtyping
testSubtypingWithGenericFunctions
testSubtypingWithGenericInnerFunctions
testSubtypingWithGenericFunctionUsingTypevarWithValues
# callable
testIdentityHigherOrderFunction*
# special cases
testGenericFunctionsWithUnalignedIds
testTypeVariableWithContainerAndTuple
testGenericOperatorMethodOverlapping*
testCallTypeTWithGenericBound
testQualifiedTypeVariableName
testPartiallyQualifiedTypeVariableName
testGenericClassClsNonGeneric
testGenericClassUnrelatedVars
testGenericClassInGenericFunction*
testGenericClassDirectCall
testGenericClassAlternativeConstructorPrecise*
testNoGenericAccessOnImplicitAttributes
testGenericClassAttrUnboundOn*
testGenericClassPropertyBound
testGenericClassInsideOtherGenericClass
testGenericFunctionMemberExpand
testGenericJoin*

# semanal-errors
testInvalidNumberOfGenericArgsInTypeDecl
# syntax not yet supported
testBreakOutsideLoop
testContinueOutsideLoop
testInvalidGlobalDecl
testAssignToTypeDef
# parser shit
testInvalidLvalues*
testTwoStarExpressions*
testStarExpressionRhs
testStarExpressionInExp
testInvalidDel*
testInvalidTypeDeclaration
testIndexedAssignmentWithTypeDeclaration
testInvalidLvalueWithExplicitType
testInvalidLvalueWithExplicitType3
testInvalidWithTarget
testInvalidTypeAnnotation2
# whatever
testTestExtendPrimitives
testInvalidTypeWithinNestedGenericClass
testTypevarWithType
# Scoping
testListComprehensionSpecialScoping

# parser recovery in type comments / types in string literals
testInvalidStrLiteralSpaces
testInvalidStrLiteralStrayBrace
testInvalidMultilineLiteralType

# Typing stuff
testInvalidAssertType
testInvalidAnyCall
testInvalidTypeInTypeApplication
testParamSpec
testBaseClassAnnotatedWithoutArgs
*Pep613

# Global
testAssignToFuncDefViaGlobalDecl2

# Nonlocal
*NonlocalDecl*
testNonlocalAndGlobalDecl
testNewAnalyzerRedefinedNonlocal

# __init__ None needed
testInitReturnTypeError

# need annotation
testNewAnalyzerLessErrorsNeedAnnotation*

# Separate formatting for ambigous names???
testIncompatibleAssignmentAmbiguousShortnames

# Invariant note
testAssignmentInvariantNoteForList
testAssignmentInvariantNoteForDict
testInvariantListArgNote
testInvariantDictArgNote
testCallGenericFunctionWithTypeVarValueRestrictionUsingContext

# Type execution
testNoneAlias
testNoneAliasStrict

# Wtfs
testEmptyTupleTypeAlias
testOverrideByIdemAliasCorrectType
testOverrideByIdemAliasCorrectTypeReversed
testConditionalExceptionAlias

# weird files
testScriptsAreNotModules

# Formatting qualified name
testSubmoduleMixingImportFromAndImport
testSubmoduleMixingImportFromAndImport2
testErrorFromGoogleCloud
testStubPackageSubModule

# Formatting func in reveal_type
testForwardTypeAlias
testForwardTypeAliasGeneric
testAliasToTupleAndCallable
testAliasInImportCycle3
testTypeCheckPrio
testImportStarAliasCallable
testSimplifyUnionWithCallable
testNewAnalyzerTypeVarForwardReferenceErrors

# Formatting class in reveal_type
testReExportChildStubs3
testImportFromReExportInCycleUsingRelativeImport1
testImportReExportInCycleUsingRelativeImport2
testNewAnalyzerShadowOuterDefinitionBasedOnOrderSinglePass
testNewAnalyzerShadowOuterDefinitionBasedOnOrderTwoPasses
testNewAnalyzerPlaceholderFromOuterScope

# Formatting Module as types ("ModuleType" instead of Module)
testInvalidOperationsOnModules
testConditionalImportAndAssignInvalidToModule
testModuleAliasRepeatedWithAnnotation

# Tuple iter
testNewAnalyzerFallbackUpperBoundCheckAndFallbacks

# Tuple type comments
testVariableDeclWithInvalidNumberOfTypes*
testVariableDeclWithInvalidType
testChainedAssignmentAndImports
testCallingVariableWithFunctionType
testAccessingMethodInheritedFromGenericType
testAccessingMethodInheritedFromGenericTypeInNonGenericType
testAccessingMemberVarInheritedFromGenericType
testSubtypingWithTypeImplementingGenericABCViaInheritance
testSubtypingAndABCExtension
testAccessingGenericABCMembers
testAccessingInheritedGenericABCMembers
testMultipleAssignmentAndGenericSubtyping

# Weird ellipsis assignment
testEllipsisInitializerInStubFileWithType
testEllipsisDefaultArgValueInStub2
testEllipsisDefaultArgValueInNonStub
testEllipsisDefaultArgValueInNonStubsMethods

# strict optional
*StrictOptional*
testAssignToFuncDefViaImport
testUnionWithNoneItem
testBoundHigherOrderWithVoid

# Very weird annotation resolution order
testNewAnalyzerAnnotationConflictsWithAttributeSinglePass
testNewAnalyzerAnnotationConflictsWithAttributeTwoPasses
testNewAnalyzerNameConflictsAndMultiLineDefinition

# pyproject.toml
testMultipleModulesInOverridePyProjectTOML
testIgnoreErrorFromMissingStubs1
testIgnoreErrorFromMissingStubs2

# --disallow-any-expr
testDoNotLimitErrorVolumeIfNotImportErrors
testUnlimitedStubErrorVolume

# --follow-imports=error
testImportSuppressedWhileAlmostSilent
testAncestorSuppressedWhileAlmostSilent

# Not all modules are checked in mypy: `# cmd: mypy -m m`
testTypeCheckNamedModule4
testTypeCheckNamedModule5
testTypeCheckNamedModuleWithImportCycle
testStubImportNonStubWhileSilent

# --soft-error-limit
testLimitLegacyStubErrorVolume

# Won't support for now:
testExpressionRefersToTypeVariable

# Won't support: Signature Comments
testIncompatibleSignatureInComment
testFunctionSignatureAsComment
testMethodSignatureAsComment
testVarArgsAndCommentSignature
testKeywordArgumentAndCommentSignature
testKeywordArgumentAndCommentSignature2
testKeywordVarArgsAndCommentSignature

# --scripts-are-modules
testScriptsAreModules

# Won't support: Warning about wrong usage of type var values
testObsoleteTypevarValuesSyntax

# Won't support ever: Mypy test case details
testNewAnalyzerIncompleteFixture

# Won't support ever: python 2
testMypyPathAndPython2Dir

# Skips
testTrailingCommaParsing-skip
testSubtypingWithTypeImplementingGenericABCViaInheritance2-skip
