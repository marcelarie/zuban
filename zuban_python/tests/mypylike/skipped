# Next up
testBadEnumLoading
testInvalidNamedTupleWithinFunction
testVariadicUnpackWithRegularInstance
testMisguidedSetItem
testTypeshedRecursiveTypesExample
testRecursiveAliasBasicGenericInference

testTwoUncomfortablyIncompatibleProtocolsWithoutRunningInIssue9771

# callable matching regression
testNoCrashOnNestedGenericCallable

# mypy upgrade
testMultilineQuotedAnnotation
testDataclassFieldWithPositionalArguments
testCanCreateClassWithFunctionBasedTypedDictBase
testTypeVarTupleInvariant
testInitTypedDictFromType
testInitTypedDictFromTypeGeneric
testUnpackNewSyntaxInvalidCallableAlias
testYieldFromUnionOfGenerators
testYieldFromInvalidUnionReturn
testYieldFromUnionOfGeneratorWithIterableStr
testInvalidOverrideArgumentCountWithImplicitSignature4
testTypeVarIdsNested
testGenericUnionFunctionJoin
testTypeVariableClashErrorMessage
testOverrideErrorLocationNamed
testTypeApplicationGenericConstructor
testInvalidTypeVarParametersConcrete
testInvalidTypeVarParametersArbitrary
testOverloadedGenericInit
testAliasInstanceNameClash
testInferTupleType
testNameUndefinedErrorDoesNotLoseUnpackedKWArgsInformation
testTypeVarTupleOverloadOverlap
testTypeVarTupleTypeApplicationOverload
testDescriptorAccessForUnionOfTypesWithNoStrictOptional
testLambdaNoReturn

# TypeAliasType
testTypeAliasType
testTypeAliasTypeInvalid
testTypeAliasTypeGeneric
testTypeAliasTypeInvalidGeneric
testTypeAliasTypeNoUnpackInTypeParams311

# super with Type[...]
testSuperWithAny
testSuperInClassMethod
testSuperClassGetItem
testInvalidFirstSuperArg
testWrongSuperOutsideMethodNoCrash
testSuperWithTypeObjects
testSuperWithTypeTypeAsSecondArgument
# "super() outside of a method is not supported"
testSuperOutsideMethodNoCrash
# "super() requires one or more positional arguments in enclosing function"
testSuperInMethodWithNoArguments
# How do we deal with super() and Self or self type vars?
testSuperSelfTypeInstanceMethod
testSuperSelfTypeClassMethod
testTypingSelfOnSuperTypeVarValues
testSelfTypeSuper
testMixinProtocolSuper
# Super in classmethod or __new__
testSuperWithNew
testSuperNew
testMetaclassAndSuper

# functools.total_ordering
testTotalOrderingEqLt
testTotalOrderingLambda
testTotalOrderingReturnNotBool
testTotalOrderingAllowsAny
testTotalOrderingWithForwardReference

# Overload class self variable matching (__init__ against __init__)
testUnpackIterableClassWithOverloadedIter
testUnpackIterableClassWithOverloadedIter2
# Overload union math for __init__
overload_union_math_on_class_init_constrained
# union math vs. type var
testOverloadDetectsPossibleMatchesWithGenerics
testOverloadsAndNoReturnNarrowWhenBlacklistingSubtype
testOverloadsAndNoReturnNarrowWhenBlacklistingSubtype2
# overload *args should be used if a list of never/any is given?
testOverloadVarargsSelection
# overload Any unclear why Mypy decides like this
testTypeVarTupleOverloadMatch
# overload x should be preferred over an *x alternative
testTupleOverloadZipAny
# - Overload does not consistently use the "@classmethod" decorator on all function signatures
# - Overload does not consistently use the "@staticmethod" decorator on all function signatures
testOverloadWithInconsistentStaticMethods
# - Condition cannot be inferred, unable to merge overloads
testOverloadIf*
# Overloads are detected in name binder (imports can not be there)
testVeryBrokenOverload
testVeryBrokenOverload2
# - The implementation for an overloaded function must come last
testInconsistentOverload
testInconsistentOverload2
# Non consecutive overloads
testNonconsecutiveOverloads
testNonconsecutiveOverloadsMissingFirstOverload
testNonconsecutiveOverloadsMissingLaterOverload
# overload variant formatting
testSpecialCaseEmptyListInitialization2

# Union/addition of empty lists dicts sets with used ones
testOrOperationWithGenericOperands
testOrOperationInferredFromContext
testOperatorWithEmptyListAndSum
testInWithInvalidArgs
# ternary context inference
testUnificationEmptyListLeft
testUnificationEmptyListRight
testUnificationEmptySetLeft
testUnificationEmptyDictLeft
testUnificationEmptyDictRight
testUnificationDictWithEmptyListLeft
testUnificationDictWithEmptyListRight
testTernaryWithNone
testOptionalTypeNarrowedByGenericCall5
testNoneListTernary
testIsinstanceInInferredLambda
testConditionalExpressionWithEmptyListAndUnionWithAny
testConditionalExpressionWithEmptyIteableAndUnionWithAny

# recursive limits missing for joins / unions
testRecursiveAliasGenericInferenceNested
testRecursiveAliasTopUnion
testCrashInJoinOfSelfRecursiveNamedTuples
testGenericJoinRecursiveTypes
testRecursiveAliasWithRecursiveInstance
testTypeAliasUpdateNonRecursiveToRecursiveFine
testTypeAliasUpdateNonRecursiveToRecursiveCoarse
# Recursive Alias wrong type var inference --enable-recursive-aliases
testRecursiveAliasesJoins
# Recursive alias union type var inference --enable-recursive-aliases
testRecursiveAliasWithRecursiveInstanceInference
# Recursive alias class type aliases --enable-recursive-aliases
testRecursiveClassLevelAlias

# Type var finder recursion is not handled, because imports are involved.
testRecursiveAliasImported
# cycle for self.a = self.f(self.a) where f(T) -> T
testGenericTypeBody1
# C = C Cycle
testOverrideByIdemAliasCorrectType
testOverrideByIdemAliasCorrectTypeReversed
testConditionalExceptionAlias
testListAssignmentUnequalAmountToUnpack
testSelfReferentialSubscriptExpression
testNewAnalyzerMemberNameMatchesNamedTuple
testVariableTypeWithQualifiedName
testNewAnalyzerMemberNameMatchesTypedDict
testConditionalExceptionAliasOverride
testWalrusRedefined
# TypedDict definition circle: A = TypedDict('A', {'a': 'A'})
testCrashOnSelfRecursiveTypedDictVar
testBasicRecursiveTypedDictCall
testRecursiveTypedDictWithList
# dataclass circles with bound
testDataclassGenericWithBound
testNoCrashOnSelfWithForwardRefGenericDataclass

# Module attributes
testModuleImplicitAttributes
# class attributes
testImplicitClassScopedNames
# type.__init__ where self is implicitly Any
testTypeEquivalentTypeAnyEdgeCase

# Type var constraints not enforced in type alias
testValidTypeAliasValues
testValidTypeAliasValuesMoreRestrictive

# Tuple type comment definitions with list assignment
testMultipleAssignmentWithListsInInitialization
testAssignmentToStarAnnotation
# star input for tuple
testTupleWithStarExpr
# List literal inference that works like a tuple?
testInferringLvarTypesInNestedListAssignment
testNestedListAssignment
testNestedListAssignmentToTuple
# Tuple a, *li = ta: "List item 0 has incompatible type "A"; expected "int""
testAssignmentToStarFromTupleType
# empty tuple as iterator ("Need type annotation for "x"")
testAssignmentToStarMissingAnnotation
testForLoopOverEmptyTuple
# tuple unpack with lists like (x, y) = [1, ""]
testMultiModuleAlias

# Special-case type inference of empty collections https://github.com/python/mypy/pull/16122
testInferenceWorksWithEmptyCollectionsUnion
testWideOuterContextEmptyError
testWideOuterContextNoArgsError
testInferenceWorksWithEmptyCollectionsNested
testCallerVarargsAndComplexTypeInference

# WTF why is this base type not object/function?
testListLiteralWithNameOnlyArgsDoesNotEraseNames
# join of {1, *some_str_tuple} leads to int | str???
testUnpackInExpression2-only_when_nocache
# slightly different argument errors
testCallerVarArgsListWithTypeInference
# Self is confused. matcher needs to know Self from both sides.
testOverloadWithDerivedFromAny
testTypingSelfOverrideVarMulti
# Any base class now matches everything for union simplification
testUnionSimplificationSpecialCases2
# EnumMeta does not inherit from ABCMeta anymore: https://github.com/python/typeshed/pull/10577
testStrEnumCreation
testRegression12258
testDerivedEnumIterable
testEnumIterMetaInference
# Callable matching
testSubtypingGenericTypeObject
testParamSpecNoCrashOnUnificationPrefix
# Callable matching positional names ignored, but kwargs is there; mypy wrong?
testProtocolIncompatibilityWithUnionType
# dict questionable decisions
testDictWithStarStarExpr
testDictFromIterableAndStarStarArgs
testDictFromIterableAndStarStarArgs2
# Type variable "C.T" cannot be used as an expression
testClassMemberTypeVarInFunctionBody
testClassScopeImportWithError
# Type variable "__main__.Ts" is invalid as target for type alias
testTypeVarTupleIsNotValidAliasTarget
testGenericTypeAliasesWrongAliases
# Type var used in bound, defined in class body, bound to that class
testGenericClassAlternativeConstructorPreciseOverloaded
# current_class in i_s should probably be a type and not a class
testEnumNameWorkCorrectlyOn311
# Class/Function is still set in InferenceState/i_s
testAsyncForComprehensionErrors
testUnusedTargetNotImport
testFunctionForwardRefAlias
testTypeVarTuplePep646TypeVarStarArgs

# function type vars are not late bound in Mypy in params
testTypeVarTupleParamSpecInteraction
testParamSpecSubtypeChecking2
testParamSpecNestedApplyPosVsNamed
testTypeGuardAsGenericFunctionArg
testTypeIsAsGenericFunctionArg
# Callable remapping over overload leads to a mapped overload (this is special cased for only one arg and decorator like behavior, see also is_generic_decorator_overload_call)
testRegularGenericDecoratorOverload
testParamSpecDecoratorOverload
# Weird class type vars passing
testDefaultDict
# list element context inference should probably ignore type vars
testInferenceAgainstGenericCallableGenericNonLinear
# type var backtracking
testGenericFunctionSubtypingWithUnions
testUnionInference
testCrashOnComplexCheckWithNamedTupleNext
unite_type_vars_mypy_issue_5874
multiple_lambda_mypy_issue_4226
# type var backtracking for overloads if variant does not match
testMatchProtocolAgainstOverloadWithAmbiguity

# TypeVar defaults
testTypeVarDefaultsValid
testTypeVarDefaultsInvalid3
testTypeVarDefaultsClassRecursive1
testTypeVarDefaultsClassRecursiveMultipleFiles
testTypeVarDefaultsTypeAliasRecursive1
testTypeVarDefaultsTypeAliasRecursive2

# lambda infer callable after type params after it.
testParamSpecInferredFromLambda
testTypeGuardOverload
testTypeIsOverload
# lambda --new-type-inference
testPartialTypeContextWithTwoLambdas
testInferenceAgainstGenericLambdas
testGenericLambdaGenericMethodNoCrash
testUninferableLambda
testUninferableLambdaWithTypeError
# lambda context recursion
testRejectCovariantArgumentInLambda
# i_s missing current class
testLambdaDeferredSpecialCase
testLambdaDeferredCrash
# "Duplicate argument "x" in function definition"
testFastParserDuplicateNames
# Lambda inferred like (lambda x: x)(1)
testInferLambdaTypeUsingContext
# Generator in lambda
testNoCrashOnLambdaGenerator

# better meet/join
testJoinProtocolCallback
testMeetOfIncompatibleProtocols
testMeetProtocolCallback

# Nested type vars
testFunctionInGenericInnerClassTypeVariable-skip
testParamSpecTestPropAccess
testTupleAndDictOperationsOnParamSpecArgsAndKwargs
testUnpackingParamsSpecArgsAndKwargs
testParamSpecConcatenateFromPep
testNestedGenericFunctionTypeApplication
testIncrementalInnerClassAttrInMethodReveal
param_spec_with_identity_mypy_issue_12278

# Param spec invalid definitions
testInvalidParamSpecDefinitionsWithArgsKwargs
testInvalidParamSpecAndConcatenateDefinitionsWithArgsKwargs
testUnboundParamSpec
testParamSpecArgsAndKwargsMismatch
# Param spec invalid calls
testParamSpecInvalidCalls
# ParamSpec is not unbound if working like a T in Callable?
testTrivialParametersHandledCorrectly
# Class function Foo.bar something like a BoundFunction
testParamSpecConstraintOnOtherParamSpec
testExpandNonBareParamSpecAgainstCallable
# param spec new tests
testParamSpecClassConstructor
testParamSpecAliasInvalidLocations
testParamSpecAliasNested
testParamSpecArgumentParamInferenceRegular
testParamSpecApplyPosVsNamedOptional
testParamSpecConcatenateSelfType
testParamSpecCorrectParameterNameInference
testOverloadingWithParamSpec
testParamSpecGenericWithNamedArg1
testParamSpecGenericWithNamedArg2

# Are generics in self types always bound to the function?
# https://github.com/python/typing/discussions/1340
# https://github.com/python/mypy/issues/14729
testSelfTypeRestrictedMethodOverloadInit
# Self tests
testTypingSelfAttrOldVsNewStyle
testSelfTypeOnGenericClassObjectNewStyleBound
testVariadicClassNewStyleSelf
# "Method cannot have explicit self annotation and Self type"
testTypingSelfConflict
# "Self argument missing for a non-static method"
# "The erased type of self "None" is not a supertype of its class "__main__.A""
testSelfTypeNotSelfType
# Self in bound method shouldn't probably be there
testFunctionAssignedAsCallback
testErrorSettingCallbackWithDifferentFutureType

# NewType in function "A@6" as qualified name
testNewTypeInLocalScope
# class in class forward reference
testForwardReferenceToNestedClassWithinClass
testClassWithBaseClassWithinClass
testDeclarationReferenceToNestedClass
testNewAnalyzerNamedTupleCallNested
testNewAnalyzerNamedTupleCallNestedMethod
# class in function forward reference / type comment
testGenericClassWithinFunction
testGenericClassWithInvalidTypevarUseWithinFunction
testClassWithinFunction
testDeclareVariableWithNestedClassType
# function types in class body
testMethodRefInClassBody
testRefMethodWithDecorator
# Class argument and __init__ as overloaded DbType
testOverloadedToGeneric

# name binding of type definitions within function/class scopes
testSerializeNamedTupleInMethod4
testForwardBoundFunctionScopeWorks
testIncrementalNestedTypeAlias
testNewAnalyzerAnnotationConflictsWithAttributeSinglePass
testNewAnalyzerAnnotationConflictsWithAttributeTwoPasses
testNewAnalyzerNameConflictsAndMultiLineDefinition

# object.__new__(cls) -> Self where object.__new__(int) leads to Never
testOverride__new__AndCallObject
# __new__ return types with Never
testNewAndInitNoReturn
testOverloadedNewAndInitNoReturn

# Enum classmethod instance binding
testNewSetsUnexpectedValueType
# Self type classmethod access with type vars(no Self)
testSelfTypeClone
testNewAnalyzerTypeVarBoundInCycle
testSelfTypeVarIndexExpr
testSelfTypesWithParamSpecInfer
# classmethod self param in overload is not a self param
testOverloadClassMethodImplementation
# Recursion error wtf?
testRefMethodWithOverloadDecorator
# classmethod self type with overload
testSelfTypeClassMethodOverloadedOnInstance
SelfTypeOverloadedClassMethod
# "staticmethod" used with a non-method"
testStaticmethodAndNonMethod
# "classmethod" used with a non-method"
testClassmethodAndNonMethod
# "override" used with a non-method"
invalidExplicitOverride
# Error for staticmethod: "Overloaded function implementation does not accept all possible arguments of signature 1"
testOverloadWithSwappedDecorators2
testTypeVarTupleNewSyntaxCallables
# "Static methods cannot use Self type"
testTypingSelfClassMethod

# "The erased type of self "Type[__main__.A]" is not a supertype of its class "Type[__main__.B]""
testSelfTypeNonsensical
testSelfTypeNew
testSelfTypeNew_explicit

# dataclasses __slots__
testDataclassWithSlotsArg
# dataclass classmethod
testDataclassesClassmethods
testClassmethodShadowingFieldDoesNotCrash
testDeferredDataclassInitSignature
# InitVar set default
testDataclassInitVarCannotBeSet
# dataclass transform
updateDataclassTransformParameterViaDecorator
updateDataclassTransformParameterViaParentClass
updateBaseClassToUseDataclassTransform
frozenInheritanceViaDefault
testDataclassReplaceOptional
# dataclass weird replace case
testReplaceIsDataclass

# namedtuple unsure if we refactor it
testNamedTupleWithBoolNarrowsToBool
# __doc__ definitions
testNewNamedTupleDocString

# enum member gathering
testFinalWithMethodAssignment

# Recursive definitions
testRecursiveNamedTupleTypedDict
# Unpack
testUnpackKwargsInference
testUnpackKwargsParamSpec
# dict unpacking
testTypedDictUnpackFromUnion
testTypedDictUnpackUnionRequiredMissing
testTypedDictUnpackIncompatible
# Lookups
testTypedDictMappingMethods
testTypedDictAsStarStarArgCalleeKwargs
testTypedDictAsStarStarAndDictAsStarStar
testTypedDictNonMappingMethods
# Nested typed dict formatting
testSerializeTypedDictInMethod
# --extra-checks
testTypedDictUnpackStrictMode
testTypedDictStrictUpdate
testTypedDictFlexibleUpdateUnionStrict
testParamSpecConcatenateNamedArgs
testParamSpecPrefixSubtypingInvalidStrict
# unions
testTypedDictChainedGetWithEmptyDictDefault
# "Type of TypedDict is ambiguous, none of ("A", "B") matches cleanly"
testUnionOfEquivalentTypedDictsDistinct
testUnionOfEquivalentTypedDictsNested
testTypedDictUnionAmbiguousCaseNoMatch
# slightly different TypedDict.get signature than in mypy Is this relevant?
testTypedDictGetMethodInvalidArgs
# TypedDict |
testTypedDictWith__or__method
testTypedDictWith__or__method_error
testTypedDictWith__ror__method
testTypedDictWith__ior__method

# Protocol invariant matching for attributes
testPartialAttributeNoneTypeStrictOptional
# Protocol NamedTuple field issues
testTypingNamedTupleAttributesAreReadOnly
testNamedTupleWithNoArgsCallableField
testVariadicNamedTuple
# Protocol Self binding
testSelfTypesWithProtocolsBehaveAsWithNominal
testInferenceViaTypeTypeMetaclass
testSelfTypeProtocolClassmethodMatch
# Protocol Self binding recursion error
testRecursiveSelfTypeCallMethodNoCrash
# TypeVar in Protocol Body
testTypeVarInProtocolBody
# "Type aliases are prohibited in protocol bodies"
testTypeAliasInProtocolBody
# small protocol formatting issues
testParamSpecPrefixSubtypingProtocolInvalid
# Protocols mypy might be wrong?
testMutuallyRecursiveProtocolsTypesWithSubteMismatchWriteable
# typing_extensions.runtime_checkable
testProtocolAndRuntimeAreDefinedAlsoInTypingExtensions
testOverloadOnProtocol
testSimpleRuntimeProtocolCheck
# Protocol nested class matching
testProtocolWithNestedClass

# subtyping arbitrary length unpacks
testVariadicTupleSubtyping
# TypeVarTuple kind of works correctly, but mypy checks args first before callables
testTypeVarTuplePep646Callable
testTypeVarTuplePep646CallableStarArgs
testVariadicTupleInProtocol
# TypeVarTuple as unpacked varargs
testVariadicStarArgsCallNoCrash

# Star import override of local scope
testImportStarWithinFunction
# Star import check what we override
testAssignAndConditionalStarImport

# Metaclass descriptor
metaclass_descriptor
# Metaclass Union
testNotSimplifyingUnionWithMetaclass
# Metaclass iter/getitem/addition
testInferringLvarTypesUnpackedFromIterableClassObjectWithGenericIter
testIterableProtocolOnMetaclass
# Metaclass instance vs. class members
testMetaclassConflictingInstanceVars
testInferenceOfDunderDictOnClassObjects

# Use type(foo) when foo has a metaclass
testMetaclassTypeCallable
testMetaclassMemberAccessViaType
# Foo = type(...) used as `x: Foo` (type execution)
testNoneAlias
testNoneAliasStrict

# Tuple Target definitions of self names
testSlotsAssignmentMultipleLeftValues
testMultipleAssignment

# "Invalid assignment target"
testSuperWithReadWriteAbstractProperty
testAssignToBaseClassMethod
# "Call to abstract method "meth" of "Proto" with trivial body via super() is unsafe"
testEmptyBodyUnsafeAbstractSuper
testEmptyBodyUnsafeAbstractSuperOverloads
testEmptyBodyUnsafeAbstractSuperProperty
testErrorCodeUnsafeSuper_no_empty
testAbstractBodyTurnsEmpty
testAbstractBodyTurnsEmptyProtocol
testAbstractBodyTurnsEmptyCoarse
testSuperWithAbstractProperty
testEmptyBodyNoSuperWarningWithoutStrict
testEmptyBodyNoSuperWarningOptionalReturn
testIgnoreErrorsWithUnsafeSuperCall_no_empty
# ""abstractmethod" used with a non-method"
testAbstractNestedFunction
testAbstractGlobalFunction
# "Class a.B has abstract attributes "f""
# "If it is meant to be abstract, add 'abc.ABCMeta' as an explicit metaclass"
testAbstractClasses
# "Only concrete class can be given where "Type[C]" is expected"
testDedicatedErrorCodeTypeAbstract
testAbstractTypeInADict
# "Can only assign concrete classes to a variable of type "Type[A]""
testInstantiationAbstractsInTypeForVariables
testInstantiationProtocolInTypeForVariables
# "Overloaded method has both abstract and non-abstract variants"
testOverloadedAbstractMethodVariantMissingDecorator0
testOverloadedAbstractMethodVariantMissingDecorator1
# class: "Cannot instantiate abstract class "C" with abstract attribute "f""
testInstantiatingAbstractClass
testInstantiatingClassWithInheritedAbstractMethod
testInstantiationAbstractsInTypeForFunctions
testInstantiationAbstractsInTypeForAliases
testOverloadedAbstractMethod
testOverloadedAbstractMethodWithAlternativeDecoratorOrder
testInstantiateClassWithReadOnlyAbstractProperty
testInstantiateClassWithReadWriteAbstractProperty
testNestedAbstractClass
testAbstractNewTypeAllowed
testSubclassOfABCFromDictionary
testAbstractPropertiesAllowed
testInstantiatingAbstractClassWithMultipleBaseClasses
# Cannot instantiate abstract class "A" with abstract attributes "a", "b", ... and "j" (7 methods suppressed)
testInstantiatingClassWithInheritedAbstractMethodAndSuppression
# Same but not from check-abstract.test
testAddAbstractMethod
testMakeClassAbstract
testAbstractInit
testErrorCodeInstantiateAbstract
testNewAnalyzerClassPropertiesInAllScopes
testSerializeAbstractClass
# protocol: "Cannot instantiate abstract class "C" with abstract attribute "x""
testNonProtocolToProtocol
testCannotInstantiateAbstractMethodExplicitProtocolSubtypes
testCannotInstantiateAbstractVariableExplicitProtocolSubtypes
testCannotInstantiateProtocolWithOverloadedUnimplementedMethod
testEmptyBodyImplicitlyAbstractProtocol
testEmptyBodyImplicitlyAbstractProtocolProperty
testEmptyBodyImplicitlyAbstractProtocolStub
testEmptyBodyVariationsImplicitlyAbstractProtocol
testEmptyBodyNoneCompatibleProtocol
testEmptyBodyWithFinal
# @final + abc abstract class
testFinalClassWithAbstractMethod
testFinalDefiningFuncWithAbstractMethod
testFinalClassWithAbstractAttributes
testFinalClassWithoutABCMeta
testFinalClassInheritedAbstractAttributes

# "Invalid self argument "A[C]" to attribute function "f" with type "Callable[[A[B]], None]""
testInvalidMethodAsDataAttributeInGenericClass
# "Attribute function "f" with type "Callable[[], None]" does not accept self argument"
testMethodWithInvalidMethodAsDataAttribute
testClassValuedAttributesBasics
no_self

# ClassVar
testOverrideOnSelf
testOverrideOnSelfInSubclass
testMetaclassStrictSupertypeOfTypeWithClassmethods
testClassVarsInProtocols
# "ClassVar protocol member P.foo can never be matched by a class object"
testProtocolClassObjectClassVarRejected
# x = 1  # type: ClassVar
testClassVarWithoutArguments
testIncrementalClassVar

# More information needed
# "Read-only property cannot override read-write property"
testDataclassIncompatibleOverrides
testMixinTypedPropertyReversed
# "Property "x" defined in "Base" is read-only"
testNewNamedTupleMethodInheritance
testCantImplementAbstractPropertyViaInstanceVariable
# @override  "Method "g" is marked as an override, but no base method was found with this name"
explicitOverrideOverloads
explicitOverrideNotOnOverloadsImplementation
# Self definitions different from parent
testSelfTypeOverrideCompatibility
testSelfTypeOverrideCompatibilityGeneric
# "Cannot assign to a method" should not error
testDataclassCallableFieldAssignment
testDataclassesCallableFrozen
# "Covariant override of a mutable attribute (base class "C" defined the type as "float", expressi on has type "int")  [mutable-override]"
testCovariantMutableOverride
# "Signature of "???" incompatible with supertype "???""
# __hash__ None overrides
testOverrideAttributeWithMethod
testPartialTypeProtocolHashable
# Inheritance multiple issues?
testOverrideClassVarManyBases
testOverrideIncompatibleWithMultipleSupertypes
testSubclassingGenericABCWithDeepHierarchy
testSubclassingGenericABCWithDeepHierarchy2
testOverridingMethodAcrossHierarchy
testMultipleInheritance_MethodDefinitionsIncompatibleOverride
testClassIgnoreType_RedefinedAttributeAndGrandparentAttributeTypesNotIgnored
testMultipleInheritance_NestedVariableOverriddenWithIncompatibleType1
testGenericMultipleOverrideReplace
# "This violates the Liskov substitution principle"
testIntroducingInplaceOperatorInSubclass
# Namedtuple bad overwrite of count etc
testNewNamedTupleIllegalNames
testNamedTupleFallback
testNamedTupleIncompatibleRedefinition

# __init_subclass__
testOverride__init_subclass__WithDifferentSignature
testInitSubclassWrongType
testInitSubclassTooFewArgs
testInitSubclassTooFewArgs2
testInitSubclassWithImports
testInitSubclassUnannotated
testTooManyArgsForObject
testNoClassKeywordsForNamedTuple
testTypedDictWithClassLevelKeywords

# __setattr__ and __getattr__
testGetattrAndSetattr

# "Accessing "__init__" on an instance is unsound, since instance.__init__ could be from an incompatible subclass"
testAccessingInit
# Decorated constructors
testDecoratedConstructors
# "Unsupported decorated constructor type"
testDecoratedConstructorsBad

# TypeVar Values in func
testErrorCodeInvalidTypeArg
testCheckGenericFunctionBodyWithTypeVarValues
testCheckGenericFunctionBodyWithTypeVarValues2
testTypeInferenceAndTypeVarValues
testTypeDeclaredBasedOnTypeVarWithValues
testTypeVarValuesAndNestedCalls
testGenericTypeWithTypevarValuesAndTypevarArgument
testGenericTypeBodyWithTypevarValues
testAttributeInGenericTypeWithTypevarValues*
testMultipleClassTypevarsWithValues1
testGenericFunctionWithNormalAndRestrictedTypevar
testDefineAttributeInGenericMethodUsingTypeVarWithValues
testTypevarValuesSpecialCase1
testGenericTypeAliasesTypeVarConstraints
testWideOuterContextValuesOverlapping
testTypevarValuesWithOverloadedFunctionSpecialCase
testReferenceToDecoratedFunctionAndTypeVarValues
testLiteralAndGenericsRespectsValueRestriction
testTypeVarValuesFunction
testTypeVarValuesMethod1
testTypeVarValuesMethod2
testTypingSelfWithValuesExpansion
testOverloadingInferUnionReturnWithTypevarsAndValueRestrictions
testColumnFunctionWithTypeVarValues
testSuperWithTypeVarValues1
testSuperWithTypeVarValues2
testInnerFunctionWithTypevarValues
testInnerFunctionMutualRecursionWithTypevarValues
testNestedDecoratedCoroutineAndTypeVarValues
testAnyStr
testTypeVarWithTypedDictValueInIndexExpression
testReverseOperatorTypeVar2b
testIsinstanceAndTypeVarValues*
testIsinstanceWithUserDefinedTypeAndTypeVarValues
testIsinstanceWithUserDefinedTypeAndTypeVarValues
testIsinstanceWithUserDefinedTypeAndTypeVarValues2
testNarrowingIsSubclassFinalSubclassWithTypeVar
testTypeCheckOverloadImplementationTypeVarWithValueRestriction
testOperatorContainsNarrowsTypedDicts_total
testUnreachableFlagWithGenerics
testNarrowOnSelfInGeneric
testStrictEqualityDisabledWithTypeVarRestrictions

# literal final details
testLiteralWithFinalPropagation
testLiteralWithFinalPropagationIsNotLeaking
# @final overloads
testFinalOverridingMethodOverloads
testFinalAddFinalMethodOverrideOverloadFine
testFinalBodyReprocessedAndStillFinalOverloaded-only_when_cache
testFinalBodyReprocessedAndStillFinalOverloaded2-only_when_nocache
# @final
testFinalAddFinalMethodOverrideWithVarFine
testFinalAddFinalPropertyWithVarFine
testTypingSelfAllowAliasUseInFinalClasses
# "Protocol member cannot be final"
testFinalNotInProtocol
# Final: "Cannot assign to final name "x""
testNewAnalyzerFinalOverrideInSubclass
testFinalAddFinalVarOverrideFine
testLiteralFinalMismatchCausesError
testFinalAddFinalVarOverride
testFinalDelayedDefinition
testFinalDelayedDefinitionOtherMethod
testFinalReassignInstanceVarInit
testFinalReassignInstanceVarClassVsInit
testFinalReassignInstanceVarMethod
testFinalDefiningNoRhsSubclass
# Overrides
testFinalOverridingVarClassBody
testFinalOverridingVarClassBodyExplicit
testFinalOverridingVarInit
testFinalOverridingVarInit2
testFinalOverridingVarOtherMethod
testFinalOverridingVarMultipleInheritanceClass
testFinalOverridingVarMultipleInheritanceInit
testFinalOverridingVarMultipleInheritanceMixed
testFinalOverridingVarWithMethod
testFinalOverridingVarWithMethodClass
testFinalOverridingMethodWithVarImplicit
testFinalOverridingMethodMultipleInheritance
testFinalOverridingMethodMultipleInheritanceVar
testFinalCantOverrideWriteable
# Final "Protocol member PPS.attr expected settable variable, got read-only attribute"
testFinalAttributeProtocol
testModuleAsProtocolImplementationFinal
# Final issues
testFinalMultiassignAllowed
testFinalDefiningNotInOtherMethod
testFinalDefiningOnlyOnSelf
testFinalNotInLoops
# "Unexpected type declaration"
testFinalInvalidDefinitions

# callable()
testFineGrainedCallable
testSerializeDummyType

# Except Foo as bar where bar is bound over its existence as a variable
testTryStarMultiple
testExceptWithAnyTypes
testExceptionVariableReuseInDeferredNode1
testExceptionVariableReuseInDeferredNode2
testExceptionVariableReuseInDeferredNode3
# with scoping is special
testWithStmtScopeBasics
testWithStmtScopeNestedWith1
testWithStmtScopeNestedWith2
testWithStmtScopeInnerAndOuterScopes
testWithStmtScopeMultipleContextManagers
testWithStmtScopeMultipleAssignment
testWithStmtScopeComplexAssignments
testWithStmtScopeAndClass
testWithStmtScopeAndLambda

# [''] + [1] does not generate an error
testAssignmentSubtypes
# union order issues
testNarrowingEqualityDisabledForCustomEquality
# bool literal type matching
assign_bool_to_false_true_literal
testBoolInTuplesRegression

# isinstance error conditions
testLiteralErrorsWithIsInstanceAndIsSubclass
# unsorted narrowing tests
testNarrowingParentWithParentMixtures
testIntersectionUsingPromotion2
testIntersectionUsingPromotion4
testIntersectionUsingPromotion5
testIntersectionUsingPromotion6
testModuleAliasRepeatedWithAnnotation
# isinstance Intersection types
testNarrowingIsInstanceFinalSubclass
testNarrowingIsInstanceFinalSubclassWithUnions
testIsInstanceAdHocIntersectionBasic
testIsInstanceAdHocIntersectionRepeatedChecks
testIsInstanceAdHocIntersectionIncompatibleClasses
testIsInstanceAdHocIntersectionReversed
testIsInstanceAdHocIntersectionGenerics
testIsInstanceAdHocIntersectionGenericsWithValues
testIsInstanceAdHocIntersectionGenericsWithValuesDirectReturn
testIsInstanceAdHocIntersectionUsage
testIsInstanceAdHocIntersectionReinfer
testIsInstanceAdHocIntersectionWithUnions
testIsInstanceAdHocIntersectionSameNames
testIsInstanceAdHocIntersectionBadMro
testIsInstanceAdHocIntersectionAmbiguousClass
testIsSubclassAdHocIntersection
testIsinstanceOfNonoverlapping
testIsInstanceAdHocIntersectionFineGrainedIncrementalNoChange
testIsInstanceAdHocIntersectionFineGrainedIncrementalIsInstanceChange
testIsInstanceAdHocIntersectionFineGrainedIncrementalUnderlyingObjChang
testIsInstanceAdHocIntersectionFineGrainedIncrementalIntersectionToUnreachable
testIsInstanceAdHocIntersectionFineGrainedIncrementalUnreachaableToIntersection
testIsInstanceAdHocIntersectionWithStrAndBytes
testNarrowingIsInstanceNoIntersectionWithFinalTypeAndNoneType
testConcreteClassesInProtocolsIsInstance
testConcreteClassesUnionInProtocolsIsInstance
testNewTypeWithIsInstanceAndIsSubclass
testIsInstanceAdHocIntersectionIncrementalNoChange
testIsInstanceAdHocIntersectionIncrementalNoChangeSameName
testIsInstanceAdHocIntersectionIncrementalNoChangeTuple
testIsInstanceAdHocIntersectionIncrementalIsInstanceChange
testIsInstanceAdHocIntersectionIncrementalUnderlyingObjChang
testIsInstanceAdHocIntersectionIncrementalIntersectionToUnreachable
testIsInstanceAdHocIntersectionIncrementalUnreachaableToIntersection
testIsInstanceInitialNoneCheckSkipsImpossibleCasesNoStrictOptional
testIsInstanceInitialNoneCheckSkipsImpossibleCasesInNoStrictOptional
testIsinstanceMultiAndSpecialCase
testTypeEqualsMultipleTypesShouldntNarrow
testIsinstanceOrIsinstance
testIsinstanceAndOr
testSpecialTypingProtocols
testTypeGuardMultipleCondition-xfail
testTypeIsMultipleCondition
testTypeGuardNestedRestrictionUnionIsInstance
testTypeIsNestedRestrictionUnionIsInstance
testAssignToTypeIsedVariable3
testTypeIsNonzeroFloat
# overwriting with def as a target
testNarrowingWithDef
# type[any] issues
testIsInstanceWithUnknownType
testNarrowingWithTupleOfTypes
testNarrowingWithTupleOfTypesPy310Plus
# issubclass narrowing
testIssubclassUnreachable
testIssubclasDestructuringUnions1
testIssubclasDestructuringUnions2
testIssubclasDestructuringUnions3
testIssubclass
testIssubclassDeepHierarchy
testIssubclassTuple
testIssubclassBuiltins
testIsinstanceTypeArgs
testIssubclassWithMetaclasses
testIssubclassWithMetaclassesStrictOptional
testIsInstanceTypeTypeVar
testIsInstanceTypeSubclass
testIsSubClassNarrowDownTypesOfTypeVariables
testOnlyMethodProtocolUsableWithIsSubclass
testNarrowingIsSubclassNoneType1
testNarrowingIsSubclassNoneType2
testNarrowingIsSubclassNoneType3
testNarrowingIsSubclassNoneType4
# narrowing if with literals
testConditionalBoolLiteralUnionNarrowing
testRecursiveAliasTuple
# narrowing with Any troubles
testSubtypingWithAny
testIsinstanceNarrowAny
testOptionalAssignAny1
testOptionalAssignAny2
testOptionalAssignAny3
testNewAnalyzerBuiltinAliasesFixed
testInferredTypeIsSimpleNestedList
testInferredTypeIsSimpleNestedIterable
testInferredTypeIsSimpleNestedListLoop
testInferredTypeIsSimpleNestedIterableLoop
testNarrowingWithAnyOps
testNarrowingLenAnyListElseNotAffected
testNarrowingLenMixWithAnyPrecise
testNarrowingLenMixWithAnyImprecise
testUnreachableWhenSuperclassIsAny
testUnreachableWhenSuperclassIsAnyNoStrictOptional
testTypeGuardNestedRestrictionAny
testTypeIsNestedRestrictionAny
# questionable implicit literal?
testEnumReachabilityChecksIndirect
# or/and boolean logic over multiple terms
testAndOr
testRestrictedBoolAndOrWithGenerics
testOrCases
testAndCases
testFinalWithoutBool
testFinalWithoutBoolButWithLen
# Narrowing len()
testNarrowingLenTypeVarTupleGreaterThan
testNarrowingLenBareExpressionTypeVarTuple
testNarrowingLenUnionWithUnreachable
# narrowing `in` weird overlapping. Mypy correct?
testTupleOverlapDifferentTuples
# narrowing assignments regressions after `foo =` narrowing
testAwaitOverloadSpecialCase
testCompatibilityOfDynamicWithOtherTypes
testMiscBinaryOperators
testGenericFunctionAsOverloadItem
testImportAndAssignToModule
testParamSpecSubtypeChecking1
testMultipleAssignmentWithNonTupleRvalue
testAssignAnyToUnion
testUnionOfVariableLengthTupleUnpacking
# statement narrowing regressions after `foo.bar =` narrowing
testDescriptorGetSetDifferentTypes
testTypeVariableAsTypeArgument
testImportWithinBlock
testUnionMultiassignIndexedWithError
# narrowing assignments
testTupleCompatibleWithSequence
testAugmentedAssignmentIntFloat
testAugmentedAssignmentIntFloatMember
testUnionMultiassignRebind
testUnionMultiassignAlreadyDeclared
testUnionMultiassignPacked
testUnpackUnionNoCrashOnPartialNoneBinder
testNestedUnionUnpackingFromNestedTuplesBinder
testUnionUnpackingDoubleBinder
# narrowing with dict keys
testNarrowTypeForDictKeys
# try/except/finally
testTryExceptFlow
testRedefinedFunctionInTryWithElse
testRedefineImportedFunctionViaImport
testExceptionVariableReuseInDeferredNode4
testExceptionVariableReuseInDeferredNode5
testExceptionVariableReuseInDeferredNode6
testUnionTryExcept
testUnionTryExcept2
testUnionTryExcept3
testUnionTryFinally
testUnionTryFinally2
testUnionTryFinally4
testUnionTryFinally5
testUnionTryFinally6
testUnreachableTryExcept
testUnreachableTryExceptElse
testUnreachableTryReturnFinally1
testUnreachableTryReturnFinally2
testUnreachableFlagTryBlocks
testNoReturnExcept
# while/for
testModifyLoop
testModifyLoop2
testModifyLoop3
testModifyLoopWhile4
testModifyLoopFor4
testModifyNestedLoop
testModifyLoopLong
testWhileExitCondition1
testWhileLinkedList
testUnreachableWhileTrue
testComplicatedBlocks
testIsInstanceSubClassMemberHard
testUnreachableFlagWithBadControlFlow2
testNoReturnWhile
# with
testUnreachableFlagContextManagersSuppressed
testUnreachableFlagContextManagersSuppressedNoStrictOptional
testUnreachableFlagContextAsyncManagersSuppressed
testUnreachableFlagContextAsyncManagersAbnormal
testUnreachableWithStdlibContextManagers
# narowing for comprehensions if
testComprehensionIsInstance
testTypeIsComprehensionSubtype
testTypeGuardComprehensionSubtype
# narrowing of nested scopes
testNarrowedVariableInNestedFunctionBasic
testNarrowedVariableInNestedFunctionMore1
testNarrowedVariableInNestedFunctionMore2
testLambdaInferenceUsesNarrowedTypes
testNarrowOptionalOutsideLambda
testNarrowOptionalOutsideLambdaWithDeferred
testNarrowedVariableInNestedModifiedInWalrus
# global/local lookup in func of narrowed value in different scope
testLocalPartialTypesWithGlobalInitializedToNone4
testAttributePartiallyInitializedToNoneWithMissingAnnotation
testIncompatibleInheritedAttributeNoStrictOptional
testUnusedTargetNotClass2
# unreachable after Never return
testUnreachableFlagOkWithDeadStatements
testUnreachableFlagWithTerminalBranchInDeferredNode
testNoReturnInExpr
testOverloadsAndNoReturnNarrowTypeNoStrictOptional1
testOverloadsAndNoReturnNarrowTypeWithStrictOptional1
testOverloadsAndNoReturnNarrowTypeNoStrictOptional2
testOverloadsAndNoReturnNarrowTypeWithStrictOptional2
testOverloadsAndNoReturnNarrowTypeNoStrictOptional3
testOverloadsAndNoReturnNarrowTypeWithStrictOptional3
# yield after return is sometimes ok.
testIntentionallyEmptyGeneratorFunction
testIntentionallyEmptyGeneratorFunction_None
# "Function "property_decorator_missing" could always be true in boolean context"
testUnreachableFlagMiscTestCaseMissingMethod
testWalrus
# FlowAnalysis includes stack above nested function, instead of just the current
testMultipleNestedFunctionDef
# if right operand is Any, fallback to Any in operation
testBinaryOperationsWithDynamicAsRightOperand
# --strict-equality strict equality "Non-overlapping equality check (left operand type: "int", right operand type: "str")"
testStrictEqualityNoPromotePy3
testStrictEqualityAllowlist
testNarrowingEqualityDisabledForCustomEqualityChain
testNarrowingEqualityFlipFlop

# None late binding, because it's None (x = None; x = 3)
testLocalPartialTypesWithInheritance3
testUnpackUnionNoCrashOnPartialNone2
# partial types with untyped defs
testCheckUntypedDefsSelf2
# Make x an Optional if else contains `x = None`
testOptionalBackwards1
testOptionalBackwards2
testOptionalBackwards3
testOptionalBackwards4

# list context is Never and should be something else
testContextForAttributeDeclaredInInit
# ????
testEnumWithPartialTypes
testIgnoreTypeInferenceErrorAndMultipleAssignment
testWalrusPartialTypes
# No "Need type annotation for "X"", because untyped update exists
testInferDictInitializedToEmptyAndUpdatedFromMethodUnannotated
# needs error because only reassignments with other partial
testEmptyCollectionAssignedToVariableTwiceIncremental
testEmptyCollectionAssignedToVariableTwiceNoReadIncremental
testNewAnalyzerLessErrorsNeedAnnotation
testInferenceWithUninhabitedType
# Needs error, because nested partial "Need type annotation for "X""
testInferListInitializedToEmptyAndIncompleteTypeInAppend
testInferDictInitializedToEmptyAndIncompleteTypeInUpdate
# For loop
testInferenceOfFor1
testInferenceOfFor3
testReusingInferredForIndex2
testTwoStarExpressionsInGeneratorExpr
testMultipleForIndexVars
# operator narrowing
testInferFromEmptyDictWhenUsingIn
testInferListTypeFromInplaceAdd
testInferSetTypeFromInplaceOr
# explicit any context should lead to Dict[Any, Any]? might be ok?
testGenericDictWithOverload
# OrderedDict
testInferOrderedDictInitializedToEmpty
# defaultdict
testPartialDefaultDict*
# self attributes
testInferAttributeInitializedToEmpty*
testInferAttributeInitializedToNoneAndAssigned
testInferAttributeInitializedToNoneAndAssignedOtherMethod
testInferAttributeInitializedToNoneAndAssignedClassBody
testPartialTypeInNestedClass
testRefreshPartialTypeInClass
testRefreshPartialTypeInferredAttributeIndex
testRefreshPartialTypeInferredAttributeAppend
testLocalPartialTypesWithClassAttributeInitializedToEmptyDict
testNoCrashOnPartialMember
testNoPartialInSupertypeAsContext
testOverridePartialAttributeWithMethod
testAccessingClassAttributeWithTypeInferenceIssue2
testInferListInitializedToEmptyInMethodViaAttribute
testInferListInitializedToEmptyInClassBodyAndOverriden
# --local-partial-types
testLocalPartialTypesWithGlobalInitializedToEmptyList2
testLocalPartialTypesWithGlobalInitializedToEmptyDict2
testLocalPartialTypesWithNestedFunction
# methods need to be analyzed at the end
testMultipassAndPartialTypes2
testLocalPartialTypesWithGlobalInitializedToEmptyList
testLocalPartialTypesWithGlobalInitializedToEmptyDict
# partial list nullable
testPartiallyInitializedToNoneAndThenToPartialList
testPartiallyInitializedToNoneAndThenReadPartialList
testPartiallyInitializedToNoneAndPartialListAndLeftPartial
testPartiallyInitializedToNoneAndThenToIncompleteType-skip
# partial for `x: Final = []`
testLiteralFinalErasureInMutableDatastructures2
# error formatting?
testMultipassAndPartialTypes4
# None as a default for class variables, even if not optional?
testNoneClassVariableInInit
testMultipleAssignmentNoneClassVariableInInit
# --allow-untyped-globals
testPermissiveAttributeOverride1
# Global
testLocalPartialTypesWithGlobalInitializedToNone
testLocalPartialTypesWithGlobalInitializedToNone2
testLocalPartialTypesWithGlobalInitializedToNone3
testLocalPartialTypesWithGlobalInitializedToNoneStrictOptional
testNonePartialType1
testNonePartialType2
testNonePartialType3
testNonePartialType4

# Function local self attribute name binding
testOptionalDescriptorsBinder
testUnionDescriptorsBinder
testSubclassDescriptorsBinder
testPropertyGetterBody
# self assignment validation
testSlotsAssignmentWithMethodReassign
testTypeVarTupleNewSyntaxGenerics
testAssignmentToAttributeInMultipleMethods
testInheritanceFromGenericWithImplicitDynamic
# Confusions with overrides, because of self definitions
testVariableSubclassAssignment
testClassOneErrorPerLine
testAttributeDefOrder1
testAttributeDefOrder2
testChangeBaseClassAttributeType
testInheritanceAndAttributeAssignment
# verify class definitions when setting self.foo
testInferAttributeTypeAndAssignInInit
testTypingSelfInternalSafe
testTypingSelfClashInBodies
# subclass or superclass preferred over class for types
testAddBaseClassAttributeCausingErrorInSubclass
testClassOrderOfError
# supertype context inference where descriptors are executed as if it was an instance
testUseSupertypeAsInferenceContextPartialErrorProperty
testSetDescriptorOnClass
# Need type annotation when different base classes define different lists
testUseSupertypeAsInferenceContextConflict
# supertype context regressions
testNoneAnyFallbackDescriptor
# "NamedTuple type as an attribute is not supported"
testAssignNamedTupleAsAttribute
testNoCrashUnsupportedNamedTuple
# Dynamic functions are ignored in classes and the super class is used?
testInferringTypesFromIterable
testMultipleAssignmentAndGenericSubtyping
# "Enum type as attribute is not supported"
testAssignEnumAsAttribute
# "TypedDict type as attribute is not supported"
testAssignTypedDictAsAttribute

# Redefinition (Name "X" already defined on line X)
testRedefineVariableAsTypevar
testRedefineTypevar
testRedefineTypevar4
testImportTwoModulesWithSameNameInFunction
testImportTwoModulesWithSameNameInGlobalContext
testDuplicateDefOverload
testNewAnalyzerImportStarForwardRef*
testNewAnalyzerImportOverExistingInCycleStar1
testNewAnalyzerImportOverExistingInCycleStar2
testNewAnalyzerMissingImportErrorsRedefinition
testNewAnalyzerDuplicateTypeVar
testNewAnalyzerDuplicateTypeVarImportCycle
testNewAnalyzerDuplicateTypeVarImportCycleWithAliases
testNewAnalyzerOverrideClassWithTypeAlias
testNewAnalyzerIdentityAssignment*
testProhibitReassigningAliases
testProhibitReassigningSubscriptedAliases
testProhibitReassigningGenericAliases
testStarImportOverlappingMismatch
testStarImportOverridingLocalImports
testImportOnTopOfAlias1
testMemberRedefinition
testMemberRedefinitionDefinedInClass
testNewAnalyzerEnumRedefinition
testPropertyAndFieldRedefinitionNoCrash
testModuleLevelGetattrImportFromAsTwice
testFinalClassVariableRedefinitionDoesNotCrash
# redefinition overload
testRedefinedOverloadedFunction
testFakeOverloadCrash2
testOverloadNotImportedNoCrash
testSingleOverload2
testCustomRedefinitionDecorator
# NewType Redefinition
testNewTypeRedefiningVariablesFails
# "Cannot assign multiple types to name "b" without an explicit "Type[...]" annotation"
testAliasesInClassBodyNormalVsSubscripted
# Mypy treats a None partial that is then assigned to a function as the function?? Wrong?
testRedefineFunctionDefinedAsVariableInitializedToNone
testRedefineNestedFunctionDefinedAsVariableInitializedToNone
# "Cannot assign to a type"
testAssignToNestedClassViaClass
testAssignToTypeDef

# "Value of type "A" must be used"
# "Value of type "Coroutine[Any, Any, None]" must be used"
# "Are you missing an await?"
# --enable-error-code unused-awaitable
testUnusedAwaitable
testForwardRefToBadAsyncShouldNotCrash_newsemanal
# async await when is a generator comprehension becoming an asyncgenerator?
testAsyncGeneratorExpressionAwait
testAsyncForComprehension
# Crazy types.coroutine types
testFullCoroutineMatrix
# ""async for" outside async function"
testAsyncForOutsideCoroutine
testAsyncWithOutsideCoroutine
# "Maybe you forgot to use "await"?"
testErrorOneLessFutureInReturnType
testAwaitMissingNote
testAsyncForErrorNote

# "Trying to read deleted variable "Foo""
testDelStmtWithTypeInfo
testDelStatementWithAssignmentSimple
testDelStatementWithAssignmentTuple
testDelStatementWithAssignmentList
testDelStatementWithConditions
testDel
testReuseTryExceptionVariable
testReuseDefinedTryExceptionVariable
testRaiseFromStatement
testInvalidDel3

# match statement
testValuePattern
testCapturePattern
testCapturePatternOutliving
testNestedCapturePatterns
testMappingPatternRest
testAsPattern
testGuard
testCapturePatternInGuard
testAsPatternInGuard
testMatchUndefinedSubject
testMatchUndefinedValuePattern
testMatchUndefinedClassPattern
testNoneBindingWildcardPattern
testNoneBindingStarredWildcardPattern

# "Cannot determine type of"
testThreePassesRequired
testAccessGlobalVarBeforeItsTypeIsAvailable
testAccessDataAttributeBeforeItsTypeIsAvailable
testMultipassAndTopLevelVariable
testMultipassAndCircularDependency
testForwardReferenceToDecoratedClassMethod
testAccessingClassAttributeWithTypeInferenceIssue
testClassObjectsNotUnpackableWithoutIterableMetaclass
testErrorCodeCannotDetermineType
testCannotDetermineTypeFromOtherModule
testColumnCannotDetermineType
testUnionOfNonIterableUnpacking
testWalrusUsedBeforeDef
# "Cannot determine type of "X" in base class"
testCannotDetermineTypeInMultipleInheritance

# The type "Type[type]" is not generic and not indexable
testTypeApplicationCrash
# `class type` stuff
testObfuscatedTypeConstructorReturnsTypeType
testOtherTypeConstructorsSucceed
testTypeEquivalentTypeAny2
# Type[Any] is object
testSimplifyingUnionWithTypeTypes2

# strict optional with config file
testPerFileStrictOptionalBasic
testPerFileStrictOptionalBasicImportStandard
testPerFileStrictOptionalListItemImportOptional
testPerFileStrictOptionalBasicPyProjectTOML
testPerFileStrictOptionalBasicImportStandardPyProjectTOML
testPerFileStrictOptionalListItemImportOptionalPyProjectTOML
testPerFileStrictOptionalModuleOnly
testPerFileStrictOptionalFunction
testPerFileStrictOptionalMethod
testNewAnalyzerTypeArgBoundCheckWithStrictOptional
testNewAnalyzerTypeArgBoundCheckWithStrictOptionalPyProjectTOML
testPerFileStrictOptionalModule
testStrictOptionalCovarianceCrossModule
# Uses an environment variable in mypy.ini files=$MYPY_CONFIG_FILE_DIR/good.py
testEnvvar_MYPY_CONFIG_FILE_DIR

# Never not rewritten to Any for "Need type annotation for "X""
testNewAnalyzerLessErrorsNeedAnnotationNested
testUnderspecifiedInferenceResult
testNeedAnnotationForCallable
testTypeVarDefaultsClass1
testTypeVarDefaultsClass2
testTypeVarDefaultsClass3
# "Perhaps you need a type annotation for "x"? Suggestion: "List[str | int]""
testInferredTypeSubTypeOfReturnType
# --disallow-any-generics
testDisallowAnyGenericsForAliasesInRuntimeContext
testGenericTypedDictAlias
testNewAnalyzerDisallowAnyGenericsMessages

# Weird and unsound mypy cases for x: typing.TypeAlias = ...
testClassLevelTypeAliasesInUnusualContexts
testMalformedTypeAliasRuntimeReassignments

# ------------- Additional unimportant, but would be nice -----------------

# functools.partial
testFunctoolsPartialBasic
testFunctoolsPartialStar
testFunctoolsPartialGeneric
testFunctoolsPartialCallable
testFunctoolsPartialTypeGuard
testFunctoolsPartialType
testFunctoolsPartialTypeVarTuple
testFunctoolsPartialUnion
testFunctoolsPartialTypeObject
testIncrementalFunctoolsPartial

# 3.12 type var syntax
test695TypeAlias
test695Class
test695Function
test695TypeVar
test695TypeAliasType
testPEP695*

# Assignment like ac[b] += c with both __getitem__ and __setitem__ has same error twice
testOperatorAssignmentWithIndexLvalue1

# NotImplemented
testReturnAnyForNotImplementedInNormalMethods

# qualified name in function contains class path: __main__.Cls.FooEnum@4
testAnonymousFunctionalEnum
testNewAnalyzerIncrementalMethodNamedTuple
testNewAnalyzerNamedTupleClassNestedMethod
testNoIncrementalCrashOnTypedDictMethod
# Nicer Callable Errors
testCallableParsingFromExpr
testCallableParsing
testCallableTooManyVarArg
testCallableKindsOrdering
testCallableFastParseBadArgArgName
# Separate formatting for ambigous names???
testIncompatibleAssignmentAmbiguousShortnames
# for long tuples: "Expression tuple item 8 has type "str"; "int" expected;"
testAssigningWithLongTupleInitializer

# Module <M> has no attribute <missing_name>; maybe <name>
testNewAnalyzerTypeAnnotationCycle3
testModuleAttributeTwoSuggestions
testModuleAttributeThreeSuggestions
testImportMisspellingSingleCandidate
testImportMisspellingMultipleCandidates
testImportMisspellingMultipleCandidatesTruncated
testColumnHasNoAttribute
testErrorCodeNoAttribute
testDequeWrongCase
# "C" has no attribute "__aenter__"; maybe "__enter__"?
testAsyncWithError
# Unexpected keyword argument "otter" for "f"; did you mean "other"?
testMultipleKeywordsForMisspelling
testKeywordMisspelling*
# "TypedDict "XXX" has no key "xxx" note: Did you mean "type"?"
testCannotGetItemOfTypedDictWithInvalidStringLiteralKey

# `import a.b # type: ignore` means that the attribute is later Any without error
testAddedMissingStubsIgnorePackagePartial
testFineAddedMissingStubsIgnorePackagePartial
# ignore_missing_imports in Mypy overrides ignores import errors if those modules are not presents
testModuleGetattrInit10
testIgnoreErrorFromMissingStubs2
testModuleGetattrInit10PyProjectTOML
testMultipleModulesInOverridePyProjectTOML

# __init__ None needed
testInitReturnTypeError

# type ignore leads to "Revealed type is "A?""
testSerializeIgnoredInvalidType
# bad type: ignore
testErrorCodeBadIgnore
testErrorCodeBadIgnoreNoExtraComment
# --warn-unused-ignores
# "Unused "type: ignore" comment"
testErrorCodeWarnUnusedIgnores1
testErrorCodeWarnUnusedIgnores2
testErrorCodeWarnUnusedIgnores3
testErrorCodeWarnUnusedIgnores4
testErrorCodeWarnUnusedIgnores5
testErrorCodeWarnUnusedIgnores6_NoDetailWhenSingleErrorCode
testMethodAssignCoveredByAssignmentUnused
testUnusedIgnoreTryExcept
testUnusedIgnoreEnableCode
testIgnoreDecoratedFunction1
testIgnoreScopeUnused1
testIgnoreScopeUnused2
testIgnoreScopeUnused3
testUnusedIgnoreVersionCheck
testUnusedTypeIgnore
testUnusedTypeIgnoreImport
# --warn-unused-ignores whole module
testIgnoreWholeModule1
testImportUnusedIgnore2
# --enable-error-code ignore-without-code
testErrorCodeMissingWhenRequired
testErrorCodeMissingDoesntTrampleUnusedIgnoresWarning
testErrorCodeMissingWholeFileIgnores
testErrorCodeMissingMultiple
testInlineErrorCodes
testInlineErrorCodesMultipleCodes
testInlineErrorCodesOverrideConfig
testPerModuleErrorCodesOverride
# type: ignore blocking errors cannot be ignored: ""yield" outside function"
testCannotIgnoreBlockingError
# type: ignore on forward reference
testErrorCodeSyntaxErrorIgnoreNote
# type: ignore on call silences errors in call, even if not on same line?!
testMultiLineMethodOverridingWithIncompatibleTypesIgnorableAtDefinition
# Error code "literal-required" not covered by "type: ignore" comment
testNoteAboutChangedTypedDictErrorCode

# "mypy: "tmp/typing.py" shadows library module "typing""
testShadowTypingModule

# Module __all__
testAllMustBeSequenceStr

# --show-column-numbers and tuple targets
testColumnsAssignment

# --enable-error-code explicit-override "Method "prop" is not using @override but is overriding a method in class "__main__.A""
requireExplicitOverrideOverload

# "Incompatible types in string interpolation (expression has type "str", placeholder has type "int")"
testErrorCodeFormatCall

# tuple type is not initializable (though it probably should)
testTypeUsingTypeCErrorUnsupportedType
testTypeUsingTypeCTuple

# ""break" outside loop" for untyped functions
testBreakOutsideLoop
testNoCrashOnBreakOutsideLoopFunction
testNoCrashOnBreakOutsideLoopClass
testContinueOutsideLoop

# - (with type vars) Overloaded function signatures 2 and 3 overlap with incompatible return types
#testOverloadMultipleVarargDefinitionComplex
#testOverloadPartialOverlapWithUnrestrictedTypeVar
#testOverloadPartialOverlapWithUnrestrictedTypeVarNested
#testOverloadedPartiallyOverlappingTypeVarsAndUnion
# Overlapping general
#testManyUnionsInOverload
#testOverloadInferUnionReturnFunctionsWithKwargs
#testOverloadWithOverlappingItemsAndAnyArgument5
#testIntersectionTypesAndVarArgs
#testLiteralInferredInOverloadContextWithTypevars
#testLiteralSubtypeOverlap
#testOverloadsAndNoneWithoutStrictOptional
#testOverloadsAndNoneWithStrictOptional
#testTypeTypeOverlapsWithObjectAndType
#testTypeOverlapsWithObject
#testAccessingGenericDescriptorFromInferredClass
#testAccessingGenericDescriptorFromClass
#testOverloadWithNonGenericDescriptorLookalike
#testOverloadWithGenericDescriptor
#testUnpackIterableClassWithOverloadedIter2

# ------------------- priority? tests -----------------------

# int | str leads to object instead of Any when using Enum().value?
testEnumValueInhomogenous
# All members in a union lead to the enum again
testEnumTypeCompatibleWithLiteralUnion
# Enum Dict value inferred is int instead of Literal[1]
testFunctionalEnumListOfPairs
# Enum access merging leads to int | Any instead of Any
testEnumValueUnionSimplification

# future imports (future is not part of stubs)
testNewAnalyzerMetaclassFuture1
testNewAnalyzerMetaclassFuture3
testNewAnalyzerMetaclassFuture4
testFutureMetaclass
testFromFutureMetaclass
testFutureMetaclassImportFrom
testFutureMetaclassImport
testFutureMetaclassAndBase
testFutureMetaclassGenerics
testFutureMetaclassErrors
testFutureMetaclassAny
# six imports
testNewAnalyzerMetaclassSix1
testNewAnalyzerMetaclassSix2
testNewAnalyzerMetaclassSix3
testNewAnalyzerMetaclassSix4
testSixMetaclassImportFrom
testSixMetaclassImport
testSixMetaclassAndBase
testSixMetaclassGenerics
testSixMetaclassErrors
testSixMetaclassAny
testSixMetaclass
testFromSixMetaclass
testSixMetaclassGenericBase
testIgnoreInsideClassDoesntAffectWhole
# import of typeshed stubs
testErrorFromGoogleCloud

# typing.assert_type in untyped functions
testAssertTypeUncheckedFunction
testAssertTypeUncheckedFunctionWithUntypedCheck
# function type mismatch when untyped
testSubtypingFunctionsImplicitNames

# Probably fixed eventually by updating mypy or typeshed
testDecoratorTypeAfterReprocessing

# attrs
testAttrs*
updateMagicField
magicAttributeConsistency
magicAttributeConsistency2-only_when_cache
testDisallowIncompleteDefsAttrsNoAnnotations
testDisallowIncompleteDefsAttrsWithAnnotations
testDisallowIncompleteDefsAttrsPartialAnnotations

# ctypes
testCtypesArrayStandardElementType
testCtypesArrayCustomElementType
testCtypesArrayUnionElementType
testCtypesCharArrayAttrs
testCtypesWcharArrayAttrs
testCtypesCharUnionArrayAttrs
testCtypesAnyUnionArrayAttrs
testCtypesOtherUnionArrayAttrs
testCtypesOtherArrayAttrs

# singledispatch
testIncorrectDispatchArgumentWhenDoesntMatchFallback
testCheckNonDispatchArgumentsWithTypeAlwaysTheSame
testImplementationHasSameDispatchTypeAsFallback-xfail
testRegisterHasDifferentTypeThanTypeSignature-xfail
testTypePassedAsArgumentToRegister
testCustomClassPassedAsTypeToRegister
testOnePartOfUnionDoesNotHaveCorrespondingImplementation
testIncorrectArgumentsInSingledispatchFunctionDefinition
testDispatchTypeIsNotASubtypeOfFallbackFirstArgument
testAnyInConstructorArgsWithClassPassedToRegister
testIncorrectArgumentTypeWhenCallingRegisteredImplDirectly
testDontCrashWhenRegisteringAfterError

# OrderedDict = _Alias()
testTypingExtensionsOrderedDictAlias

# --enable-incomplete-feature=PreciseTupleTypes
testTupleWithStarExpr2Precise
testTupleWithStarExpr3Precise
testVariadicTupleConcatenation
testPackingVariadicTuplesHomogeneous
testVariadicTupleContextNoCrash
testVariadicTupleInTupleContext

# Not all modules are checked in mypy: `# cmd: mypy -m m`
testTypeCheckNamedModule4
testTypeCheckNamedModule5
testTypeCheckNamedModuleWithImportCycle
testStubImportNonStubWhileSilent
# cmd: mypy a.py
testErrorInReAddedModule
testFollowImportsNormalPackageInitFileStub
# Not all modules are checked even in default mypy
testPreferPackageOverFile
testPreferPackageOverFile2
testNotPreferPackageOverFileCase
testFollowImportsNormalDeleteFile4
testFollowImportsNormalDeleteFile5
testFollowImportsNormalDeleteFile6
testFollowImportsNormalDeleteFile7
testSubmoduleMixingImportFromAndImport
testSubmoduleImportFromDoesNotAddParents

# import missing --follow-imports=normal
testIncrementalNestedBrokenCascade
# --follow-imports=error
testImportSuppressedWhileAlmostSilent
testAncestorSuppressedWhileAlmostSilent
testErrorButDontIgnore1
testErrorButDontIgnore2
testErrorButDontIgnore3-skip
testErrorButDontIgnore4
testIncrementalFollowImportsError
testFollowImportsError
# --follow-imports=silent
testIncrementalFollowImportsSilent
testIncrementalWithSilentImports
testFollowImportsSilent
# --follow-imports=skip
testIncrementalUnsilencingModule
testIncrementalWithSilentImportsAndIgnore
testIncrementalSilentImportsWithBlatantError
testIncrementalImportIsNewlySilenced
testIncrementalSilencedModuleNoLongerCausesError
testIncrementalFollowImportsSkip
testFollowImportSkipNotInvalidatedOnAddedStubOnFollowForStubs
testAddedSkippedStubsPackageFrom
testAddPackage6
testAddPackage7
testSkipImports
testSkipImportsWithinPackage
testSkipButDontIgnore1
testSkipButDontIgnore2
testFineFollowImportSkipInvalidatedOnAddedStub-skip
testFineAddedSkippedStubsPackageFrom
testFileAddedAndImported
testFileAddedAndImported2
testDeleteFileWithErrors
testDoNotFollowImportToNonStubFile
testFollowImportsSkip
testSubclassingAnySilentImports
testSubclassingAnySilentImports2
testIncrementalFollowImportsVariable
testIncrementalFollowImportsVariablePyProjectTOML
testClassScopeImportWithFollowImports
testMissingSubmoduleImportedWithIgnoreMissingImportsStub
# --no-site-packages
testTypedPkg_config_nositepackages
testTypedPkg_args_nositepackages
testTypedPkgNoSitePkgsIgnoredImports
# "Skipping analyzing "typedpkg_ns.b.bbb": module is installed, but missing library stubs or py.typed marker"
testNamespacePkgWStubs
# __import__("pkg_resources").declare_namespace(__name__)
testNamespacePkgWStubsWithNamespacePackagesFlag

# --enable-error-code redundant-self
# "Redundant "Self" annotation for the first method argument"
testTypingSelfRedundantWarning
testTypingSelfRedundantWarning_pep585
# --enable-error-code redundant-expr
# "If condition is always false"
testRedundantExpressions
# flags: --enable-error-code truthy-bool
testTruthyBool
testTruthyFunctions
testTruthyIterable
# flags: --disable-error-code truthy-bool
testDisableEnableErrorCodesIncremental

# ------------------- start of low-prio/won't do tests -----------------------

# "Name "C" is used before definition"
testBanPathologicalRecursiveTuples
testDefinedDifferentBranchUsedBeforeDef
testUsedBeforeDefBuiltinsGlobal
testUsedBeforeDefBuiltinsMultipass
testUsedBeforeDefImplicitModuleAttrs
# --enable-error-code possibly-undefined "Name "x" may be undefined"
testPossiblyUndefinedWithAssignmentExpr
check-possibly-undefined:testDefinedInOneBranch
check-possibly-undefined:testElif
check-possibly-undefined:testUsedInIf
check-possibly-undefined:testOmittedElse
check-possibly-undefined:testUpdatedInIf
check-possibly-undefined:testNestedIf
check-possibly-undefined:testVeryNestedIf
check-possibly-undefined:testTupleUnpack
check-possibly-undefined:testIndexExpr
check-possibly-undefined:testFunction
check-possibly-undefined:testLambda
check-possibly-undefined:testUsedBeforeDefClass
check-possibly-undefined:testGenerator
check-possibly-undefined:testScope
check-possibly-undefined:testVarFromOuterScopeRedefined
check-possibly-undefined:testWhile
check-possibly-undefined:testForLoop
check-possibly-undefined:testReturn
check-possibly-undefined:testPossiblyUndefinedLoop
check-possibly-undefined:testAssert
check-possibly-undefined:testRaise
check-possibly-undefined:testContinue
check-possibly-undefined:testBreak
check-possibly-undefined:testTryBasic
check-possibly-undefined:testTryMultiExcept
check-possibly-undefined:testTryFinally
check-possibly-undefined:testTryElse
check-possibly-undefined:testDictComprehension
check-possibly-undefined:testUntypedDefCheckUntypedDefs
check-possibly-undefined:testClassBody
check-possibly-undefined:testUntypedDef
check-possibly-undefined:testNoReturn

# `for ... in` type comment
testRefreshForWithTypeComment1
testRefreshForWithTypeComment2
testForStatementTypeComments
testForStatementMultipleTypeComments
testForIndex
testForIndexInClassBody
testErrorCodeSyntaxError3
testAsyncForTypeComments
# with type comment
testWithStmt
testWithStmtInClassBody
testWithStmtTypeComment
testWithStmtTupleTypeComment
testWithStmtComplexTypeComment
testAsyncWithTypeComments
testNewAnalyzerTypeArgBoundCheckDifferentNodes
testForwardRefsInWithStatement

# binder probably deferred issues
testLocalPartialTypesWithNestedFunction3

# "unknown encoding: uft-8"
testInvalidEncoding
testInvalidEncoding2
testInvalidEncoding3
testDoubleEncoding
testDoubleEncoding2
# coding: ascii
testDecodeErrorBlocker1-posix
testDecodeErrorBlocker2-windows
testDecodeErrorBlockerOnInitialRun-posix

# "Syntax error in type annotation"
# Suggestion: Use tuple[T1, ..., Tn] instead of (T1, ..., Tn)
testImplicitTuple2
# "Suggestion: Use tuple[()] instead of () for an empty tuple, or None for a function without a return value"
testReturnEmptyTuple
# "Suggestion: Is there a spurious trailing comma?"
testColumnSyntaxErrorInTypeAnnotation
# Syntax error in type comment, because used `# type:` twice
testErrorCodeTypeIgnoreMisspelled2
# SyntaxError "Assignment expression within a comprehension cannot be used in a class body"
testNoCrashOnAssignmentExprClass

# invalid syntax, and therefore name errors, names should probably be Any
testModifyTwoFilesOneWithBlockingError1
testModifyTwoFilesOneWithBlockingError2
testModifyTwoFilesIntroduceTwoBlockingErrors

# All of these are really not important at all, because there are syntax
# errors, just not the fancy ones.
# Too many invalid syntax errors?
testInvalidFunction
testInvalidFuncDefArgs3
testInvalidFuncDefArgs4
testExceptCommaInPython3
# "unexpected indent"
testUnexpectedIndent
testInconsistentIndent
# "unindent does not match any outer indentation level"
testInconsistentIndent2
# "unexpected EOF while parsing"
testUnexpectedEof
testParseErrorInExtendedSlicing
testParseErrorInExtendedSlicing2
testParseErrorInExtendedSlicing3
# "positional argument follows keyword argument"
testInvalidKeywordArguments1
# "positional argument follows keyword argument unpacking"
testInvalidKeywordArguments2
# "named arguments must follow bare *"
testInvalidBareAsteriskAndVarArgs4
testInvalidBareAsterisk1
testInvalidBareAsterisk2
# "non-default argument follows default argument"
testInvalidFuncDefArgs1
# "invalid syntax. Perhaps you forgot a comma?"
testNotAsBinaryOp
testBinaryNegAsBinaryOp
testErrorCodeSyntaxError
testUpdateClassReferenceAcrossBlockingError
testAddFileWithBlockingError
testBlockingErrorRemainsUnfixed
testDeleteFileWithBlockingError-only_when_nocache
testDeleteFileWithBlockingError2-only_when_cache
testModifyFileWhileBlockingErrorElsewhere
testInitialBlocker
# "cannot delete function call"
testInvalidDel1
# "cannot delete expression"
testInvalidDel2
# "cannot assign to function call here. Maybe you meant '==' instead of '='?"
testInvalidLvalueWithExplicitType
testInvalidTypeDeclaration
# "Cannot assign to literal"
testInvalidWithTarget
# "cannot assign to literal here. Maybe you meant '==' instead of '='?"
testInvalidLvalues*
testInvalidTypeAnnotation2
# "cannot delete expression"
testDelMultipleThingsInvalid
# "Missing parentheses in call to 'print'. Did you mean print(1)?"
testPrintStatementInPython3
# "invalid character in identifier"
testSmartQuotes
# "expected ':'"
testParseError
testParseErrorMultipleTimes
testBlockingErrorWithPreviousError

# Needs lib-stub/blocker.pyi
testImportBringsAnotherFileWithBlockingError1
testImportBringsAnotherFileWithSemanticAnalysisBlockingError
testFixingBlockingErrorBringsInAnotherModuleWithBlocker

# "Not all union combinations were tried because there are too many unions"
testTooManyUnionsException

# Note ""<Foo>.__call__" has type "Callable[[Arg(str, 'x'), VarArg(int)], None]"
# Curently ignored

# Additional questionable cases of "Signatures of "__ior__" and "__or__" are incompatible"
testGenericOperatorMethodOverlapping2
testOverloadedNormalAndInplaceOperatorMethod

# Mypy is probably wrong here, but we might need to revisit
testConstructorJoinsWithCustomMetaclass

# Callable override https://github.com/python/mypy/issues/16549
testClassSpec
testClassSpecError

# Final Literal[str] = "foo" is suddenly a Literal['foo']?
testEnumCreatedFromFinalValue

# "Access to generic class variables is ambiguous" (unimportant, because similar lint exists)
testClassVarWithGeneric
testClassVarWithNestedGeneric
# ""foo" is considered instance variable, to make it class variable use ClassVar[...]"
testSuggestClassVarOnTooFewArgumentsMethod

# Create a class with a base class based on Type[..] of self.foo
testNewAnalyzerUnsupportedBaseClassInsideFunction

# type checking ok, priority low "Cannot assign multiple modules to name "..." without explicit "types.ModuleType" annotation"
testModuleAliasRepeated
testModuleAliasRepeatedComplex
testModuleAliasToOtherModule
testModuleAliasToQualifiedImport2

# NameBinder questionable unreachable usages
testRaiseStatement
reachability_no_mypy_compatible

# My own hard/special tests
class_context_super_class
namedtuple__new__
generic_method_on_class_access_no_overload
generic_method_on_class_access_overload
type_type_alias_circular

# Weird native types of mypy like `from mypy_extensions import i64, i32`
testNativeIntTypes

# Mypy plugins
testChangedPluginsInvalidateCache
testChangedPluginsInvalidateCache2
testAddedPluginsInvalidateCache
testRemovedPluginsInvalidateCache
testPluginConfigData
testIncrementalAddClassMethodPlugin
testIncrementalAddOverloadedMethodPlugin

# Won't support for now --show-error-code-links
testShowErrorCodeLinks

# --allow-redefinition
testUnusedTargetNotClass
testFinalReassignModuleVar
testFinalReassignModuleVar2

# --no-strict-optional details
testUnreachableWithStdlibContextManagersNoStrictOptional
testInitializationWithMultipleValues
testNoneAndGenericTypesOverlapNoStrictOptional
testNamedTupleAsConditionalStrictOptionalDisabled
testPartialAttributeNoneType
testOptionalIterator

# --untyped-calls-exclude=bar.A
testDisallowUntypedCallsAllowListFlags
testDisallowUntypedCallsAllowListConfig

# --disallow-any-expr
testDoNotLimitErrorVolumeIfNotImportErrors
testDisallowAnyExprIncremental
testDisallowAnyExprUnannotatedFunction
testDisallowAnyExprSimple
testDisallowAnyExprExplicitAnyParam
testDisallowAnyExprAllowsAnyInCast
testDisallowAnyExprAllowsAnyInVariableAssignmentWithExplicitTypeAnnotation
testDisallowAnyExprGeneric

# --disallow-any-unimported
testErrorCodeAnyFromUnfollowedImport
testDisallowImplicitTypesIgnoreMissingTypes
testDisallowImplicitTypes
testDisallowImplicitAnyVariableDefinition
testDisallowImplicitAnyGeneric
testDisallowImplicitAnyInherit
testDisallowImplicitAnyAlias
testDisallowImplicitAnyCast
testDisallowImplicitAnyNamedTuple
testDisallowImplicitAnyTypeVarConstraints
testDisallowImplicitAnyNewType
testDisallowImplicitAnyCallableAndTuple
testDisallowImplicitAnySubclassingExplicitAny
testDisallowImplicitAnyVarDeclaration
testDisallowUnimportedAnyTypedDictSimple
testDisallowUnimportedAnyTypedDictGeneric
testNoCrashOnUnImportedAnyNotRequired

# --no-namespace-packages
testClassicNotPackage
testPackageWithoutInitFile
testDeletePackage4
testDeletePackage5
testDeletePackage6

# --soft-error-limit
testLimitLegacyStubErrorVolume

# --show-error-context
testNewAnalyzerTypeArgBoundCheckWithContext
testShowErrorContextFunction
testShowErrorContextClass
testShowErrorContextMember
testShowErrorContextModule
testShowErrorContextTopLevel
testShowErrorContextFromHere

# --pretty
testReprocessMethodShowSource
testGenericTypeAliasesWithNestedArgs
testPrettyMessageSorting
testParseErrorShowSource
testDictExpressionErrorLocations

# --no-silence-site-packages
testAddFileWhichImportsLibModuleWithErrors

# Probably won't support: Special mypy extensions
testFlexibleAlias1
testFlexibleAlias2
testFlexibleAlias3

# Won't support for now: "t" is a type variable and only valid in type context
testExpressionRefersToTypeVariable

# Won't support for now: "Use `from typing_extensions import _FutureFeatureFixture` instead"
testTypingExtensionsSuggestion

# Probably won't support: invalid version numbers for # flags: --python-version 3.99
testFeatureVersionSuggestion

# Probably won't support: NamedTuple subclass narrowing, this won't be
# supported, once PreciseTupleTypes is a complete feature.
testNarrowingLenTupleSubclass

# Probably won't support: typing._promote
testListWithDucktypeCompatibility
testListWithDucktypeCompatibilityAndTransitivity
testSimpleDucktypeDecorator
testDucktypeTransitivityDecorator
testOverloadingAndDucktypeCompatibility

# Probably won't support: Type comments for params
testFastParsePerArgumentAnnotations
testFastParsePerArgumentAnnotationsWithReturn
testFastParsePerArgumentAnnotationsWithAnnotatedBareStar
testFastParsePerArgumentAnnotationsWithReturnAndBareStar

# Tuple comment syntax: Incompatible number of tuple items
testVariableDeclWithInvalidNumberOfTypes
testVariableDeclWithInvalidNumberOfTypesNested
testVariableDeclWithInvalidNumberOfTypesNested2
testVariableDeclWithInvalidNumberOfTypesNested4
# Tuple comment syntax: tuple type expected for multiple variables
testVariableDeclWithInvalidType
testVariableDeclWithInvalidNumberOfTypesNested3
testVariableDeclWithInvalidNumberOfTypesNested5
# Won't support: Signature Comments
testIncompatibleSignatureInComment
testFunctionSignatureAsComment
testMethodSignatureAsComment
testVarArgsAndCommentSignature
testKeywordArgumentAndCommentSignature
testKeywordArgumentAndCommentSignature2
testKeywordVarArgsAndCommentSignature
testWrongNumberOfArguments
testNestedFunctionInMethodWithTooFewArgumentsInTypeComment
testDeepNestedFunctionWithTooFewArgumentsInTypeComment
testDeepNestedMethodInTypeComment
testEllipsisWithArbitraryArgsOnBareFunctionWithKwargs
testEllipsisWithArbitraryArgsOnBareFunctionWithVarargs
testEllipsisWithSomethingAfterItFails
testEllipsisWithSomethingBeforeItFails
testMethodDefaultArgumentsAndSignatureAsComment
testDefaultArgumentsAndSignatureAsComment
testLiteralInsideOtherTypesTypeCommentsPython3
testLiteralInvalidTypeComment
testLiteralInvalidTypeComment2
testInferOptionalFromDefaultNoneComment
testNoInferOptionalFromDefaultNoneComment
testCheckUntypedDefsSelf1
testOperatorDoubleUnionDivision
testFasterParseTooManyArgumentsAnnotation
testFasterParseTooFewArgumentsAnnotation
testFastParserShowsMultipleErrors
testFastParserConsistentFunctionTypes
testErrorCodeInvalidCommentSignature
testErrorCodeIgnoreAfterArgComment
testColumnsMethodDefaultArgumentsAndSignatureAsComment
testColumnTypeSignatureHasTooFewArguments
testInvalidSignatureInComment*
testDuplicateSignatures1
testDuplicateSignatures2
testTooManyTypes
testTooFewTypes
testCommentFunctionAnnotationVarArgMispatch-skip
testCommentFunctionAnnotationVarArgMispatch2-skip
testErrorCodeSyntaxError2
testFastParseFunctionAnnotationSyntaxError
testFastParseFunctionAnnotationSyntaxErrorSpaces
testFastParseInvalidFunctionAnnotation

# --scripts-are-modules
testScriptsAreModules

# --custom-typeshed-dir 
testIgnoreErrorsFromTypeshed

# cmd: mypy ...
testNonExistentFileOnCommandLine1
testInlineConfigFineGrained1
testInlineConfigFineGrained2
testNoCrashOnDeletedWithCacheOnCmdline
testFollowImportsNormalSearchPathUpdate-only_when_nocache
testFollowImportsNormalSearchPathUpdate2-only_when_cache
testAddNonPackageSubdir
testAddPackage5

# Won't do: Type Vars qualified names -> comes from visit_Attribute and is not really qualified, but the expr name
testQualifiedTypeVariableName
testPartiallyQualifiedTypeVariableName
testSerializeSimpleTypeVar
testSerializeBoundedTypeVar
testSerializeTypeVarWithValues
testSerializeTypeVarInClassBody

# Won't support: __eq__ called directly with a keyword argument (which is actually legal)
testMagicMethodPositionalOnlyArg
testMagicMethodPositionalOnlyArgFastparse

# Won't support: reveal_locals
testRevealLocalsFunction
testRevealLocalsOnClassVars
testRevealLocals
testUnimportedRevealLocals

# Won't support: Warning about wrong usage of type var values
testObsoleteTypevarValuesSyntax

# Won't support ever: Union Pipe "|" not allowed in 3.9
testUnionOrSyntaxWithinRuntimeContextNotAllowed
testUnionOrSyntaxWithinRuntimeContextNotAllowed2
testUnionOrSyntaxMissingFutureImport
testTypeAliasNotSupportedWithNewStyleUnion

# Probably won't support `# flags2: ` in tests
testInlineIncremental2
# Won't support ever: Mypy test case details
testNewAnalyzerIncompleteFixture

# Won't support ever: python 2
testMypyPathAndPython2Dir
# Won't support: Python 3.7 specialties
testGenericBuiltinWarning
testGenericBuiltinSetWarning
testGenericCollectionsWarning
testNoSubcriptionOfStdlibCollections
# Won't support: Python 3.8 specialties
testTupleWithDifferentArgsPy38
# Won't support Pyhton 3.9 specialities
testDataclassWithMatchArgsOldVersion
testUnionOrSyntaxInIsinstanceNotSupported
# "Subscripting classes that are not generic at runtime may require escaping"
testCheckDisallowAnyGenericsStubOnly

# Won't support list/dict/tuple "is not subscriptable" (python <3.10)
testNoSubscriptionOfBuiltinAliases
testDataclassWithSlotsArgBefore310

# Won't support --disable-recursive-aliases
testNewAnalyzerAliasToNotReadyDirectBase
testNewAnalyzerAliasToNotReadyDirectBaseFunction
testNewAnalyzerNewTypeForwardClassAliasDirect
testNewAnalyzerForwardTypeAliasInBase
testRecursiveForwardReferenceInUnion
testRecursiveAliasesErrors1
testRecursiveAliasesErrors2
testJSONAliasApproximation
testCrashOnSelfRecursiveNamedTupleVar
testSimpleSelfReferentialNamedTuple
testSelfRefNT1
testSelfRefNT2
testSelfRefNT3
testSelfRefNT4
testSelfRefNT5
testRecursiveNamedTupleInBases
testSubclassOfRecursiveNamedTuple
testSelfRecursiveTypedDictInheriting
testSubclassOfRecursiveTypedDict
testCorrectJoinOfSelfRecursiveTypedDicts

# Won't support --force-union-syntax
testOptionalErrorSyntax
testLiteralUnionErrorSyntax
testLiteralOptionalErrorSyntax

# Mypy test case issues
# https://github.com/python/mypy/issues/13102
testNewAnalyzerMoreInvalidTypeVarArgumentsDeferred

# Not working in interpreter
# Recursive class inheritance
testNewAnalyzerAliasToNotReadyNestedClass

# "Recursive types are not allowed at function scope"
testNoRecursiveTuplesAtFunctionScope
testRecursiveBoundFunctionScopeNoCrash
testNewAnalyzerReportLoopInMRO2

# Won't support: Mypy internals
testIncrCacheBustedProtocol
testIncrementalBustedFineGrainedCache1
testIncrementalBustedFineGrainedCache3
testInvalidateCachePart

# Won't do, because too many differences because of different stubs
testDivmod
# xfail
testOpWithInheritedFromAny-xfail
# Skips
testSubtypingWithTypeImplementingGenericABCViaInheritance2-skip
testOverloadInferringArgumentsUsingContext2-skip
testUnionTwoPassInference-skip
testLiteralErrorsWhenInvoked-skip
testWeirdRecursiveInferenceForProtocols-skip
